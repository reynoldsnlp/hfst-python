#!/usr/bin/env python3
"""
To use this script as a local pre-commit check...
    1) Symlink (or copy) this file to .git/hooks/
    2) Ensure that it is executable (chmod +x .git/hooks/pre-commit).
"""

import subprocess
import sys

sys.stdin = open('/dev/tty')


def bump_version(beta, test):
    flags = []
    if beta:
        flags.append('--beta')
    if test:
        flags.append('--test')
    completed = subprocess.run(['./scripts/bump_version.py'] + flags,
                               stderr=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               universal_newlines=True)
    subprocess.run(['git', 'add', 'VERSION'])
    print(completed.stderr)
    autoversion = completed.stdout.strip()
    print(f'Version set to {autoversion}')
    if test:
        tag_commit = '0'
    else:
        tag_commit = '1'
    with open('tag_commit.tmp', 'w') as f:
        f.write(tag_commit)
    sys.exit(0)


print(f'Running {__file__} ...', file=sys.stderr)

diff = subprocess.run(['git', 'diff', 'VERSION'],
                      stdout=subprocess.PIPE,
                      universal_newlines=True).stdout.strip()
with open('VERSION') as f:
    new_version = f.read().strip()
diff_msg = f' with v{new_version}' if diff else ''

if diff:
    print(f'The version number in `setup.py` has changed to {new_version}. '
          'It is recommended that you leave version numbering up to this '
          'pre-commit script. How would you like to proceed?')
else:
    print('How would you like to proceed?')
response = input('\t(C) Cancel/abort commit.\n'
                 f'\t(I) Ignore (commit as-is{diff_msg})\n'
                 '\t(R) Make a (R)elease (auto-bump release version and publish to PyPI)\n'
                 '\t(BR) Make a (B)eta (R)elease (auto-bump beta version and publish to PyPI)\n'
                 '\t(T) Make a (T)est release (auto-bump release version and publish to Test PyPI)\n'
                 '\t(BT) Make a (B)eta (T)est release (auto-bump beta version and publish to Test PyPI)\n'
                 '\t (c/i/r/br/T/bt) > ')

if response in {'C', 'c'}:
    sys.exit(1)
elif response in {'I', 'i'}:
    sys.exit(0)
elif response in {'R', 'r'}:
    bump_version(beta=False, test=False)
elif response in {'BR', 'Br', 'bR', 'br'}:
    bump_version(beta=True, test=False)
elif response in {'T', 't', ''}:
    bump_version(beta=False, test=True)
elif response in {'BT', 'Bt', 'bT', 'bt'}:
    bump_version(beta=True, test=True)
else:
    print('Unrecognized option ({response}). Aborting...')
    sys.exit(1)
