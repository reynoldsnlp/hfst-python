/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ContextTransducersAreNotAutomataException swig_types[0]
#define SWIGTYPE_p_EmptySetOfContextsException swig_types[1]
#define SWIGTYPE_p_EmptyStringException swig_types[2]
#define SWIGTYPE_p_EndOfStreamException swig_types[3]
#define SWIGTYPE_p_FlagDiacriticsAreNotIdentitiesException swig_types[4]
#define SWIGTYPE_p_FunctionNotImplementedException swig_types[5]
#define SWIGTYPE_p_HfstException swig_types[6]
#define SWIGTYPE_p_HfstFatalException swig_types[7]
#define SWIGTYPE_p_HfstTransducerTypeMismatchException swig_types[8]
#define SWIGTYPE_p_ImplementationTypeNotAvailableException swig_types[9]
#define SWIGTYPE_p_IncorrectUtf8CodingException swig_types[10]
#define SWIGTYPE_p_MetadataException swig_types[11]
#define SWIGTYPE_p_MissingOpenFstInputSymbolTableException swig_types[12]
#define SWIGTYPE_p_NotTransducerStreamException swig_types[13]
#define SWIGTYPE_p_NotValidAttFormatException swig_types[14]
#define SWIGTYPE_p_NotValidLexcFormatException swig_types[15]
#define SWIGTYPE_p_NotValidPrologFormatException swig_types[16]
#define SWIGTYPE_p_SpecifiedTypeRequiredException swig_types[17]
#define SWIGTYPE_p_StateIndexOutOfBoundsException swig_types[18]
#define SWIGTYPE_p_StateIsNotFinalException swig_types[19]
#define SWIGTYPE_p_StreamCannotBeWrittenException swig_types[20]
#define SWIGTYPE_p_StreamIsClosedException swig_types[21]
#define SWIGTYPE_p_StreamNotReadableException swig_types[22]
#define SWIGTYPE_p_SymbolNotFoundException swig_types[23]
#define SWIGTYPE_p_TransducerHasWrongTypeException swig_types[24]
#define SWIGTYPE_p_TransducerHeaderException swig_types[25]
#define SWIGTYPE_p_TransducerIsCyclicException swig_types[26]
#define SWIGTYPE_p_TransducerTypeMismatchException swig_types[27]
#define SWIGTYPE_p_TransducersAreNotAutomataException swig_types[28]
#define SWIGTYPE_p_allocator_type swig_types[29]
#define SWIGTYPE_p_char swig_types[30]
#define SWIGTYPE_p_difference_type swig_types[31]
#define SWIGTYPE_p_first_type swig_types[32]
#define SWIGTYPE_p_float swig_types[33]
#define SWIGTYPE_p_hfst__HfstInputStream swig_types[34]
#define SWIGTYPE_p_hfst__HfstOutputStream swig_types[35]
#define SWIGTYPE_p_hfst__HfstTokenizer swig_types[36]
#define SWIGTYPE_p_hfst__HfstTransducer swig_types[37]
#define SWIGTYPE_p_hfst__implementations__HfstBasicTransducer swig_types[38]
#define SWIGTYPE_p_hfst__implementations__HfstBasicTransition swig_types[39]
#define SWIGTYPE_p_hfst__lexc__LexcCompiler swig_types[40]
#define SWIGTYPE_p_hfst__twolc__TwolcCompiler swig_types[41]
#define SWIGTYPE_p_hfst__xeroxRules__Rule swig_types[42]
#define SWIGTYPE_p_hfst__xfst__XfstCompiler swig_types[43]
#define SWIGTYPE_p_hfst__xre__XreCompiler swig_types[44]
#define SWIGTYPE_p_hfst_ol__Location swig_types[45]
#define SWIGTYPE_p_hfst_ol__PmatchContainer swig_types[46]
#define SWIGTYPE_p_int swig_types[47]
#define SWIGTYPE_p_key_type swig_types[48]
#define SWIGTYPE_p_mapped_type swig_types[49]
#define SWIGTYPE_p_p_PyObject swig_types[50]
#define SWIGTYPE_p_second_type swig_types[51]
#define SWIGTYPE_p_size_t swig_types[52]
#define SWIGTYPE_p_size_type swig_types[53]
#define SWIGTYPE_p_std__allocatorT_float_t swig_types[54]
#define SWIGTYPE_p_std__allocatorT_hfst__HfstTransducer_t swig_types[55]
#define SWIGTYPE_p_std__allocatorT_hfst__implementations__HfstBasicTransition_t swig_types[56]
#define SWIGTYPE_p_std__allocatorT_hfst__xeroxRules__Rule_t swig_types[57]
#define SWIGTYPE_p_std__allocatorT_hfst_ol__Location_t swig_types[58]
#define SWIGTYPE_p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t swig_types[59]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t swig_types[60]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_std__string_t_t swig_types[61]
#define SWIGTYPE_p_std__allocatorT_std__pairT_std__string_std__string_t_t swig_types[62]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[63]
#define SWIGTYPE_p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t swig_types[64]
#define SWIGTYPE_p_std__allocatorT_unsigned_int_t swig_types[65]
#define SWIGTYPE_p_std__invalid_argument swig_types[66]
#define SWIGTYPE_p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t swig_types[67]
#define SWIGTYPE_p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t swig_types[68]
#define SWIGTYPE_p_std__lessT_std__pairT_std__string_std__string_t_t swig_types[69]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[70]
#define SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t swig_types[71]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[72]
#define SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t swig_types[73]
#define SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t swig_types[74]
#define SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t swig_types[75]
#define SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t swig_types[76]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[77]
#define SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t swig_types[78]
#define SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t swig_types[79]
#define SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t swig_types[80]
#define SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t swig_types[81]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[82]
#define SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t swig_types[83]
#define SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t swig_types[84]
#define SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t swig_types[85]
#define SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t swig_types[86]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[87]
#define SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t swig_types[88]
#define SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t swig_types[89]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[90]
#define SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t swig_types[91]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[92]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[93]
#define SWIGTYPE_p_unsigned_int swig_types[94]
#define SWIGTYPE_p_value_type swig_types[95]
static swig_type_info *swig_types[97];
static swig_module_info swig_module = {swig_types, 96, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _libhfst.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__libhfst

#else
#  define SWIG_init    init_libhfst

#endif
#define SWIG_name    "_libhfst"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    return SWIG_From_long  (static_cast< long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(ptrdiff_t) <= sizeof(long long) */
    return SWIG_From_long_SS_long  (static_cast< long long >(value));
  }
#endif
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long (PyObject *obj, long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    long long v = PyLong_AsLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      res = SWIG_OverflowError;
    }
  } else {
    long v;
    res = SWIG_AsVal_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    const double mant_min = -mant_max;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
      return SWIG_OverflowError;
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
      if (val) *val = (long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
    long v;
    res = SWIG_AsVal_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
    long long v;
    res = SWIG_AsVal_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  }
#endif
  return res;
}


#include <algorithm>


#include <vector>


#include <utility>


#include <set>


#include <map>


#include <algorithm>


#define HFSTIMPORT
#include "HfstDataTypes.h"
#include "HfstTransducer.h"
#include "HfstOutputStream.h"
#include "HfstInputStream.h"
#include "HfstExceptionDefs.h"
#include "HfstTokenizer.h"
#include "HfstFlagDiacritics.h"
#include "HfstXeroxRules.h"
#include "parsers/XreCompiler.h"
#include "parsers/LexcCompiler.h"
#include "parsers/XfstCompiler.h"
#include "parsers/SfstCompiler.h"
#include "implementations/HfstBasicTransition.h"
#include "implementations/HfstBasicTransducer.h"
#include "implementations/optimized-lookup/pmatch.h"
#include "implementations/optimized-lookup/pmatch_tokenize.h"
#include "parsers/TwolcCompiler.h"
namespace hfst { typedef std::vector<hfst::xeroxRules::Rule> HfstRuleVector; }
namespace hfst { typedef std::pair<hfst::HfstTransducer*,unsigned int> HfstTransducerUIntPair; }

// Most of C++ extension code is located in separate files.
#include "hfst_regex_extensions.cpp"
#include "hfst_extensions.cpp"
#include "hfst_lexc_extensions.cpp"
#include "hfst_xfst_extensions.cpp"
#include "hfst_pmatch_extensions.cpp"
#include "hfst_pmatch_tokenize_extensions.cpp"
#include "hfst_sfst_extensions.cpp"
#include "hfst_lookup_extensions.cpp"
#include "hfst_rules_extensions.cpp"
#include "hfst_prolog_extensions.cpp"


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item);
      } catch (const std::invalid_argument& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", (int)_index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    Py_ssize_t _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  // STL container wrapper around a Python sequence
  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef Py_ssize_t difference_type;
    typedef size_t size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check() const
    {
      Py_ssize_t s = size();
      for (Py_ssize_t i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item))
	  return false;
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast< long >(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  (static_cast< unsigned long long >(value));
  }
#endif
}

SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::string,std::allocator< std::string > >());
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::string,std::allocator< std::string > >::difference_type id = i;
      std::vector< std::string,std::allocator< std::string > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

namespace swig {
  static PyObject* container_owner_attribute() {
    static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
    return attr;
  }

  template <typename T>
  struct container_owner {
    // By default, do not add the back-reference (for value types)
    // Specialization below will check the reference for pointer types.
    static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
      return false;
    }
  };

  template <>
  struct container_owner<swig::pointer_category> {  
    /*
     * Call to add a back-reference to the owning object when returning a 
     * reference from a container.  Will only set the reference if child
     * is a SWIG wrapper object that does not own the pointer.
     *
     * returns whether the reference was set or not
     */
    static bool back_reference(PyObject* child, PyObject* owner) {
      SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
      if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
        return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
      }
      return false;
    }
  };
}

SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_2(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__erase__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator first,std::vector< std::string >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::string >::iterator std_vector_Sl_std_string_Sg__insert__SWIG_0(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_string_Sg__insert__SWIG_1(std::vector< std::string > *self,std::vector< std::string >::iterator pos,std::vector< std::string >::size_type n,std::vector< std::string >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }





































      namespace swig {
	template <>  struct traits<std::pair< std::string, std::string > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "std::string" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::vector< std::pair< std::string,std::string >, std::allocator< std::pair< std::string,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< std::string,std::string >" "," "std::allocator< std::pair< std::string,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__iterator(std::vector< std::pair< std::string,std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____nonzero__(std::vector< std::pair< std::string,std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____bool__(std::vector< std::pair< std::string,std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::size_type std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____len__(std::vector< std::pair< std::string,std::string > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getslice__(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::difference_type i,std::vector< std::pair< std::string,std::string > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setslice____SWIG_0(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::difference_type i,std::vector< std::pair< std::string,std::string > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >());
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setslice____SWIG_1(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::difference_type i,std::vector< std::pair< std::string,std::string > >::difference_type j,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delslice__(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::difference_type i,std::vector< std::pair< std::string,std::string > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delitem____SWIG_0(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem____SWIG_0(std::vector< std::pair< std::string,std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type id = i;
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_0(std::vector< std::pair< std::string,std::string > > *self,PySliceObject *slice,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type id = i;
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_1(std::vector< std::pair< std::string,std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type id = i;
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delitem____SWIG_1(std::vector< std::pair< std::string,std::string > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type id = i;
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::value_type const &std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem____SWIG_1(std::vector< std::pair< std::string,std::string > > const *self,std::vector< std::pair< std::string,std::string > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_2(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::difference_type i,std::vector< std::pair< std::string,std::string > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::value_type std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__pop(std::vector< std::pair< std::string,std::string > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__append(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::iterator std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_0(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::iterator std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_1(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::iterator first,std::vector< std::pair< std::string,std::string > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::pair< std::string,std::string > >::iterator std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__insert__SWIG_0(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::iterator pos,std::vector< std::pair< std::string,std::string > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__insert__SWIG_1(std::vector< std::pair< std::string,std::string > > *self,std::vector< std::pair< std::string,std::string > >::iterator pos,std::vector< std::pair< std::string,std::string > >::size_type n,std::vector< std::pair< std::string,std::string > >::value_type const &x){ self->insert(pos, n, x); }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


namespace swig {
  template <> struct traits< float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };
  template <>  struct traits_asval< float > {
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from< float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_float_Sg__iterator(std::vector< float > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_float_Sg____nonzero__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_float_Sg____bool__(std::vector< float > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< float >::size_type std_vector_Sl_float_Sg____len__(std::vector< float > const *self){
      return self->size();
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_0(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< float,std::allocator< float > >());
    }
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_1(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j,std::vector< float,std::allocator< float > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delslice__(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_0(std::vector< float > *self,std::vector< float >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< float,std::allocator< float > > *std_vector_Sl_float_Sg____getitem____SWIG_0(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_0(std::vector< float > *self,PySliceObject *slice,std::vector< float,std::allocator< float > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_1(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_1(std::vector< float > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< float,std::allocator< float > >::difference_type id = i;
      std::vector< float,std::allocator< float > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg____getitem____SWIG_1(std::vector< float > const *self,std::vector< float >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_2(std::vector< float > *self,std::vector< float >::difference_type i,std::vector< float >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__pop(std::vector< float > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< float,std::allocator< float > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_float_Sg__append(std::vector< float > *self,std::vector< float >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self,std::vector< float >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self,std::vector< float >::iterator first,std::vector< float >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__insert__SWIG_0(std::vector< float > *self,std::vector< float >::iterator pos,std::vector< float >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_float_Sg__insert__SWIG_1(std::vector< float > *self,std::vector< float >::iterator pos,std::vector< float >::size_type n,std::vector< float >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <class SwigPySeq, class T> 
    inline void 
    assign(const SwigPySeq& swigpyseq, std::set<T>* seq) {
      // seq->insert(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
      typedef typename SwigPySeq::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	seq->insert(seq->end(),(value_type)(*it));
      }
    }

    template <class T>
    struct traits_asptr<std::set<T> >  {
      static int asptr(PyObject *obj, std::set<T> **s) {
	return traits_asptr_stdseq<std::set<T> >::asptr(obj, s);
      }
    };

    template <class T>
    struct traits_from<std::set<T> > {
      static PyObject *from(const std::set<T>& vec) {
	return traits_from_stdseq<std::set<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::set< std::string, std::less< std::string >, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "std::string" "," "std::less< std::string >" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_std_string_Sg__iterator(std::set< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_std_string_Sg____nonzero__(std::set< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_std_string_Sg____bool__(std::set< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< std::string >::size_type std_set_Sl_std_string_Sg____len__(std::set< std::string > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_std_string_Sg__append(std::set< std::string > *self,std::set< std::string >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_std_string_Sg____contains__(std::set< std::string > *self,std::set< std::string >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< std::string >::value_type std_set_Sl_std_string_Sg____getitem__(std::set< std::string > const *self,std::set< std::string >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_std_string_Sg__add(std::set< std::string > *self,std::set< std::string >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_std_string_Sg__discard(std::set< std::string > *self,std::set< std::string >::value_type x){
       self->erase(x);
     }
SWIGINTERN void std_set_Sl_std_string_Sg__erase__SWIG_1(std::set< std::string > *self,std::set< std::string >::iterator pos){ self->erase(pos); }
SWIGINTERN void std_set_Sl_std_string_Sg__erase__SWIG_2(std::set< std::string > *self,std::set< std::string >::iterator first,std::set< std::string >::iterator last){ self->erase(first, last); }


      namespace swig {
	template <>  struct traits<std::set< std::pair< std::string,std::string >, std::less< std::pair< std::string,std::string > >, std::allocator< std::pair< std::string,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "std::pair< std::string,std::string >" "," "std::less< std::pair< std::string,std::string > >" "," "std::allocator< std::pair< std::string,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__iterator(std::set< std::pair< std::string,std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____nonzero__(std::set< std::pair< std::string,std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____bool__(std::set< std::pair< std::string,std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< std::pair< std::string,std::string > >::size_type std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____len__(std::set< std::pair< std::string,std::string > > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__append(std::set< std::pair< std::string,std::string > > *self,std::set< std::pair< std::string,std::string > >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____contains__(std::set< std::pair< std::string,std::string > > *self,std::set< std::pair< std::string,std::string > >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< std::pair< std::string,std::string > >::value_type std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem__(std::set< std::pair< std::string,std::string > > const *self,std::set< std::pair< std::string,std::string > >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__add(std::set< std::pair< std::string,std::string > > *self,std::set< std::pair< std::string,std::string > >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__discard(std::set< std::pair< std::string,std::string > > *self,std::set< std::pair< std::string,std::string > >::value_type x){
       self->erase(x);
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_1(std::set< std::pair< std::string,std::string > > *self,std::set< std::pair< std::string,std::string > >::iterator pos){ self->erase(pos); }
SWIGINTERN void std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_2(std::set< std::pair< std::string,std::string > > *self,std::set< std::pair< std::string,std::string > >::iterator first,std::set< std::pair< std::string,std::string > >::iterator last){ self->erase(first, last); }

  namespace swig {
    template <>  struct traits< hfst::HfstTransducer > {
      typedef pointer_category category;
      static const char* type_name() { return"hfst::HfstTransducer"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< hfst::HfstTransducer, std::allocator< hfst::HfstTransducer > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "hfst::HfstTransducer" "," "std::allocator< hfst::HfstTransducer >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_hfst_HfstTransducer_Sg__iterator(std::vector< hfst::HfstTransducer > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_hfst_HfstTransducer_Sg____nonzero__(std::vector< hfst::HfstTransducer > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_hfst_HfstTransducer_Sg____bool__(std::vector< hfst::HfstTransducer > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< hfst::HfstTransducer >::size_type std_vector_Sl_hfst_HfstTransducer_Sg____len__(std::vector< hfst::HfstTransducer > const *self){
      return self->size();
    }
SWIGINTERN std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *std_vector_Sl_hfst_HfstTransducer_Sg____getslice__(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::difference_type i,std::vector< hfst::HfstTransducer >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____setslice____SWIG_0(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::difference_type i,std::vector< hfst::HfstTransducer >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >());
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____setslice____SWIG_1(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::difference_type i,std::vector< hfst::HfstTransducer >::difference_type j,std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____delslice__(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::difference_type i,std::vector< hfst::HfstTransducer >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____delitem____SWIG_0(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *std_vector_Sl_hfst_HfstTransducer_Sg____getitem____SWIG_0(std::vector< hfst::HfstTransducer > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type id = i;
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____setitem____SWIG_0(std::vector< hfst::HfstTransducer > *self,PySliceObject *slice,std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type id = i;
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____setitem____SWIG_1(std::vector< hfst::HfstTransducer > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type id = i;
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____delitem____SWIG_1(std::vector< hfst::HfstTransducer > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type id = i;
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< hfst::HfstTransducer >::value_type const &std_vector_Sl_hfst_HfstTransducer_Sg____getitem____SWIG_1(std::vector< hfst::HfstTransducer > const *self,std::vector< hfst::HfstTransducer >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg____setitem____SWIG_2(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::difference_type i,std::vector< hfst::HfstTransducer >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< hfst::HfstTransducer >::value_type std_vector_Sl_hfst_HfstTransducer_Sg__pop(std::vector< hfst::HfstTransducer > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg__append(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< hfst::HfstTransducer >::iterator std_vector_Sl_hfst_HfstTransducer_Sg__erase__SWIG_0(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< hfst::HfstTransducer >::iterator std_vector_Sl_hfst_HfstTransducer_Sg__erase__SWIG_1(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::iterator first,std::vector< hfst::HfstTransducer >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< hfst::HfstTransducer >::iterator std_vector_Sl_hfst_HfstTransducer_Sg__insert__SWIG_0(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::iterator pos,std::vector< hfst::HfstTransducer >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_hfst_HfstTransducer_Sg__insert__SWIG_1(std::vector< hfst::HfstTransducer > *self,std::vector< hfst::HfstTransducer >::iterator pos,std::vector< hfst::HfstTransducer >::size_type n,std::vector< hfst::HfstTransducer >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueIterator_T<OutIter>(current, begin, end, seq);
    }
  }


  namespace swig {
    template <class SwigPySeq, class K, class T, class Compare, class Alloc >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T,Compare,Alloc > *map) {
      typedef typename std::map<K,T,Compare,Alloc >::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T, class Compare, class Alloc>
    struct traits_asptr<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<map_type, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<map_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T, class Compare, class Alloc >
    struct traits_from<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;

      static PyObject *asdict(const map_type& map) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	size_type size = map.size();
	Py_ssize_t pysize = (size <= (size_type) INT_MAX) ? (Py_ssize_t) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  swig::SwigVar_PyObject key = swig::from(i->first);
	  swig::SwigVar_PyObject val = swig::from(i->second);
	  PyDict_SetItem(obj, key, val);
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return obj;
      }
                
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_InternalNewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  return asdict(map);
	}
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map< std::string, std::string, std::less< std::string >, std::allocator< std::pair< std::string const,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "std::string" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____nonzero__(std::map< std::string,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____bool__(std::map< std::string,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,std::string >::size_type std_map_Sl_std_string_Sc_std_string_Sg____len__(std::map< std::string,std::string > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,std::string >::mapped_type const &std_map_Sl_std_string_Sc_std_string_Sg____getitem__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg____delitem__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > const *self,std::map< std::string,std::string >::key_type const &key){
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__keys(std::map< std::string,std::string > *self){
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__values(std::map< std::string,std::string > *self){
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__items(std::map< std::string,std::string > *self){
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____contains__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__key_iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__value_iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG_0(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG_1(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__asdict(std::map< std::string,std::string > *self){
      return swig::traits_from< std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__erase__SWIG_1(std::map< std::string,std::string > *self,std::map< std::string,std::string >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__erase__SWIG_2(std::map< std::string,std::string > *self,std::map< std::string,std::string >::iterator first,std::map< std::string,std::string >::iterator last){ self->erase(first, last); }

      namespace swig {
	template <>  struct traits<std::pair< std::pair< std::string,std::string >, std::pair< std::string,std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::pair< std::string,std::string >" "," "std::pair< std::string,std::string >" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::map< std::pair< std::string,std::string >, std::pair< std::string,std::string >, std::less< std::pair< std::string,std::string > >, std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::pair< std::string,std::string >" "," "std::pair< std::string,std::string >" "," "std::less< std::pair< std::string,std::string > >" "," "std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__iterator(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____nonzero__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____bool__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::size_type std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____len__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type const &std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &key){
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delitem__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &key){
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__has_key(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &key){
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__keys(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self){
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__values(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self){
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__items(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self){
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::size_type size = self->size();
      Py_ssize_t pysize = (size <= (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::size_type) INT_MAX) ? (Py_ssize_t) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >::const_iterator i = self->begin();
      for (Py_ssize_t j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____contains__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__key_iterator(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__value_iterator(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_0(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &key){
      self->erase(key);
    }
SWIGINTERN void std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_1(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &key,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type const &x){
      (*self)[key] = x;
    }
SWIGINTERN PyObject *std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__asdict(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self){
      return swig::traits_from< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > >::asdict(*self);
    }
SWIGINTERN void std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_1(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator position){ self->erase(position); }
SWIGINTERN void std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_2(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *self,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator first,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator last){ self->erase(first, last); }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


namespace swig {
  template <> struct traits< unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };
  template <>  struct traits_asval< unsigned int > {
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from< unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< unsigned int, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_unsigned_SS_int_Sg__iterator(std::vector< unsigned int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg____nonzero__(std::vector< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg____bool__(std::vector< unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< unsigned int >::size_type std_vector_Sl_unsigned_SS_int_Sg____len__(std::vector< unsigned int > const *self){
      return self->size();
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *std_vector_Sl_unsigned_SS_int_Sg____getslice__(std::vector< unsigned int > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setslice____SWIG_0(std::vector< unsigned int > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< unsigned int,std::allocator< unsigned int > >());
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setslice____SWIG_1(std::vector< unsigned int > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____delslice__(std::vector< unsigned int > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_0(std::vector< unsigned int > *self,std::vector< unsigned int >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< unsigned int,std::allocator< unsigned int > > *std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_0(std::vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(std::vector< unsigned int > *self,PySliceObject *slice,std::vector< unsigned int,std::allocator< unsigned int > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(std::vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_1(std::vector< unsigned int > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type id = i;
      std::vector< unsigned int,std::allocator< unsigned int > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< unsigned int >::value_type const &std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_1(std::vector< unsigned int > const *self,std::vector< unsigned int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_2(std::vector< unsigned int > *self,std::vector< unsigned int >::difference_type i,std::vector< unsigned int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< unsigned int >::value_type std_vector_Sl_unsigned_SS_int_Sg__pop(std::vector< unsigned int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< unsigned int,std::allocator< unsigned int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__append(std::vector< unsigned int > *self,std::vector< unsigned int >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_0(std::vector< unsigned int > *self,std::vector< unsigned int >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_1(std::vector< unsigned int > *self,std::vector< unsigned int >::iterator first,std::vector< unsigned int >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< unsigned int >::iterator std_vector_Sl_unsigned_SS_int_Sg__insert__SWIG_0(std::vector< unsigned int > *self,std::vector< unsigned int >::iterator pos,std::vector< unsigned int >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__insert__SWIG_1(std::vector< unsigned int > *self,std::vector< unsigned int >::iterator pos,std::vector< unsigned int >::size_type n,std::vector< unsigned int >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< hfst::implementations::HfstBasicTransition > {
      typedef pointer_category category;
      static const char* type_name() { return"hfst::implementations::HfstBasicTransition"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< hfst::implementations::HfstBasicTransition, std::allocator< hfst::implementations::HfstBasicTransition > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "hfst::implementations::HfstBasicTransition" "," "std::allocator< hfst::implementations::HfstBasicTransition >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__iterator(std::vector< hfst::implementations::HfstBasicTransition > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____nonzero__(std::vector< hfst::implementations::HfstBasicTransition > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____bool__(std::vector< hfst::implementations::HfstBasicTransition > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition >::size_type std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____len__(std::vector< hfst::implementations::HfstBasicTransition > const *self){
      return self->size();
    }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____getslice__(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::difference_type i,std::vector< hfst::implementations::HfstBasicTransition >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setslice____SWIG_0(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::difference_type i,std::vector< hfst::implementations::HfstBasicTransition >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >());
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setslice____SWIG_1(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::difference_type i,std::vector< hfst::implementations::HfstBasicTransition >::difference_type j,std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____delslice__(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::difference_type i,std::vector< hfst::implementations::HfstBasicTransition >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____delitem____SWIG_0(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____getitem____SWIG_0(std::vector< hfst::implementations::HfstBasicTransition > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type id = i;
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setitem____SWIG_0(std::vector< hfst::implementations::HfstBasicTransition > *self,PySliceObject *slice,std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type id = i;
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setitem____SWIG_1(std::vector< hfst::implementations::HfstBasicTransition > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type id = i;
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____delitem____SWIG_1(std::vector< hfst::implementations::HfstBasicTransition > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type id = i;
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition >::value_type const &std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____getitem____SWIG_1(std::vector< hfst::implementations::HfstBasicTransition > const *self,std::vector< hfst::implementations::HfstBasicTransition >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setitem____SWIG_2(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::difference_type i,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition >::value_type std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__pop(std::vector< hfst::implementations::HfstBasicTransition > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__append(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition >::iterator std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__erase__SWIG_0(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition >::iterator std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__erase__SWIG_1(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::iterator first,std::vector< hfst::implementations::HfstBasicTransition >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< hfst::implementations::HfstBasicTransition >::iterator std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__insert__SWIG_0(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::iterator pos,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__insert__SWIG_1(std::vector< hfst::implementations::HfstBasicTransition > *self,std::vector< hfst::implementations::HfstBasicTransition >::iterator pos,std::vector< hfst::implementations::HfstBasicTransition >::size_type n,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::pair< float, std::vector< std::string,std::allocator< std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "float" "," "std::vector< std::string,std::allocator< std::string > >" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >, std::less< std::pair< float,std::vector< std::string > > >, std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "std::pair< float,std::vector< std::string,std::allocator< std::string > > >" "," "std::less< std::pair< float,std::vector< std::string > > >" "," "std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__iterator(std::set< std::pair< float,std::vector< std::string > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____nonzero__(std::set< std::pair< float,std::vector< std::string > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____bool__(std::set< std::pair< float,std::vector< std::string > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< std::pair< float,std::vector< std::string > > >::size_type std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____len__(std::set< std::pair< float,std::vector< std::string > > > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__append(std::set< std::pair< float,std::vector< std::string > > > *self,std::set< std::pair< float,std::vector< std::string > > >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____contains__(std::set< std::pair< float,std::vector< std::string > > > *self,std::set< std::pair< float,std::vector< std::string > > >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< std::pair< float,std::vector< std::string > > >::value_type std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____getitem__(std::set< std::pair< float,std::vector< std::string > > > const *self,std::set< std::pair< float,std::vector< std::string > > >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__add(std::set< std::pair< float,std::vector< std::string > > > *self,std::set< std::pair< float,std::vector< std::string > > >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__discard(std::set< std::pair< float,std::vector< std::string > > > *self,std::set< std::pair< float,std::vector< std::string > > >::value_type x){
       self->erase(x);
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__erase__SWIG_1(std::set< std::pair< float,std::vector< std::string > > > *self,std::set< std::pair< float,std::vector< std::string > > >::iterator pos){ self->erase(pos); }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__erase__SWIG_2(std::set< std::pair< float,std::vector< std::string > > > *self,std::set< std::pair< float,std::vector< std::string > > >::iterator first,std::set< std::pair< float,std::vector< std::string > > >::iterator last){ self->erase(first, last); }

      namespace swig {
	template <>  struct traits<std::pair< float, std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "float" "," "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >, std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >, std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::set<" "std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >" "," "std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >" "," "std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__iterator(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____nonzero__(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____bool__(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::size_type std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____len__(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *self){
      return self->size();
    }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__append(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *self,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type x){
       self->insert(x);
     }
SWIGINTERN bool std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____contains__(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *self,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type x){
       return self->find(x) != self->end();
     }
SWIGINTERN std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____getitem__(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *self,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::difference_type i){
       return *(swig::cgetpos(self, i));
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__add(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *self,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type x){
       self->insert(x);
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__discard(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *self,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type x){
       self->erase(x);
     }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__erase__SWIG_1(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *self,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator pos){ self->erase(pos); }
SWIGINTERN void std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__erase__SWIG_2(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *self,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator first,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator last){ self->erase(first, last); }

      namespace swig {
	template <>  struct traits<std::pair< hfst::HfstTransducer, hfst::HfstTransducer > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "hfst::HfstTransducer" "," "hfst::HfstTransducer" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >, std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer >" "," "std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__iterator(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____nonzero__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____bool__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____len__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____getslice__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type i,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setslice____SWIG_0(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type i,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >());
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setslice____SWIG_1(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type i,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type j,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____delslice__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type i,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____delitem____SWIG_0(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____getitem____SWIG_0(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type id = i;
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setitem____SWIG_0(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,PySliceObject *slice,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type id = i;
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setitem____SWIG_1(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type id = i;
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____delitem____SWIG_1(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type id = i;
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____getitem____SWIG_1(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setitem____SWIG_2(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type i,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__pop(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__append(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__erase__SWIG_0(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__erase__SWIG_1(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator first,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__insert__SWIG_0(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator pos,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__insert__SWIG_1(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *self,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator pos,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type n,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &x){ self->insert(pos, n, x); }

  namespace swig {
    template <>  struct traits< hfst::xeroxRules::Rule > {
      typedef pointer_category category;
      static const char* type_name() { return"hfst::xeroxRules::Rule"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< hfst::xeroxRules::Rule, std::allocator< hfst::xeroxRules::Rule > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "hfst::xeroxRules::Rule" "," "std::allocator< hfst::xeroxRules::Rule >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_hfst_xeroxRules_Rule_Sg__iterator(std::vector< hfst::xeroxRules::Rule > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_hfst_xeroxRules_Rule_Sg____nonzero__(std::vector< hfst::xeroxRules::Rule > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_hfst_xeroxRules_Rule_Sg____bool__(std::vector< hfst::xeroxRules::Rule > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< hfst::xeroxRules::Rule >::size_type std_vector_Sl_hfst_xeroxRules_Rule_Sg____len__(std::vector< hfst::xeroxRules::Rule > const *self){
      return self->size();
    }
SWIGINTERN std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *std_vector_Sl_hfst_xeroxRules_Rule_Sg____getslice__(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::difference_type i,std::vector< hfst::xeroxRules::Rule >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____setslice____SWIG_0(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::difference_type i,std::vector< hfst::xeroxRules::Rule >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >());
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____setslice____SWIG_1(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::difference_type i,std::vector< hfst::xeroxRules::Rule >::difference_type j,std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____delslice__(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::difference_type i,std::vector< hfst::xeroxRules::Rule >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____delitem____SWIG_0(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *std_vector_Sl_hfst_xeroxRules_Rule_Sg____getitem____SWIG_0(std::vector< hfst::xeroxRules::Rule > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type id = i;
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____setitem____SWIG_0(std::vector< hfst::xeroxRules::Rule > *self,PySliceObject *slice,std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type id = i;
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____setitem____SWIG_1(std::vector< hfst::xeroxRules::Rule > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type id = i;
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____delitem____SWIG_1(std::vector< hfst::xeroxRules::Rule > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type id = i;
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< hfst::xeroxRules::Rule >::value_type const &std_vector_Sl_hfst_xeroxRules_Rule_Sg____getitem____SWIG_1(std::vector< hfst::xeroxRules::Rule > const *self,std::vector< hfst::xeroxRules::Rule >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg____setitem____SWIG_2(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::difference_type i,std::vector< hfst::xeroxRules::Rule >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< hfst::xeroxRules::Rule >::value_type std_vector_Sl_hfst_xeroxRules_Rule_Sg__pop(std::vector< hfst::xeroxRules::Rule > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg__append(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< hfst::xeroxRules::Rule >::iterator std_vector_Sl_hfst_xeroxRules_Rule_Sg__erase__SWIG_0(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< hfst::xeroxRules::Rule >::iterator std_vector_Sl_hfst_xeroxRules_Rule_Sg__erase__SWIG_1(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::iterator first,std::vector< hfst::xeroxRules::Rule >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< hfst::xeroxRules::Rule >::iterator std_vector_Sl_hfst_xeroxRules_Rule_Sg__insert__SWIG_0(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::iterator pos,std::vector< hfst::xeroxRules::Rule >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_hfst_xeroxRules_Rule_Sg__insert__SWIG_1(std::vector< hfst::xeroxRules::Rule > *self,std::vector< hfst::xeroxRules::Rule >::iterator pos,std::vector< hfst::xeroxRules::Rule >::size_type n,std::vector< hfst::xeroxRules::Rule >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::pair< hfst::HfstTransducer*, unsigned int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "hfst::HfstTransducer" " *," "unsigned int" " >";
	  }
	};
      }
    

  namespace swig {
    template <>  struct traits< hfst_ol::Location > {
      typedef pointer_category category;
      static const char* type_name() { return"hfst_ol::Location"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< hfst_ol::Location, std::allocator< hfst_ol::Location > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "hfst_ol::Location" "," "std::allocator< hfst_ol::Location >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_hfst_ol_Location_Sg__iterator(std::vector< hfst_ol::Location > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_hfst_ol_Location_Sg____nonzero__(std::vector< hfst_ol::Location > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_hfst_ol_Location_Sg____bool__(std::vector< hfst_ol::Location > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< hfst_ol::Location >::size_type std_vector_Sl_hfst_ol_Location_Sg____len__(std::vector< hfst_ol::Location > const *self){
      return self->size();
    }
SWIGINTERN std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *std_vector_Sl_hfst_ol_Location_Sg____getslice__(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::difference_type i,std::vector< hfst_ol::Location >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____setslice____SWIG_0(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::difference_type i,std::vector< hfst_ol::Location >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >());
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____setslice____SWIG_1(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::difference_type i,std::vector< hfst_ol::Location >::difference_type j,std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____delslice__(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::difference_type i,std::vector< hfst_ol::Location >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____delitem____SWIG_0(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *std_vector_Sl_hfst_ol_Location_Sg____getitem____SWIG_0(std::vector< hfst_ol::Location > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type id = i;
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____setitem____SWIG_0(std::vector< hfst_ol::Location > *self,PySliceObject *slice,std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type id = i;
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____setitem____SWIG_1(std::vector< hfst_ol::Location > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type id = i;
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____delitem____SWIG_1(std::vector< hfst_ol::Location > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type id = i;
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< hfst_ol::Location >::value_type const &std_vector_Sl_hfst_ol_Location_Sg____getitem____SWIG_1(std::vector< hfst_ol::Location > const *self,std::vector< hfst_ol::Location >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg____setitem____SWIG_2(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::difference_type i,std::vector< hfst_ol::Location >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< hfst_ol::Location >::value_type std_vector_Sl_hfst_ol_Location_Sg__pop(std::vector< hfst_ol::Location > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg__append(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< hfst_ol::Location >::iterator std_vector_Sl_hfst_ol_Location_Sg__erase__SWIG_0(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< hfst_ol::Location >::iterator std_vector_Sl_hfst_ol_Location_Sg__erase__SWIG_1(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::iterator first,std::vector< hfst_ol::Location >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< hfst_ol::Location >::iterator std_vector_Sl_hfst_ol_Location_Sg__insert__SWIG_0(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::iterator pos,std::vector< hfst_ol::Location >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_hfst_ol_Location_Sg__insert__SWIG_1(std::vector< hfst_ol::Location > *self,std::vector< hfst_ol::Location >::iterator pos,std::vector< hfst_ol::Location >::size_type n,std::vector< hfst_ol::Location >::value_type const &x){ self->insert(pos, n, x); }

      namespace swig {
	template <>  struct traits<std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >, std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >" "," "std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__iterator(std::vector< std::vector< hfst_ol::Location > > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____nonzero__(std::vector< std::vector< hfst_ol::Location > > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____bool__(std::vector< std::vector< hfst_ol::Location > > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::vector< hfst_ol::Location > >::size_type std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____len__(std::vector< std::vector< hfst_ol::Location > > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____getslice__(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::difference_type i,std::vector< std::vector< hfst_ol::Location > >::difference_type j){
      return swig::getslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setslice____SWIG_0(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::difference_type i,std::vector< std::vector< hfst_ol::Location > >::difference_type j){
      swig::setslice(self, i, j, 1, std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >());
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setslice____SWIG_1(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::difference_type i,std::vector< std::vector< hfst_ol::Location > >::difference_type j,std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &v){
      swig::setslice(self, i, j, 1, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____delslice__(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::difference_type i,std::vector< std::vector< hfst_ol::Location > >::difference_type j){
      swig::delslice(self, i, j, 1);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____delitem____SWIG_0(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::difference_type i){
      swig::erase(self, swig::getpos(self, i));
    }
SWIGINTERN std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____getitem____SWIG_0(std::vector< std::vector< hfst_ol::Location > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type id = i;
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type jd = j;
      return swig::getslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setitem____SWIG_0(std::vector< std::vector< hfst_ol::Location > > *self,PySliceObject *slice,std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type id = i;
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type jd = j;
      swig::setslice(self, id, jd, step, v);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setitem____SWIG_1(std::vector< std::vector< hfst_ol::Location > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type id = i;
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____delitem____SWIG_1(std::vector< std::vector< hfst_ol::Location > > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type id = i;
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::difference_type jd = j;
      swig::delslice(self, id, jd, step);
    }
SWIGINTERN std::vector< std::vector< hfst_ol::Location > >::value_type const &std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____getitem____SWIG_1(std::vector< std::vector< hfst_ol::Location > > const *self,std::vector< std::vector< hfst_ol::Location > >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setitem____SWIG_2(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::difference_type i,std::vector< std::vector< hfst_ol::Location > >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN std::vector< std::vector< hfst_ol::Location > >::value_type std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__pop(std::vector< std::vector< hfst_ol::Location > > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__append(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::value_type const &x){
      self->push_back(x);
    }
SWIGINTERN std::vector< std::vector< hfst_ol::Location > >::iterator std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__erase__SWIG_0(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::iterator pos){ return self->erase(pos); }
SWIGINTERN std::vector< std::vector< hfst_ol::Location > >::iterator std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__erase__SWIG_1(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::iterator first,std::vector< std::vector< hfst_ol::Location > >::iterator last){ return self->erase(first, last); }
SWIGINTERN std::vector< std::vector< hfst_ol::Location > >::iterator std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__insert__SWIG_0(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::iterator pos,std::vector< std::vector< hfst_ol::Location > >::value_type const &x){ return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__insert__SWIG_1(std::vector< std::vector< hfst_ol::Location > > *self,std::vector< std::vector< hfst_ol::Location > >::iterator pos,std::vector< std::vector< hfst_ol::Location > >::size_type n,std::vector< std::vector< hfst_ol::Location > >::value_type const &x){ self->insert(pos, n, x); }

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN void hfst_HfstTransducer_concatenate__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &tr,bool harmonize=true){ self->concatenate(tr, harmonize); }
SWIGINTERN void hfst_HfstTransducer_disjunct__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &tr,bool harmonize=true){ self->disjunct(tr, harmonize); }
SWIGINTERN void hfst_HfstTransducer_subtract__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &tr,bool harmonize=true){ self->subtract(tr, harmonize); }
SWIGINTERN void hfst_HfstTransducer_intersect__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &tr,bool harmonize=true){ self->intersect(tr, harmonize); }
SWIGINTERN void hfst_HfstTransducer_compose__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &tr,bool harmonize=true){ self->compose(tr, harmonize); }
SWIGINTERN void hfst_HfstTransducer_compose_intersect__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducerVector const &v,bool invert=false,bool harmonize=true){ self->compose_intersect(v, invert, harmonize); }
SWIGINTERN void hfst_HfstTransducer_priority_union(hfst::HfstTransducer *self,hfst::HfstTransducer const &another){ self->priority_union(another); }
SWIGINTERN void hfst_HfstTransducer_lenient_composition__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &another,bool harmonize=true){ self->lenient_composition(another, harmonize); }
SWIGINTERN void hfst_HfstTransducer_cross_product__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &another,bool harmonize=true){ self->cross_product(another, harmonize); }
SWIGINTERN void hfst_HfstTransducer_shuffle__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &another,bool harmonize=true){ self->shuffle(another, harmonize); }
SWIGINTERN void hfst_HfstTransducer_remove_epsilons(hfst::HfstTransducer *self){ self->remove_epsilons(); }
SWIGINTERN void hfst_HfstTransducer_determinize(hfst::HfstTransducer *self){ self->determinize(); }
SWIGINTERN void hfst_HfstTransducer_minimize(hfst::HfstTransducer *self){ self->minimize(); }
SWIGINTERN void hfst_HfstTransducer_prune(hfst::HfstTransducer *self){ self->prune(); }
SWIGINTERN void hfst_HfstTransducer_eliminate_flags(hfst::HfstTransducer *self){ self->eliminate_flags(); }
SWIGINTERN void hfst_HfstTransducer_eliminate_flag(hfst::HfstTransducer *self,std::string const &f){ self->eliminate_flag(f); }
SWIGINTERN void hfst_HfstTransducer_n_best(hfst::HfstTransducer *self,unsigned int n){ self->n_best(n); }
SWIGINTERN void hfst_HfstTransducer_convert(hfst::HfstTransducer *self,hfst::ImplementationType impl){ self->convert(impl); }
SWIGINTERN void hfst_HfstTransducer_repeat_star(hfst::HfstTransducer *self){ self->repeat_star(); }
SWIGINTERN void hfst_HfstTransducer_repeat_plus(hfst::HfstTransducer *self){ self->repeat_plus(); }
SWIGINTERN void hfst_HfstTransducer_repeat_n(hfst::HfstTransducer *self,unsigned int n){ self->repeat_n(n); }
SWIGINTERN void hfst_HfstTransducer_repeat_n_to_k(hfst::HfstTransducer *self,unsigned int n,unsigned int k){ self->repeat_n_to_k(n, k); }
SWIGINTERN void hfst_HfstTransducer_repeat_n_minus(hfst::HfstTransducer *self,unsigned int n){ self->repeat_n_minus(n); }
SWIGINTERN void hfst_HfstTransducer_repeat_n_plus(hfst::HfstTransducer *self,unsigned int n){ self->repeat_n_plus(n); }
SWIGINTERN void hfst_HfstTransducer_invert(hfst::HfstTransducer *self){ self->invert(); }
SWIGINTERN void hfst_HfstTransducer_reverse(hfst::HfstTransducer *self){ self->reverse(); }
SWIGINTERN void hfst_HfstTransducer_input_project(hfst::HfstTransducer *self){ self->input_project(); }
SWIGINTERN void hfst_HfstTransducer_output_project(hfst::HfstTransducer *self){ self->output_project(); }
SWIGINTERN void hfst_HfstTransducer_optionalize(hfst::HfstTransducer *self){ self->optionalize(); }
SWIGINTERN void hfst_HfstTransducer_insert_freely__SWIG_0(hfst::HfstTransducer *self,hfst::StringPair const &symbol_pair,bool harmonize=true){ self->insert_freely(symbol_pair, harmonize); }
SWIGINTERN void hfst_HfstTransducer_insert_freely__SWIG_2(hfst::HfstTransducer *self,hfst::HfstTransducer const &tr,bool harmonize=true){ self->insert_freely(tr, harmonize); }
SWIGINTERN void hfst_HfstTransducer__substitute_symbol__SWIG_0(hfst::HfstTransducer *self,std::string const &old_symbol,std::string const &new_symbol,bool input_side=true,bool output_side=true){ self->substitute_symbol(old_symbol, new_symbol, input_side, output_side); }
SWIGINTERN void hfst_HfstTransducer__substitute_symbol_pair(hfst::HfstTransducer *self,hfst::StringPair const &old_symbol_pair,hfst::StringPair const &new_symbol_pair){ self->substitute_symbol_pair(old_symbol_pair, new_symbol_pair); }
SWIGINTERN void hfst_HfstTransducer__substitute_symbol_pair_with_set(hfst::HfstTransducer *self,hfst::StringPair const &old_symbol_pair,hfst::StringPairSet const &new_symbol_pair_set){ self->substitute_symbol_pair_with_set(old_symbol_pair, new_symbol_pair_set); }
SWIGINTERN void hfst_HfstTransducer__substitute_symbol_pair_with_transducer__SWIG_0(hfst::HfstTransducer *self,hfst::StringPair const &symbol_pair,hfst::HfstTransducer &transducer,bool harmonize=true){ self->substitute_symbol_pair_with_transducer(symbol_pair, transducer, harmonize); }
SWIGINTERN void hfst_HfstTransducer__substitute_symbols(hfst::HfstTransducer *self,hfst::HfstSymbolSubstitutions const &substitutions){ self->substitute_symbols(substitutions); }
SWIGINTERN void hfst_HfstTransducer__substitute_symbol_pairs(hfst::HfstTransducer *self,hfst::HfstSymbolPairSubstitutions const &substitutions){ self->substitute_symbol_pairs(substitutions); }
SWIGINTERN void hfst_HfstTransducer_set_final_weights__SWIG_0(hfst::HfstTransducer *self,float weight,bool increment=false){ self->set_final_weights(weight, increment); }
SWIGINTERN void hfst_HfstTransducer_push_weights_to_start(hfst::HfstTransducer *self){ self->push_weights(hfst::TO_INITIAL_STATE); }
SWIGINTERN void hfst_HfstTransducer_push_weights_to_end(hfst::HfstTransducer *self){ self->push_weights(hfst::TO_FINAL_STATE); }
SWIGINTERN void hfst_HfstTransducer_minus__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &t,bool harmonize=true){ self->subtract(t, harmonize); }
SWIGINTERN void hfst_HfstTransducer_conjunct__SWIG_0(hfst::HfstTransducer *self,hfst::HfstTransducer const &t,bool harmonize=true){ self->intersect(t, harmonize); }
SWIGINTERN void hfst_HfstTransducer_lookup_optimize(hfst::HfstTransducer *self){ self->convert(hfst::HFST_OLW_TYPE); }
SWIGINTERN void hfst_HfstTransducer_remove_optimization(hfst::HfstTransducer *self){ self->convert(hfst::get_default_fst_type()); }
SWIGINTERN hfst::HfstTransducer *new_hfst_HfstTransducer__SWIG_0(){ return hfst::empty_transducer(); }
SWIGINTERN hfst::HfstTransducer *new_hfst_HfstTransducer__SWIG_1(hfst::HfstTransducer const &t){ return hfst::copy_hfst_transducer(t); }
SWIGINTERN hfst::HfstTransducer *new_hfst_HfstTransducer__SWIG_2(hfst::implementations::HfstBasicTransducer const &t){ return hfst::copy_hfst_transducer_from_basic_transducer(t); }
SWIGINTERN hfst::HfstTransducer *new_hfst_HfstTransducer__SWIG_3(hfst::implementations::HfstBasicTransducer const &t,hfst::ImplementationType impl){ return hfst::copy_hfst_transducer_from_basic_transducer(t, impl); }
SWIGINTERN void delete_hfst_HfstTransducer(hfst::HfstTransducer *self){
        if (self->get_type() == hfst::UNSPECIFIED_TYPE || self->get_type() == hfst::ERROR_TYPE)
        {
            return;
        }
        delete self;
    }
SWIGINTERN char *hfst_HfstTransducer___str__(hfst::HfstTransducer *self){
         std::ostringstream oss;
         hfst::implementations::HfstBasicTransducer fsm(*self);
         fsm.write_in_att_format(oss,true);
         return strdup(oss.str().c_str());
    }

SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN void hfst_HfstTransducer_write(hfst::HfstTransducer *self,hfst::HfstOutputStream &os){ (void) os.redirect(*self); }
SWIGINTERN hfst::HfstTwoLevelPaths hfst_HfstTransducer__extract_shortest_paths(hfst::HfstTransducer *self){
        hfst::HfstTwoLevelPaths results;
        self->extract_shortest_paths(results);
        return results;
    }
SWIGINTERN hfst::HfstTwoLevelPaths hfst_HfstTransducer__extract_longest_paths(hfst::HfstTransducer *self,bool obey_flags){
        hfst::HfstTwoLevelPaths results;
        self->extract_longest_paths(results, obey_flags);
        return results;
    }
SWIGINTERN hfst::HfstTwoLevelPaths hfst_HfstTransducer__extract_paths__SWIG_0(hfst::HfstTransducer const *self,int max_num=-1,int cycles=-1){
      hfst::HfstTwoLevelPaths results;
      self->extract_paths(results, max_num, cycles);
      return results;
    }
SWIGINTERN hfst::HfstTwoLevelPaths hfst_HfstTransducer__extract_paths_fd__SWIG_0(hfst::HfstTransducer const *self,int max_num=-1,int cycles=-1,bool filter_fd=true){
      hfst::HfstTwoLevelPaths results;
      self->extract_paths_fd(results, max_num, cycles, filter_fd);
      return results;
    }
SWIGINTERN hfst::HfstTwoLevelPaths hfst_HfstTransducer__extract_random_paths(hfst::HfstTransducer const *self,int max_num){
      hfst::HfstTwoLevelPaths results;
      self->extract_random_paths(results, max_num);
      return results;
    }
SWIGINTERN hfst::HfstTwoLevelPaths hfst_HfstTransducer__extract_random_paths_fd(hfst::HfstTransducer const *self,int max_num,bool filter_fd){
      hfst::HfstTwoLevelPaths results;
      self->extract_random_paths_fd(results, max_num, filter_fd);
      return results;
    }
SWIGINTERN hfst::HfstOneLevelPaths hfst_HfstTransducer__lookup_vector__SWIG_0(hfst::HfstTransducer const *self,hfst::StringVector const &s,int limit=-1,double time_cutoff=0.0){
      return hfst::lookup_vector(self, false /*fd*/, s, limit, time_cutoff);
    }
SWIGINTERN hfst::HfstOneLevelPaths hfst_HfstTransducer__lookup_fd_vector__SWIG_0(hfst::HfstTransducer const *self,hfst::StringVector const &s,int limit=-1,double time_cutoff=0.0){
      return hfst::lookup_vector(self, true /*fd*/, s, limit, time_cutoff);
    }
SWIGINTERN hfst::HfstOneLevelPaths hfst_HfstTransducer__lookup_fd_string__SWIG_0(hfst::HfstTransducer const *self,std::string const &s,int limit=-1,double time_cutoff=0.0){
      return hfst::lookup_string(self, true /*fd*/, s, limit, time_cutoff);
    }
SWIGINTERN hfst::HfstOneLevelPaths hfst_HfstTransducer__lookup_string__SWIG_0(hfst::HfstTransducer const *self,std::string const &s,int limit=-1,double time_cutoff=0.0){
      return hfst::lookup_string(self, false /*fd*/, s, limit, time_cutoff);
    }
SWIGINTERN hfst::HfstOutputStream *new_hfst_HfstOutputStream(){ return new hfst::HfstOutputStream(hfst::get_default_fst_type()); }
SWIGINTERN hfst::HfstTransducer *hfst_HfstInputStream_read(hfst::HfstInputStream *self){ return new hfst::HfstTransducer(*(self)); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer__substitute_symbol__SWIG_0(hfst::implementations::HfstBasicTransducer *self,std::string const &old_symbol,std::string const &new_symbol,bool input_side=true,bool output_side=true){ self->substitute_symbol(old_symbol, new_symbol, input_side, output_side); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer__substitute_symbol_pair(hfst::implementations::HfstBasicTransducer *self,hfst::StringPair const &old_symbol_pair,hfst::StringPair const &new_symbol_pair){ self->substitute_symbol_pair(old_symbol_pair, new_symbol_pair); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer__substitute_symbol_pair_with_set(hfst::implementations::HfstBasicTransducer *self,hfst::StringPair const &old_symbol_pair,hfst::StringPairSet const &new_symbol_pair_set){ self->substitute_symbol_pair_with_set(old_symbol_pair, new_symbol_pair_set); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer__substitute_symbol_pair_with_transducer(hfst::implementations::HfstBasicTransducer *self,hfst::StringPair const &symbol_pair,hfst::implementations::HfstBasicTransducer &transducer){ self->substitute_symbol_pair_with_transducer(symbol_pair, transducer); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer__substitute_symbols(hfst::implementations::HfstBasicTransducer *self,hfst::HfstSymbolSubstitutions const &substitutions){ self->substitute_symbols(substitutions); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer__substitute_symbol_pairs(hfst::implementations::HfstBasicTransducer *self,hfst::HfstSymbolPairSubstitutions const &substitutions){ self->substitute_symbol_pairs(substitutions); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer_insert_freely__SWIG_0(hfst::implementations::HfstBasicTransducer *self,hfst::StringPair const &symbol_pair,float weight){ self->insert_freely(symbol_pair, weight); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer_insert_freely__SWIG_1(hfst::implementations::HfstBasicTransducer *self,hfst::implementations::HfstBasicTransducer const &tr){ self->insert_freely(tr); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer_sort_arcs(hfst::implementations::HfstBasicTransducer *self){ self->sort_arcs(); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer_disjunct(hfst::implementations::HfstBasicTransducer *self,hfst::StringPairVector const &spv,float weight){ self->disjunct(spv, weight); }
SWIGINTERN void hfst_implementations_HfstBasicTransducer_harmonize(hfst::implementations::HfstBasicTransducer *self,hfst::implementations::HfstBasicTransducer &another){ self->harmonize(another); }
SWIGINTERN hfst::HfstTwoLevelPaths hfst_implementations_HfstBasicTransducer__lookup(hfst::implementations::HfstBasicTransducer *self,hfst::StringVector const &lookup_path,size_t *infinite_cutoff,float *max_weight,bool obey_flags){
    hfst::HfstTwoLevelPaths results;
    self->lookup(lookup_path, results, infinite_cutoff, max_weight, -1, obey_flags);
    return results;
  }
SWIGINTERN std::string hfst_implementations_HfstBasicTransducer_get_prolog_string(hfst::implementations::HfstBasicTransducer *self,bool write_weights){
    std::ostringstream oss;
    self->write_in_prolog_format(oss, self->name, write_weights);
    return oss.str();
  }
SWIGINTERN std::string hfst_implementations_HfstBasicTransducer_get_xfst_string(hfst::implementations::HfstBasicTransducer *self,bool write_weights){
    std::ostringstream oss;
    self->write_in_xfst_format(oss, write_weights);
    return oss.str();
  }
SWIGINTERN std::string hfst_implementations_HfstBasicTransducer_get_att_string(hfst::implementations::HfstBasicTransducer *self,bool write_weights){
    std::ostringstream oss;
    self->write_in_att_format(oss, write_weights);
    std::string retval = oss.str();
    if (retval == "") // empty transducer must be represented as empty line in python, else read_att fails...
      retval = std::string("\n");
    return retval;
  }
SWIGINTERN char *hfst_implementations_HfstBasicTransducer___str__(hfst::implementations::HfstBasicTransducer *self){
    std::ostringstream oss;
    self->write_in_att_format(oss, true);
    return strdup(oss.str().c_str());
  }
SWIGINTERN void hfst_implementations_HfstBasicTransducer_add_transition__SWIG_2(hfst::implementations::HfstBasicTransducer *self,hfst::implementations::HfstState source,hfst::implementations::HfstState target,std::string input,std::string output,float weight=0){
    hfst::implementations::HfstBasicTransition tr(target, input, output, weight);
    self->add_transition(source, tr);
  }
SWIGINTERN char *hfst_implementations_HfstBasicTransition___str__(hfst::implementations::HfstBasicTransition *self){
      static char str[1024];
      sprintf(str, "%u %s %s %f", self->get_target_state(), self->get_input_symbol().c_str(), self->get_output_symbol().c_str(), self->get_weight());
      return str;
    }
SWIGINTERN void hfst_xre_XreCompiler_define_xre(hfst::xre::XreCompiler *self,std::string const &name,std::string const &xre){
    self->set_expand_definitions(true);
    self->define(name, xre);
  }
SWIGINTERN void hfst_xre_XreCompiler_define_transducer(hfst::xre::XreCompiler *self,std::string const &name,hfst::HfstTransducer const &transducer){
    self->set_expand_definitions(true);
    self->define(name, transducer);
  }
SWIGINTERN void hfst_xre_XreCompiler_setOutputToConsole(hfst::xre::XreCompiler *self,bool value){
    (void)self->setOutputToConsole(value);
  }
SWIGINTERN hfst::HfstTransducerUIntPair hfst_xre_XreCompiler_compile_first(hfst::xre::XreCompiler *self,std::string const &xre){
    unsigned int c=0;
    hfst::HfstTransducer * result = self->compile_first(xre, c);
    return std::pair<hfst::HfstTransducer*, unsigned int>(result, c);
  }



SWIGINTERN hfst_ol::PmatchContainer *new_hfst_ol_PmatchContainer__SWIG_2(std::string const &filename){
	      std::ifstream ifs(filename.c_str());
	      hfst_ol::PmatchContainer * retval = new hfst_ol::PmatchContainer(ifs);
	      ifs.close();
	      return retval;
	    }
SWIGINTERN hfst_ol::LocationVectorVector hfst_ol_PmatchContainer_locate__SWIG_0(hfst_ol::PmatchContainer *self,std::string const &input,double time_cutoff=0.0){
	      return hfst::pmatch_locate(self, input, time_cutoff);
	    }
SWIGINTERN hfst_ol::LocationVectorVector hfst_ol_PmatchContainer_locate__SWIG_2(hfst_ol::PmatchContainer *self,std::string const &input,double time_cutoff,float weight_cutoff){
	      return hfst::pmatch_locate(self, input, time_cutoff, weight_cutoff);
	    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::incr(size_t)\n"
    "    swig::SwigPyIterator::incr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    swig::SwigPyIterator::decr(size_t)\n"
    "    swig::SwigPyIterator::decr()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  ptrdiff_t result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  } catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  } catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ptrdiff_t result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StringVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StringVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::string,std::allocator< std::string > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__setslice__(std::vector< std::string >::difference_type,std::vector< std::string >::difference_type,std::vector< std::string,std::allocator< std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__delitem__(std::vector< std::string >::difference_type)\n"
    "    std::vector< std::string >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__getitem__(std::vector< std::string >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_2(arg1,arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    std::vector< std::string >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::string >::__setitem__(std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_begin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_end" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rbegin" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_rend" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = std_vector_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator)\n"
    "    std::vector< std::string >::erase(std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StringVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::string > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_StringVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StringVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::vector()\n"
    "    std::vector< std::string >::vector(std::vector< std::string > const &)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::vector(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::string >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >::resize(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::string >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_string_Sg__insert__SWIG_0(arg1,arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_string_Sg__insert__SWIG_1(arg1,arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    std::vector< std::string >::insert(std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StringVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StringPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StringPair" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StringPair" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< std::string,std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringPair" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringPair" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPair(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_StringPair", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_StringPair__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< std::string,std::string >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringPair__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringPair__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StringPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< std::string,std::string >::pair()\n"
    "    std::pair< std::string,std::string >::pair(std::string,std::string)\n"
    "    std::pair< std::string,std::string >::pair(std::pair< std::string,std::string > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPair_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPair_first_set" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPair_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPair_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPair_first_get" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  result = (std::string *) & ((arg1)->first);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPair_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPair_second_set" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPair_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPair_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPair_second_get" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  result = (std::string *) & ((arg1)->second);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringPair" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StringPair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_StringPairVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_iterator" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____nonzero__((std::vector< std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___bool__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____bool__((std::vector< std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___len__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____len__((std::vector< std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg2 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___getslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector___getslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPairVector___getslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val3);
  try {
    result = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg2 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPairVector___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg2 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg3 ;
  std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPairVector___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val3);
  {
    std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringPairVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_StringPairVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringPairVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::__setslice__(std::vector< std::pair< std::string,std::string > >::difference_type,std::vector< std::pair< std::string,std::string > >::difference_type)\n"
    "    std::vector< std::pair< std::string,std::string > >::__setslice__(std::vector< std::pair< std::string,std::string > >::difference_type,std::vector< std::pair< std::string,std::string > >::difference_type,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg2 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___delslice__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector___delslice__" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPairVector___delslice__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector___delitem__" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val2);
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringPairVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringPairVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::__delitem__(std::vector< std::pair< std::string,std::string > >::difference_type)\n"
    "    std::vector< std::pair< std::string,std::string > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector___getitem__" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val2);
  try {
    result = (std::vector< std::pair< std::string,std::string > >::value_type *) &std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem____SWIG_1((std::vector< std::pair< std::string,std::string > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< std::string,std::string > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::pair< std::string,std::string > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringPairVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringPairVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::pair< std::string,std::string > >::__getitem__(std::vector< std::pair< std::string,std::string > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::difference_type arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector___setitem__" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::difference_type >(val2);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::pair< std::string,std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StringPairVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringPairVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::string,std::string >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringPairVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::__setitem__(PySliceObject *,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &)\n"
    "    std::vector< std::pair< std::string,std::string > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::pair< std::string,std::string > >::__setitem__(std::vector< std::pair< std::string,std::string > >::difference_type,std::vector< std::pair< std::string,std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_pop" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  try {
    result = std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< std::string,std::string > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_append" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairVector_append" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector_append" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__append(arg1,(std::pair< std::string,std::string > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPairVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPairVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringPairVector" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringPairVector" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >((std::vector< std::pair< std::string,std::string > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_empty" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (bool)((std::vector< std::pair< std::string,std::string > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_size" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_swap" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_begin" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_end" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_rbegin" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::string,std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_rend" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::string,std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_clear" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< std::string,std::string > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< std::string,std::string > >::allocator_type(static_cast< const std::vector< std::pair< std::string,std::string > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_std__string_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPairVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringPairVector" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< std::string,std::string > >::size_type >(val1);
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_pop_back" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::pair< std::string,std::string > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::iterator arg2 ;
  std::vector< std::pair< std::string,std::string > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::pair< std::string,std::string > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringPairVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringPairVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::erase(std::vector< std::pair< std::string,std::string > >::iterator)\n"
    "    std::vector< std::pair< std::string,std::string > >::erase(std::vector< std::pair< std::string,std::string > >::iterator,std::vector< std::pair< std::string,std::string > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_StringPairVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > >::size_type arg1 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringPairVector" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< std::string,std::string > >::size_type >(val1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringPairVector" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringPairVector" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::pair< std::string,std::string > > *)new std::vector< std::pair< std::string,std::string > >(arg1,(std::vector< std::pair< std::string,std::string > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPairVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_StringPairVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_StringPairVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StringPairVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringPairVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StringPairVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StringPairVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::vector()\n"
    "    std::vector< std::pair< std::string,std::string > >::vector(std::vector< std::pair< std::string,std::string > > const &)\n"
    "    std::vector< std::pair< std::string,std::string > >::vector(std::vector< std::pair< std::string,std::string > >::size_type)\n"
    "    std::vector< std::pair< std::string,std::string > >::vector(std::vector< std::pair< std::string,std::string > >::size_type,std::vector< std::pair< std::string,std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_push_back" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::pair< std::string,std::string > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_front" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (std::vector< std::pair< std::string,std::string > >::value_type *) &((std::vector< std::pair< std::string,std::string > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair< std::string,std::string > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::pair< std::string,std::string > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_back" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = (std::vector< std::pair< std::string,std::string > >::value_type *) &((std::vector< std::pair< std::string,std::string > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair< std::string,std::string > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::pair< std::string,std::string > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_assign" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector_assign" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::size_type >(val2);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringPairVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::pair< std::string,std::string > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::size_type >(val2);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringPairVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::pair< std::string,std::string > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StringPairVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::string,std::string >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringPairVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::resize(std::vector< std::pair< std::string,std::string > >::size_type)\n"
    "    std::vector< std::pair< std::string,std::string > >::resize(std::vector< std::pair< std::string,std::string > >::size_type,std::vector< std::pair< std::string,std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::iterator arg2 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::pair< std::string,std::string > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringPairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::pair< std::string,std::string > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::iterator arg2 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg3 ;
  std::vector< std::pair< std::string,std::string > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringPairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< std::string,std::string > >::size_type >(val3);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringPairVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::pair< std::string,std::string > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::string,std::string >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StringPairVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair< std::string,std::string >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StringPairVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< std::string,std::string > >::insert(std::vector< std::pair< std::string,std::string > >::iterator,std::vector< std::pair< std::string,std::string > >::value_type const &)\n"
    "    std::vector< std::pair< std::string,std::string > >::insert(std::vector< std::pair< std::string,std::string > >::iterator,std::vector< std::pair< std::string,std::string > >::size_type,std::vector< std::pair< std::string,std::string > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  std::vector< std::pair< std::string,std::string > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_reserve" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairVector_reserve" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< std::string,std::string > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairVector_capacity" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  result = ((std::vector< std::pair< std::string,std::string > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringPairVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< std::string,std::string > > *arg1 = (std::vector< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringPairVector" "', argument " "1"" of type '" "std::vector< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< std::string,std::string > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringPairVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StringPairVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_FloatVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_iterator" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_float_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___nonzero__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___bool__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)std_vector_Sl_float_Sg____bool__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___len__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = std_vector_Sl_float_Sg____len__((std::vector< float > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "FloatVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___getslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___getslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___getslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  std::vector< float,std::allocator< float > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "FloatVector___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FloatVector___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< float,std::allocator< float > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FloatVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< float,std::allocator< float > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_FloatVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type)\n"
    "    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type,std::vector< float,std::allocator< float > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FloatVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___delslice__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___delslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___delslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< float >::difference_type >(val3);
  try {
    std_vector_Sl_float_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___delitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float,std::allocator< float > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___getitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< float,std::allocator< float > > *)std_vector_Sl_float_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< float,std::allocator< float > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FloatVector___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FloatVector___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< float,std::allocator< float > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_float_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FloatVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FloatVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__delitem__(std::vector< float >::difference_type)\n"
    "    std::vector< float >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___getitem__" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___getitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  try {
    result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg____getitem____SWIG_1((std::vector< float > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_float(static_cast< float >(*result));
  (void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FloatVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FloatVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__getitem__(PySliceObject *)\n"
    "    std::vector< float >::__getitem__(std::vector< float >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::difference_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector___setitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< float >::difference_type >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector___setitem__" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_float_Sg____setitem____SWIG_2(arg1,arg2,(float const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FloatVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_FloatVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< float,std::allocator< float > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FloatVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::__setitem__(PySliceObject *,std::vector< float,std::allocator< float > > const &)\n"
    "    std::vector< float >::__setitem__(PySliceObject *)\n"
    "    std::vector< float >::__setitem__(std::vector< float >::difference_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_pop" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  try {
    result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FloatVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_append" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_append" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_float_Sg__append(arg1,(float const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< float > *)new std::vector< float >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_empty" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (bool)((std::vector< float > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_size" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FloatVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_swap" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FloatVector_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FloatVector_swap" "', argument " "2"" of type '" "std::vector< float > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< float > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_begin" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_end" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_rbegin" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_rend" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_clear" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< float > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_get_allocator" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< float >::allocator_type(static_cast< const std::vector< float >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_float_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  result = (std::vector< float > *)new std::vector< float >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_pop_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< float >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = std_vector_Sl_float_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< float >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_erase" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
    }
  }
  result = std_vector_Sl_float_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FloatVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_FloatVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_FloatVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::erase(std::vector< float >::iterator)\n"
    "    std::vector< float >::erase(std::vector< float >::iterator,std::vector< float >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_FloatVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float >::size_type arg1 ;
  std::vector< float >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  std::vector< float > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FloatVector" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
  } 
  arg1 = static_cast< std::vector< float >::size_type >(val1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FloatVector" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< float > *)new std::vector< float >(arg1,(std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FloatVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_FloatVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_FloatVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FloatVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FloatVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FloatVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FloatVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::vector()\n"
    "    std::vector< float >::vector(std::vector< float > const &)\n"
    "    std::vector< float >::vector(std::vector< float >::size_type)\n"
    "    std::vector< float >::vector(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< float >::value_type temp2 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FloatVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_push_back" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_push_back" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
  } 
  temp2 = static_cast< std::vector< float >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< float >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_front" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->front();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  (void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_back" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->back();
  resultobj = SWIG_From_float(static_cast< float >(*result));
  (void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FloatVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_assign" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_assign" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_assign" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_resize" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_resize" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< float >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FloatVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FloatVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::resize(std::vector< float >::size_type)\n"
    "    std::vector< float >::resize(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< float >::value_type temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  std::vector< float >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_insert" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
  } 
  temp3 = static_cast< std::vector< float >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_float_Sg__insert__SWIG_0(arg1,arg2,(float const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< float >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::iterator arg2 ;
  std::vector< float >::size_type arg3 ;
  std::vector< float >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< float >::value_type temp4 ;
  float val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_insert" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatVector_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FloatVector_insert" "', argument " "3"" of type '" "std::vector< float >::size_type""'");
  } 
  arg3 = static_cast< std::vector< float >::size_type >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "FloatVector_insert" "', argument " "4"" of type '" "std::vector< float >::value_type""'");
  } 
  temp4 = static_cast< std::vector< float >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_float_Sg__insert__SWIG_1(arg1,arg2,arg3,(float const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FloatVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FloatVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< float,std::allocator< float > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_FloatVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::value_type const &)\n"
    "    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  std::vector< float >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "FloatVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_reserve" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatVector_reserve" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
  } 
  arg2 = static_cast< std::vector< float >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< float >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatVector_capacity" "', argument " "1"" of type '" "std::vector< float > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  result = ((std::vector< float > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FloatVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< float > *arg1 = (std::vector< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FloatVector" "', argument " "1"" of type '" "std::vector< float > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< float > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FloatVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FloatVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StringSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringSet" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringSet" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::set< std::string > *)new std::set< std::string >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_iterator" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet___nonzero__" "', argument " "1"" of type '" "std::set< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (bool)std_set_Sl_std_string_Sg____nonzero__((std::set< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet___bool__" "', argument " "1"" of type '" "std::set< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (bool)std_set_Sl_std_string_Sg____bool__((std::set< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet___len__" "', argument " "1"" of type '" "std::set< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = std_set_Sl_std_string_Sg____len__((std::set< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_append" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringSet_append" "', argument " "2"" of type '" "std::set< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_string_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet___contains__" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringSet___contains__" "', argument " "2"" of type '" "std::set< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)std_set_Sl_std_string_Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< std::string >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet___getitem__" "', argument " "1"" of type '" "std::set< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringSet___getitem__" "', argument " "2"" of type '" "std::set< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::set< std::string >::difference_type >(val2);
  try {
    result = std_set_Sl_std_string_Sg____getitem__((std::set< std::string > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_add", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_add" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringSet_add" "', argument " "2"" of type '" "std::set< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_string_Sg__add(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_discard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_discard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_discard" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringSet_discard" "', argument " "2"" of type '" "std::set< std::string >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_string_Sg__discard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::set< std::string > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::set< std::string > *)new std::set< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::set< std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::set< std::string,std::less< std::string >,std::allocator< std::string > > *ptr = (std::set< std::string,std::less< std::string >,std::allocator< std::string > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringSet" "', argument " "1"" of type '" "std::set< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringSet" "', argument " "1"" of type '" "std::set< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< std::string > *)new std::set< std::string >((std::set< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_StringSet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_StringSet__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringSet__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringSet__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StringSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::string >::set(std::less< std::string > const &)\n"
    "    std::set< std::string >::set()\n"
    "    std::set< std::string >::set(std::set< std::string > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringSet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_empty" "', argument " "1"" of type '" "std::set< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (bool)((std::set< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_size" "', argument " "1"" of type '" "std::set< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = ((std::set< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_clear" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_swap" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_swap" "', argument " "2"" of type '" "std::set< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_swap" "', argument " "2"" of type '" "std::set< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::set< std::string >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_erase" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_erase" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_erase" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::string >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_count" "', argument " "1"" of type '" "std::set< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_count" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_count" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::set< std::string > const *)arg1)->count((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_begin" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_end" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_rbegin" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_rend" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_erase" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringSet_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringSet_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
    }
  }
  std_set_Sl_std_string_Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::iterator arg2 ;
  std::set< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_erase" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringSet_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringSet_erase" "', argument " "2"" of type '" "std::set< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringSet_erase" "', argument " "3"" of type '" "std::set< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringSet_erase" "', argument " "3"" of type '" "std::set< std::string >::iterator""'");
    }
  }
  std_set_Sl_std_string_Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringSet_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringSet_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StringSet_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::string,std::less< std::string >,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringSet_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringSet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::string >::erase(std::set< std::string >::key_type const &)\n"
    "    std::set< std::string >::erase(std::set< std::string >::iterator)\n"
    "    std::set< std::string >::erase(std::set< std::string >::iterator,std::set< std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringSet_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_find" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_find" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_find" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_lower_bound" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_lower_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_lower_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_upper_bound" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_upper_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_upper_bound" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::set< std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_equal_range", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_equal_range" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_equal_range" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_equal_range" "', argument " "2"" of type '" "std::set< std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->equal_range((std::set< std::string >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringSet_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  std::set< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::string >::iterator,bool > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringSet_insert", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringSet_insert" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringSet_insert" "', argument " "2"" of type '" "std::set< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringSet_insert" "', argument " "2"" of type '" "std::set< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->insert((std::set< std::string >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::string >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< std::string >::iterator,bool > & >(result).second));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::string > *arg1 = (std::set< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringSet" "', argument " "1"" of type '" "std::set< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StringSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StringPairSet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::pair< std::string,std::string > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__pairT_std__string_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringPairSet" "', argument " "1"" of type '" "std::less< std::pair< std::string,std::string > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringPairSet" "', argument " "1"" of type '" "std::less< std::pair< std::string,std::string > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::pair< std::string,std::string > > * >(argp1);
  result = (std::set< std::pair< std::string,std::string > > *)new std::set< std::pair< std::string,std::string > >((std::less< std::pair< std::string,std::string > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_iterator" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet___nonzero__" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (bool)std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____nonzero__((std::set< std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet___bool__" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (bool)std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____bool__((std::set< std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< std::string,std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet___len__" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____len__((std::set< std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_append" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringPairSet_append" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet___contains__" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringPairSet___contains__" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< std::string,std::string > >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet___getitem__" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringPairSet___getitem__" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::difference_type""'");
  } 
  arg2 = static_cast< std::set< std::pair< std::string,std::string > >::difference_type >(val2);
  try {
    result = std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem__((std::set< std::pair< std::string,std::string > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< std::string,std::string > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_add", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_add" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringPairSet_add" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__add(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_discard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_discard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_discard" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "StringPairSet_discard" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__discard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPairSet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::set< std::pair< std::string,std::string > > *)new std::set< std::pair< std::string,std::string > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPairSet__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::set< std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringPairSet" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringPairSet" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< std::pair< std::string,std::string > > *)new std::set< std::pair< std::string,std::string > >((std::set< std::pair< std::string,std::string > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StringPairSet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_StringPairSet", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_StringPairSet__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__pairT_std__string_std__string_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringPairSet__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StringPairSet__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StringPairSet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::pair< std::string,std::string > >::set(std::less< std::pair< std::string,std::string > > const &)\n"
    "    std::set< std::pair< std::string,std::string > >::set()\n"
    "    std::set< std::pair< std::string,std::string > >::set(std::set< std::pair< std::string,std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairSet_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_empty" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (bool)((std::set< std::pair< std::string,std::string > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< std::string,std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_size" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = ((std::set< std::pair< std::string,std::string > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_clear" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_swap" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_swap" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_swap" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::set< std::pair< std::string,std::string > >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_erase" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_erase" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_erase" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::set< std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< std::string,std::string > >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_count" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_count" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_count" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::set< std::pair< std::string,std::string > > const *)arg1)->count((std::set< std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< std::string,std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_begin" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< std::string,std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_end" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< std::string,std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_rbegin" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< std::string,std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< std::string,std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_rend" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< std::string,std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_erase" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairSet_erase" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairSet_erase" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::iterator arg2 ;
  std::set< std::pair< std::string,std::string > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_erase" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairSet_erase" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairSet_erase" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairSet_erase" "', argument " "3"" of type '" "std::set< std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringPairSet_erase" "', argument " "3"" of type '" "std::set< std::pair< std::string,std::string > >::iterator""'");
    }
  }
  std_set_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "StringPairSet_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StringPairSet_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StringPairSet_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StringPairSet_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringPairSet_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::pair< std::string,std::string > >::erase(std::set< std::pair< std::string,std::string > >::key_type const &)\n"
    "    std::set< std::pair< std::string,std::string > >::erase(std::set< std::pair< std::string,std::string > >::iterator)\n"
    "    std::set< std::pair< std::string,std::string > >::erase(std::set< std::pair< std::string,std::string > >::iterator,std::set< std::pair< std::string,std::string > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringPairSet_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< std::string,std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_find" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_find" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_find" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::set< std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< std::string,std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_lower_bound" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_lower_bound" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_lower_bound" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::set< std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< std::string,std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_upper_bound" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_upper_bound" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_upper_bound" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::set< std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::pair< std::string,std::string > >::iterator,std::set< std::pair< std::string,std::string > >::iterator > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_equal_range", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_equal_range" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_equal_range" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_equal_range" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->equal_range((std::set< std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< std::string,std::string > >::iterator,std::set< std::pair< std::string,std::string > >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< std::string,std::string > >::iterator,std::set< std::pair< std::string,std::string > >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringPairSet_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  std::set< std::pair< std::string,std::string > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::pair< std::string,std::string > >::iterator,bool > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "StringPairSet_insert", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringPairSet_insert" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringPairSet_insert" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringPairSet_insert" "', argument " "2"" of type '" "std::set< std::pair< std::string,std::string > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->insert((std::set< std::pair< std::string,std::string > >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< std::string,std::string > >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< std::pair< std::string,std::string > >::iterator,bool > & >(result).second));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StringPairSet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< std::string,std::string > > *arg1 = (std::set< std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringPairSet" "', argument " "1"" of type '" "std::set< std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< std::string,std::string > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StringPairSet_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StringPairSet_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_HfstTransducerVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_iterator" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_hfst_HfstTransducer_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___nonzero__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (bool)std_vector_Sl_hfst_HfstTransducer_Sg____nonzero__((std::vector< hfst::HfstTransducer > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___bool__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (bool)std_vector_Sl_hfst_HfstTransducer_Sg____bool__((std::vector< hfst::HfstTransducer > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___len__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = std_vector_Sl_hfst_HfstTransducer_Sg____len__((std::vector< hfst::HfstTransducer > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::difference_type arg2 ;
  std::vector< hfst::HfstTransducer >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___getslice__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector___getslice__" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerVector___getslice__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val3);
  try {
    result = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)std_vector_Sl_hfst_HfstTransducer_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::difference_type arg2 ;
  std::vector< hfst::HfstTransducer >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___setslice__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector___setslice__" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerVector___setslice__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::difference_type arg2 ;
  std::vector< hfst::HfstTransducer >::difference_type arg3 ;
  std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___setslice__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector___setslice__" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerVector___setslice__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val3);
  {
    std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *ptr = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstTransducerVector___setslice__" "', argument " "4"" of type '" "std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector___setslice__" "', argument " "4"" of type '" "std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducerVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstTransducerVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::__setslice__(std::vector< hfst::HfstTransducer >::difference_type,std::vector< hfst::HfstTransducer >::difference_type)\n"
    "    std::vector< hfst::HfstTransducer >::__setslice__(std::vector< hfst::HfstTransducer >::difference_type,std::vector< hfst::HfstTransducer >::difference_type,std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::difference_type arg2 ;
  std::vector< hfst::HfstTransducer >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___delslice__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector___delslice__" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerVector___delslice__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___delitem__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector___delitem__" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val2);
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___getitem__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)std_vector_Sl_hfst_HfstTransducer_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *ptr = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___delitem__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstTransducerVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducerVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::__delitem__(std::vector< hfst::HfstTransducer >::difference_type)\n"
    "    std::vector< hfst::HfstTransducer >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< hfst::HfstTransducer >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___getitem__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector___getitem__" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val2);
  try {
    result = (std::vector< hfst::HfstTransducer >::value_type *) &std_vector_Sl_hfst_HfstTransducer_Sg____getitem____SWIG_1((std::vector< hfst::HfstTransducer > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::HfstTransducer >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstTransducerVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducerVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::__getitem__(PySliceObject *)\n"
    "    std::vector< hfst::HfstTransducer >::__getitem__(std::vector< hfst::HfstTransducer >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::difference_type arg2 ;
  std::vector< hfst::HfstTransducer >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector___setitem__" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp3);
  try {
    std_vector_Sl_hfst_HfstTransducer_Sg____setitem____SWIG_2(arg1,arg2,(hfst::HfstTransducer const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstTransducerVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::__setitem__(PySliceObject *,std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &)\n"
    "    std::vector< hfst::HfstTransducer >::__setitem__(PySliceObject *)\n"
    "    std::vector< hfst::HfstTransducer >::__setitem__(std::vector< hfst::HfstTransducer >::difference_type,std::vector< hfst::HfstTransducer >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_pop" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  try {
    result = std_vector_Sl_hfst_HfstTransducer_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< hfst::HfstTransducer >::value_type(static_cast< const std::vector< hfst::HfstTransducer >::value_type& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_append" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerVector_append" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector_append" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp2);
  std_vector_Sl_hfst_HfstTransducer_Sg__append(arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< hfst::HfstTransducer > *)new std::vector< hfst::HfstTransducer >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< hfst::HfstTransducer > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *ptr = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducerVector" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerVector" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< hfst::HfstTransducer > *)new std::vector< hfst::HfstTransducer >((std::vector< hfst::HfstTransducer > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_empty" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (bool)((std::vector< hfst::HfstTransducer > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_size" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = ((std::vector< hfst::HfstTransducer > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_swap" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerVector_swap" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector_swap" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_begin" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::HfstTransducer >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_end" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::HfstTransducer >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_rbegin" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::HfstTransducer >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_rend" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::HfstTransducer >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_clear" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< hfst::HfstTransducer > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_get_allocator" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = ((std::vector< hfst::HfstTransducer > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< hfst::HfstTransducer >::allocator_type(static_cast< const std::vector< hfst::HfstTransducer >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_hfst__HfstTransducer_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< hfst::HfstTransducer > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstTransducerVector" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst::HfstTransducer >::size_type >(val1);
  result = (std::vector< hfst::HfstTransducer > *)new std::vector< hfst::HfstTransducer >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_pop_back" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_resize" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector_resize" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< hfst::HfstTransducer >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_erase" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_erase" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_erase" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_HfstTransducer_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::HfstTransducer >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::iterator arg2 ;
  std::vector< hfst::HfstTransducer >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< hfst::HfstTransducer >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_erase" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_erase" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_erase" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_erase" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_erase" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_HfstTransducer_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::HfstTransducer >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstTransducerVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstTransducerVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::erase(std::vector< hfst::HfstTransducer >::iterator)\n"
    "    std::vector< hfst::HfstTransducer >::erase(std::vector< hfst::HfstTransducer >::iterator,std::vector< hfst::HfstTransducer >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer >::size_type arg1 ;
  std::vector< hfst::HfstTransducer >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< hfst::HfstTransducer > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstTransducerVector" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst::HfstTransducer >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstTransducerVector" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerVector" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp2);
  result = (std::vector< hfst::HfstTransducer > *)new std::vector< hfst::HfstTransducer >(arg1,(std::vector< hfst::HfstTransducer >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstTransducerVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstTransducerVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_HfstTransducerVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTransducerVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HfstTransducerVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstTransducerVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::vector()\n"
    "    std::vector< hfst::HfstTransducer >::vector(std::vector< hfst::HfstTransducer > const &)\n"
    "    std::vector< hfst::HfstTransducer >::vector(std::vector< hfst::HfstTransducer >::size_type)\n"
    "    std::vector< hfst::HfstTransducer >::vector(std::vector< hfst::HfstTransducer >::size_type,std::vector< hfst::HfstTransducer >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_push_back" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerVector_push_back" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector_push_back" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp2);
  (arg1)->push_back((std::vector< hfst::HfstTransducer >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_front" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (std::vector< hfst::HfstTransducer >::value_type *) &((std::vector< hfst::HfstTransducer > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::HfstTransducer >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_back" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = (std::vector< hfst::HfstTransducer >::value_type *) &((std::vector< hfst::HfstTransducer > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::HfstTransducer >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::size_type arg2 ;
  std::vector< hfst::HfstTransducer >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_assign" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector_assign" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerVector_assign" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector_assign" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< hfst::HfstTransducer >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::size_type arg2 ;
  std::vector< hfst::HfstTransducer >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_resize" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector_resize" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerVector_resize" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector_resize" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< hfst::HfstTransducer >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducerVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::resize(std::vector< hfst::HfstTransducer >::size_type)\n"
    "    std::vector< hfst::HfstTransducer >::resize(std::vector< hfst::HfstTransducer >::size_type,std::vector< hfst::HfstTransducer >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::iterator arg2 ;
  std::vector< hfst::HfstTransducer >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< hfst::HfstTransducer >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_insert" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_insert" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_insert" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerVector_insert" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector_insert" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp3);
  result = std_vector_Sl_hfst_HfstTransducer_Sg__insert__SWIG_0(arg1,arg2,(hfst::HfstTransducer const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::HfstTransducer >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::iterator arg2 ;
  std::vector< hfst::HfstTransducer >::size_type arg3 ;
  std::vector< hfst::HfstTransducer >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_insert" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_insert" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerVector_insert" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerVector_insert" "', argument " "3"" of type '" "std::vector< hfst::HfstTransducer >::size_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::HfstTransducer >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstTransducerVector_insert" "', argument " "4"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerVector_insert" "', argument " "4"" of type '" "std::vector< hfst::HfstTransducer >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< hfst::HfstTransducer >::value_type * >(argp4);
  std_vector_Sl_hfst_HfstTransducer_Sg__insert__SWIG_1(arg1,arg2,arg3,(hfst::HfstTransducer const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::HfstTransducer >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstTransducerVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::HfstTransducer >::insert(std::vector< hfst::HfstTransducer >::iterator,std::vector< hfst::HfstTransducer >::value_type const &)\n"
    "    std::vector< hfst::HfstTransducer >::insert(std::vector< hfst::HfstTransducer >::iterator,std::vector< hfst::HfstTransducer >::size_type,std::vector< hfst::HfstTransducer >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  std::vector< hfst::HfstTransducer >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_reserve" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerVector_reserve" "', argument " "2"" of type '" "std::vector< hfst::HfstTransducer >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::HfstTransducer >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::HfstTransducer >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerVector_capacity" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  result = ((std::vector< hfst::HfstTransducer > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTransducerVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::HfstTransducer > *arg1 = (std::vector< hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTransducerVector" "', argument " "1"" of type '" "std::vector< hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::HfstTransducer > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTransducerVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTransducerVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstSymbolSubstitutions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstSymbolSubstitutions" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstSymbolSubstitutions" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___nonzero__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____nonzero__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___bool__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____bool__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___len__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = std_map_Sl_std_string_Sc_std_string_Sg____len__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,std::string >::mapped_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___getitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions___getitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions___getitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (std::map< std::string,std::string >::mapped_type *) &std_map_Sl_std_string_Sc_std_string_Sg____getitem__(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions___delitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___delitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions___delitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions___delitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_std_string_Sg____delitem__(arg1,(std::string const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions_has_key", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_has_key" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions_has_key" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions_has_key" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key((std::map< std::string,std::string > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_keys" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_values" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_items" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___contains__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions___contains__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions___contains__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_key_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_value_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG_0(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "3"" of type '" "std::map< std::string,std::string >::mapped_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions___setitem__" "', argument " "3"" of type '" "std::map< std::string,std::string >::mapped_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_std_string_Sg____setitem____SWIG_1(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstSymbolSubstitutions___setitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstSymbolSubstitutions___setitem____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstSymbolSubstitutions___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,std::string >::__setitem__(std::map< std::string,std::string >::key_type const &)\n"
    "    std::map< std::string,std::string >::__setitem__(std::map< std::string,std::string >::key_type const &,std::map< std::string,std::string >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_asdict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_asdict" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__asdict(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstSymbolSubstitutions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstSymbolSubstitutions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< std::string,std::string > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *ptr = (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstSymbolSubstitutions" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstSymbolSubstitutions" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstSymbolSubstitutions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstSymbolSubstitutions", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstSymbolSubstitutions__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstSymbolSubstitutions__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstSymbolSubstitutions__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstSymbolSubstitutions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,std::string >::map(std::less< std::string > const &)\n"
    "    std::map< std::string,std::string >::map()\n"
    "    std::map< std::string,std::string >::map(std::map< std::string,std::string > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_empty" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,std::string >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_size" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_swap" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions_swap" "', argument " "2"" of type '" "std::map< std::string,std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions_swap" "', argument " "2"" of type '" "std::map< std::string,std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_begin" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,std::string >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_end" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_rbegin" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,std::string >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_rend" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_clear" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,std::string > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_get_allocator" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,std::string >::allocator_type(static_cast< const std::map< std::string,std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_std__string_const_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::string,std::string >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,std::string >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_count" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions_count" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions_count" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,std::string > const *)arg1)->count((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  std_map_Sl_std_string_Sc_std_string_Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "3"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolSubstitutions_erase" "', argument " "3"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  std_map_Sl_std_string_Sc_std_string_Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstSymbolSubstitutions_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstSymbolSubstitutions_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstSymbolSubstitutions_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstSymbolSubstitutions_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,std::string >::erase(std::map< std::string,std::string >::key_type const &)\n"
    "    std::map< std::string,std::string >::erase(std::map< std::string,std::string >::iterator)\n"
    "    std::map< std::string,std::string >::erase(std::map< std::string,std::string >::iterator,std::map< std::string,std::string >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_find" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions_find" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions_find" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_lower_bound" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions_lower_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions_lower_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolSubstitutions_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::string,std::string >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolSubstitutions_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolSubstitutions_upper_bound" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolSubstitutions_upper_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolSubstitutions_upper_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstSymbolSubstitutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstSymbolSubstitutions" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstSymbolSubstitutions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstSymbolSubstitutions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstSymbolPairSubstitutions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::pair< std::string,std::string > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__pairT_std__string_std__string_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstSymbolPairSubstitutions" "', argument " "1"" of type '" "std::less< std::pair< std::string,std::string > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstSymbolPairSubstitutions" "', argument " "1"" of type '" "std::less< std::pair< std::string,std::string > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::pair< std::string,std::string > > * >(argp1);
  result = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *)new std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >((std::less< std::pair< std::string,std::string > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_iterator" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___nonzero__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (bool)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____nonzero__((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___bool__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (bool)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____bool__((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___len__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____len__((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___getitem__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions___getitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions___getitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type *) &std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____getitem__(arg1,(std::pair< std::string,std::string > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< std::string,std::string > >(*result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions___delitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___delitem__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions___delitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions___delitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____delitem__(arg1,(std::pair< std::string,std::string > const &)*arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions_has_key", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_has_key" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions_has_key" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions_has_key" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__has_key((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1,(std::pair< std::string,std::string > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_keys" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_values" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_items" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___contains__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions___contains__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions___contains__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____contains__(arg1,(std::pair< std::string,std::string > const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_key_iterator" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_value_iterator" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_0(arg1,(std::pair< std::string,std::string > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "3"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions___setitem__" "', argument " "3"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg____setitem____SWIG_1(arg1,(std::pair< std::string,std::string > const &)*arg2,(std::pair< std::string,std::string > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstSymbolPairSubstitutions___setitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< std::string,std::string >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstSymbolPairSubstitutions___setitem____SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstSymbolPairSubstitutions___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::__setitem__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &)\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::__setitem__(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::mapped_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_asdict(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  PyObject *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_asdict" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (PyObject *)std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__asdict(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstSymbolPairSubstitutions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *)new std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstSymbolPairSubstitutions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > *ptr = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstSymbolPairSubstitutions" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstSymbolPairSubstitutions" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *)new std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstSymbolPairSubstitutions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstSymbolPairSubstitutions", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstSymbolPairSubstitutions__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__pairT_std__string_std__string_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstSymbolPairSubstitutions__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstSymbolPairSubstitutions__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstSymbolPairSubstitutions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::map(std::less< std::pair< std::string,std::string > > const &)\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::map()\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::map(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_empty" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (bool)((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_size" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = ((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_swap" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions_swap" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions_swap" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_begin" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_end" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_rbegin" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_rend" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_clear" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_get_allocator" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  result = ((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::allocator_type(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_count" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions_count" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions_count" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > const *)arg1)->count((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator""'");
    }
  }
  std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator arg2 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "3"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstSymbolPairSubstitutions_erase" "', argument " "3"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator""'");
    }
  }
  std_map_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sc_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstSymbolPairSubstitutions_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstSymbolPairSubstitutions_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstSymbolPairSubstitutions_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstSymbolPairSubstitutions_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::erase(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &)\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::erase(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator)\n"
    "    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::erase(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator,std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_find" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions_find" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions_find" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_lower_bound" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions_lower_bound" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions_lower_bound" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstSymbolPairSubstitutions_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstSymbolPairSubstitutions_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstSymbolPairSubstitutions_upper_bound" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstSymbolPairSubstitutions_upper_bound" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstSymbolPairSubstitutions_upper_bound" "', argument " "2"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstSymbolPairSubstitutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *arg1 = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstSymbolPairSubstitutions" "', argument " "1"" of type '" "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstSymbolPairSubstitutions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstSymbolPairSubstitutions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_BarBazFoo_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_iterator" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_unsigned_SS_int_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___nonzero__" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg____nonzero__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___bool__" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (bool)std_vector_Sl_unsigned_SS_int_Sg____bool__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___len__" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = std_vector_Sl_unsigned_SS_int_Sg____len__((std::vector< unsigned int > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "BarBazFoo___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___getslice__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo___getslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo___getslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)std_vector_Sl_unsigned_SS_int_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___setslice__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo___setslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo___setslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    std_vector_Sl_unsigned_SS_int_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___setslice__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo___setslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo___setslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  {
    std::vector< unsigned int,std::allocator< unsigned int > > *ptr = (std::vector< unsigned int,std::allocator< unsigned int > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "BarBazFoo___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BarBazFoo___setslice__" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_unsigned_SS_int_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarBazFoo___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BarBazFoo___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_BarBazFoo___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarBazFoo___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::__setslice__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::difference_type)\n"
    "    std::vector< unsigned int >::__setslice__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::difference_type,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BarBazFoo___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___delslice__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo___delslice__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo___delslice__" "', argument " "3"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::difference_type >(val3);
  try {
    std_vector_Sl_unsigned_SS_int_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___delitem__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo___delitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    std_vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___getitem__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< unsigned int,std::allocator< unsigned int > > *)std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___setitem__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< unsigned int,std::allocator< unsigned int > > *ptr = (std::vector< unsigned int,std::allocator< unsigned int > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "BarBazFoo___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BarBazFoo___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< unsigned int,std::allocator< unsigned int > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___setitem__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___delitem__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_unsigned_SS_int_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarBazFoo___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BarBazFoo___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BarBazFoo___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarBazFoo___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::__delitem__(std::vector< unsigned int >::difference_type)\n"
    "    std::vector< unsigned int >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___getitem__" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo___getitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  try {
    result = (std::vector< unsigned int >::value_type *) &std_vector_Sl_unsigned_SS_int_Sg____getitem____SWIG_1((std::vector< unsigned int > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< unsigned int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarBazFoo___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BarBazFoo___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BarBazFoo___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarBazFoo___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::__getitem__(PySliceObject *)\n"
    "    std::vector< unsigned int >::__getitem__(std::vector< unsigned int >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::difference_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo___setitem__" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo___setitem__" "', argument " "2"" of type '" "std::vector< unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo___setitem__" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_unsigned_SS_int_Sg____setitem____SWIG_2(arg1,arg2,(unsigned int const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarBazFoo___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_BarBazFoo___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_BarBazFoo___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BarBazFoo___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarBazFoo___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::__setitem__(PySliceObject *,std::vector< unsigned int,std::allocator< unsigned int > > const &)\n"
    "    std::vector< unsigned int >::__setitem__(PySliceObject *)\n"
    "    std::vector< unsigned int >::__setitem__(std::vector< unsigned int >::difference_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_pop" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  try {
    result = (std::vector< unsigned int >::value_type)std_vector_Sl_unsigned_SS_int_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BarBazFoo_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_append" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo_append" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_unsigned_SS_int_Sg__append(arg1,(unsigned int const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarBazFoo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarBazFoo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< unsigned int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< unsigned int,std::allocator< unsigned int > > *ptr = (std::vector< unsigned int,std::allocator< unsigned int > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BarBazFoo" "', argument " "1"" of type '" "std::vector< unsigned int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BarBazFoo" "', argument " "1"" of type '" "std::vector< unsigned int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >((std::vector< unsigned int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_empty" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (bool)((std::vector< unsigned int > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_size" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = ((std::vector< unsigned int > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BarBazFoo_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_swap" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BarBazFoo_swap" "', argument " "2"" of type '" "std::vector< unsigned int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "BarBazFoo_swap" "', argument " "2"" of type '" "std::vector< unsigned int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned int > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_begin" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_end" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_rbegin" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_rend" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_clear" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< unsigned int > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_get_allocator" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = ((std::vector< unsigned int > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< unsigned int >::allocator_type(static_cast< const std::vector< unsigned int >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_unsigned_int_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarBazFoo__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BarBazFoo" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_pop_back" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_resize" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned int >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_erase" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::iterator arg2 ;
  std::vector< unsigned int >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< unsigned int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_erase" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_erase" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_erase" "', argument " "3"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  result = std_vector_Sl_unsigned_SS_int_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarBazFoo_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_BarBazFoo_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_BarBazFoo_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarBazFoo_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::erase(std::vector< unsigned int >::iterator)\n"
    "    std::vector< unsigned int >::erase(std::vector< unsigned int >::iterator,std::vector< unsigned int >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_BarBazFoo__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int >::size_type arg1 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BarBazFoo" "', argument " "1"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector< unsigned int >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BarBazFoo" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< unsigned int > *)new std::vector< unsigned int >(arg1,(std::vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BarBazFoo(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_BarBazFoo", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_BarBazFoo__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BarBazFoo__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BarBazFoo__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BarBazFoo__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_BarBazFoo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::vector()\n"
    "    std::vector< unsigned int >::vector(std::vector< unsigned int > const &)\n"
    "    std::vector< unsigned int >::vector(std::vector< unsigned int >::size_type)\n"
    "    std::vector< unsigned int >::vector(std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BarBazFoo_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_push_back" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo_push_back" "', argument " "2"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector< unsigned int >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< unsigned int >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_front" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (std::vector< unsigned int >::value_type *) &((std::vector< unsigned int > const *)arg1)->front();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< unsigned int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_back" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = (std::vector< unsigned int >::value_type *) &((std::vector< unsigned int > const *)arg1)->back();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  (void)swig::container_owner<swig::traits<std::vector< unsigned int >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BarBazFoo_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_assign" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo_assign" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo_assign" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_resize" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo_resize" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo_resize" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< unsigned int >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarBazFoo_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_BarBazFoo_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BarBazFoo_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarBazFoo_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::resize(std::vector< unsigned int >::size_type)\n"
    "    std::vector< unsigned int >::resize(std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::iterator arg2 ;
  std::vector< unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned int >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_insert" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector< unsigned int >::value_type >(val3);
  arg3 = &temp3;
  result = std_vector_Sl_unsigned_SS_int_Sg__insert__SWIG_0(arg1,arg2,(unsigned int const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< unsigned int >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::iterator arg2 ;
  std::vector< unsigned int >::size_type arg3 ;
  std::vector< unsigned int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< unsigned int >::value_type temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_insert" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "BarBazFoo_insert" "', argument " "2"" of type '" "std::vector< unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BarBazFoo_insert" "', argument " "3"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg3 = static_cast< std::vector< unsigned int >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "BarBazFoo_insert" "', argument " "4"" of type '" "std::vector< unsigned int >::value_type""'");
  } 
  temp4 = static_cast< std::vector< unsigned int >::value_type >(val4);
  arg4 = &temp4;
  std_vector_Sl_unsigned_SS_int_Sg__insert__SWIG_1(arg1,arg2,arg3,(unsigned int const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "BarBazFoo_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_BarBazFoo_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< unsigned int,std::allocator< unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_BarBazFoo_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'BarBazFoo_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< unsigned int >::insert(std::vector< unsigned int >::iterator,std::vector< unsigned int >::value_type const &)\n"
    "    std::vector< unsigned int >::insert(std::vector< unsigned int >::iterator,std::vector< unsigned int >::size_type,std::vector< unsigned int >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  std::vector< unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "BarBazFoo_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_reserve" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BarBazFoo_reserve" "', argument " "2"" of type '" "std::vector< unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector< unsigned int >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BarBazFoo_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< unsigned int >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BarBazFoo_capacity" "', argument " "1"" of type '" "std::vector< unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  result = ((std::vector< unsigned int > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BarBazFoo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< unsigned int > *arg1 = (std::vector< unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BarBazFoo" "', argument " "1"" of type '" "std::vector< unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< unsigned int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BarBazFoo_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *BarBazFoo_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_HfstBasicTransitions_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_iterator" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___nonzero__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (bool)std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____nonzero__((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___bool__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (bool)std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____bool__((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___len__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____len__((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransitions___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___getslice__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions___getslice__" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransitions___getslice__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val3);
  try {
    result = (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *)std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___setslice__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions___setslice__" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransitions___setslice__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg3 ;
  std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___setslice__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions___setslice__" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransitions___setslice__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val3);
  {
    std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *ptr = (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstBasicTransitions___setslice__" "', argument " "4"" of type '" "std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions___setslice__" "', argument " "4"" of type '" "std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransitions___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstBasicTransitions___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstBasicTransitions___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransitions___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__setslice__(std::vector< hfst::implementations::HfstBasicTransition >::difference_type,std::vector< hfst::implementations::HfstBasicTransition >::difference_type)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__setslice__(std::vector< hfst::implementations::HfstBasicTransition >::difference_type,std::vector< hfst::implementations::HfstBasicTransition >::difference_type,std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransitions___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___delslice__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions___delslice__" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransitions___delslice__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___delitem__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions___delitem__" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val2);
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___getitem__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *)std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___setitem__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *ptr = (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransitions___setitem__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions___setitem__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___setitem__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___delitem__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransitions___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstBasicTransitions___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstBasicTransitions___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransitions___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__delitem__(std::vector< hfst::implementations::HfstBasicTransition >::difference_type)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___getitem__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions___getitem__" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val2);
  try {
    result = (std::vector< hfst::implementations::HfstBasicTransition >::value_type *) &std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____getitem____SWIG_1((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::implementations::HfstBasicTransition >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransitions___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstBasicTransitions___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstBasicTransitions___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransitions___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__getitem__(PySliceObject *)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__getitem__(std::vector< hfst::implementations::HfstBasicTransition >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::difference_type arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions___setitem__" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions___setitem__" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransitions___setitem__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions___setitem__" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp3);
  try {
    std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg____setitem____SWIG_2(arg1,arg2,(hfst::implementations::HfstBasicTransition const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransitions___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstBasicTransitions___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstBasicTransitions___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstBasicTransitions___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransitions___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__setitem__(PySliceObject *,std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > const &)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__setitem__(PySliceObject *)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::__setitem__(std::vector< hfst::implementations::HfstBasicTransition >::difference_type,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_pop" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  try {
    result = std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< hfst::implementations::HfstBasicTransition >::value_type(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::value_type& >(result))), SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_append" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransitions_append" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions_append" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp2);
  std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__append(arg1,(hfst::implementations::HfstBasicTransition const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransitions__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< hfst::implementations::HfstBasicTransition > *)new std::vector< hfst::implementations::HfstBasicTransition >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransitions__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< hfst::implementations::HfstBasicTransition > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *ptr = (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstBasicTransitions" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstBasicTransitions" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< hfst::implementations::HfstBasicTransition > *)new std::vector< hfst::implementations::HfstBasicTransition >((std::vector< hfst::implementations::HfstBasicTransition > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_empty" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (bool)((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_size" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = ((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_swap" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransitions_swap" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions_swap" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_begin" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_end" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_rbegin" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_rend" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_clear" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< hfst::implementations::HfstBasicTransition > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_get_allocator" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = ((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< hfst::implementations::HfstBasicTransition >::allocator_type(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_hfst__implementations__HfstBasicTransition_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransitions__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< hfst::implementations::HfstBasicTransition > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstBasicTransitions" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::size_type >(val1);
  result = (std::vector< hfst::implementations::HfstBasicTransition > *)new std::vector< hfst::implementations::HfstBasicTransition >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_pop_back" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_resize" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions_resize" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_erase" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_erase" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_erase" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_erase" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_erase" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_erase" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_erase" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_erase" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstBasicTransitions_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstBasicTransitions_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransitions_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::erase(std::vector< hfst::implementations::HfstBasicTransition >::iterator)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::erase(std::vector< hfst::implementations::HfstBasicTransition >::iterator,std::vector< hfst::implementations::HfstBasicTransition >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransitions__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type arg1 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< hfst::implementations::HfstBasicTransition > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstBasicTransitions" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstBasicTransitions" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstBasicTransitions" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp2);
  result = (std::vector< hfst::implementations::HfstBasicTransition > *)new std::vector< hfst::implementations::HfstBasicTransition >(arg1,(std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransitions(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstBasicTransitions", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstBasicTransitions__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_HfstBasicTransitions__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstBasicTransitions__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HfstBasicTransitions__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstBasicTransitions'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::vector()\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::vector(std::vector< hfst::implementations::HfstBasicTransition > const &)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::vector(std::vector< hfst::implementations::HfstBasicTransition >::size_type)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::vector(std::vector< hfst::implementations::HfstBasicTransition >::size_type,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_push_back" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransitions_push_back" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions_push_back" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp2);
  (arg1)->push_back((std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_front" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (std::vector< hfst::implementations::HfstBasicTransition >::value_type *) &((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::implementations::HfstBasicTransition >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_back" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = (std::vector< hfst::implementations::HfstBasicTransition >::value_type *) &((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::implementations::HfstBasicTransition >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_assign" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions_assign" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransitions_assign" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions_assign" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_resize" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions_resize" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransitions_resize" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions_resize" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstBasicTransitions_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstBasicTransitions_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransitions_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::resize(std::vector< hfst::implementations::HfstBasicTransition >::size_type)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::resize(std::vector< hfst::implementations::HfstBasicTransition >::size_type,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_insert" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_insert" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_insert" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransitions_insert" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions_insert" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp3);
  result = std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__insert__SWIG_0(arg1,arg2,(hfst::implementations::HfstBasicTransition const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::implementations::HfstBasicTransition >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::iterator arg2 ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type arg3 ;
  std::vector< hfst::implementations::HfstBasicTransition >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_insert" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_insert" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstBasicTransitions_insert" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransitions_insert" "', argument " "3"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::size_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstBasicTransitions_insert" "', argument " "4"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransitions_insert" "', argument " "4"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition >::value_type * >(argp4);
  std_vector_Sl_hfst_implementations_HfstBasicTransition_Sg__insert__SWIG_1(arg1,arg2,arg3,(hfst::implementations::HfstBasicTransition const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstBasicTransitions_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::implementations::HfstBasicTransition >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstBasicTransitions_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransitions_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::insert(std::vector< hfst::implementations::HfstBasicTransition >::iterator,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)\n"
    "    std::vector< hfst::implementations::HfstBasicTransition >::insert(std::vector< hfst::implementations::HfstBasicTransition >::iterator,std::vector< hfst::implementations::HfstBasicTransition >::size_type,std::vector< hfst::implementations::HfstBasicTransition >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransitions_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_reserve" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransitions_reserve" "', argument " "2"" of type '" "std::vector< hfst::implementations::HfstBasicTransition >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::implementations::HfstBasicTransition >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransitions_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstBasicTransition >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransitions_capacity" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  result = ((std::vector< hfst::implementations::HfstBasicTransition > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstBasicTransitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::implementations::HfstBasicTransition > *arg1 = (std::vector< hfst::implementations::HfstBasicTransition > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstBasicTransitions" "', argument " "1"" of type '" "std::vector< hfst::implementations::HfstBasicTransition > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::implementations::HfstBasicTransition > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstBasicTransitions_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstBasicTransitions_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstOneLevelPath__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::string > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< float,std::vector< std::string > > *)new std::pair< float,std::vector< std::string > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstOneLevelPath__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  float arg1 ;
  std::vector< std::string,std::allocator< std::string > > arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  std::pair< float,std::vector< std::string > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstOneLevelPath" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HfstOneLevelPath" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (std::pair< float,std::vector< std::string > > *)new std::pair< float,std::vector< std::string > >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstOneLevelPath__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::string,std::allocator< std::string > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< float,std::vector< std::string > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstOneLevelPath" "', argument " "1"" of type '" "std::pair< float,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstOneLevelPath" "', argument " "1"" of type '" "std::pair< float,std::vector< std::string,std::allocator< std::string > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< float,std::vector< std::string > > *)new std::pair< float,std::vector< std::string > >((std::pair< float,std::vector< std::string,std::allocator< std::string > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstOneLevelPath(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstOneLevelPath", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstOneLevelPath__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< float,std::vector< std::string,std::allocator< std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstOneLevelPath__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HfstOneLevelPath__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstOneLevelPath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< float,std::vector< std::string > >::pair()\n"
    "    std::pair< float,std::vector< std::string > >::pair(float,std::vector< std::string,std::allocator< std::string > >)\n"
    "    std::pair< float,std::vector< std::string > >::pair(std::pair< float,std::vector< std::string,std::allocator< std::string > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPath_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::string > > *arg1 = (std::pair< float,std::vector< std::string > > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPath_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPath_first_set" "', argument " "1"" of type '" "std::pair< float,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::string > > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstOneLevelPath_first_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPath_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::string > > *arg1 = (std::pair< float,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPath_first_get" "', argument " "1"" of type '" "std::pair< float,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::string > > * >(argp1);
  result = (float) ((arg1)->first);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPath_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::string > > *arg1 = (std::pair< float,std::vector< std::string > > *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPath_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPath_second_set" "', argument " "1"" of type '" "std::pair< float,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::string > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPath_second_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPath_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::string > > *arg1 = (std::pair< float,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPath_second_get" "', argument " "1"" of type '" "std::pair< float,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::string > > * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->second);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstOneLevelPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::string > > *arg1 = (std::pair< float,std::vector< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstOneLevelPath" "', argument " "1"" of type '" "std::pair< float,std::vector< std::string > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::string > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstOneLevelPath_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstOneLevelPath_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstOneLevelPaths__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< std::pair< float,std::vector< std::string > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstOneLevelPaths" "', argument " "1"" of type '" "std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstOneLevelPaths" "', argument " "1"" of type '" "std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > * >(argp1);
  result = (std::set< std::pair< float,std::vector< std::string > > > *)new std::set< std::pair< float,std::vector< std::string > > >((std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_iterator" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths___nonzero__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (bool)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____nonzero__((std::set< std::pair< float,std::vector< std::string > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths___bool__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (bool)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____bool__((std::set< std::pair< float,std::vector< std::string > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::string > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths___len__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____len__((std::set< std::pair< float,std::vector< std::string > > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_append" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstOneLevelPaths_append" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths___contains__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstOneLevelPaths___contains__" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::string > > >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths___getitem__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstOneLevelPaths___getitem__" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::difference_type""'");
  } 
  arg2 = static_cast< std::set< std::pair< float,std::vector< std::string > > >::difference_type >(val2);
  try {
    result = std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg____getitem__((std::set< std::pair< float,std::vector< std::string > > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< float,std::vector< std::string,std::allocator< std::string > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_add", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_add" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstOneLevelPaths_add" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__add(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_discard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_discard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_discard" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstOneLevelPaths_discard" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__discard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstOneLevelPaths__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::set< std::pair< float,std::vector< std::string > > > *)new std::set< std::pair< float,std::vector< std::string > > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstOneLevelPaths__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::set< std::pair< float,std::vector< std::string > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > *ptr = (std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstOneLevelPaths" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstOneLevelPaths" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< std::pair< float,std::vector< std::string > > > *)new std::set< std::pair< float,std::vector< std::string > > >((std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstOneLevelPaths(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstOneLevelPaths", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstOneLevelPaths__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstOneLevelPaths__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstOneLevelPaths__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstOneLevelPaths'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::pair< float,std::vector< std::string > > >::set(std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &)\n"
    "    std::set< std::pair< float,std::vector< std::string > > >::set()\n"
    "    std::set< std::pair< float,std::vector< std::string > > >::set(std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_empty" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (bool)((std::set< std::pair< float,std::vector< std::string > > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::string > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_size" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = ((std::set< std::pair< float,std::vector< std::string > > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_clear" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_swap" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_swap" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_swap" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::set< std::pair< float,std::vector< std::string > > >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_erase" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::set< std::pair< float,std::vector< std::string > > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::string > > >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_count" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_count" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_count" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::set< std::pair< float,std::vector< std::string > > > const *)arg1)->count((std::set< std::pair< float,std::vector< std::string > > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_begin" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::string > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_end" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::string > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::string > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_rbegin" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::string > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::string > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_rend" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::string > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_erase" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstOneLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstOneLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::iterator""'");
    }
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator arg2 ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_erase" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstOneLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstOneLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstOneLevelPaths_erase" "', argument " "3"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstOneLevelPaths_erase" "', argument " "3"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::iterator""'");
    }
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_string_Sg__Sg__Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstOneLevelPaths_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< float,std::vector< std::string,std::allocator< std::string > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstOneLevelPaths_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::string > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstOneLevelPaths_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstOneLevelPaths_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::pair< float,std::vector< std::string > > >::erase(std::set< std::pair< float,std::vector< std::string > > >::key_type const &)\n"
    "    std::set< std::pair< float,std::vector< std::string > > >::erase(std::set< std::pair< float,std::vector< std::string > > >::iterator)\n"
    "    std::set< std::pair< float,std::vector< std::string > > >::erase(std::set< std::pair< float,std::vector< std::string > > >::iterator,std::set< std::pair< float,std::vector< std::string > > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_find" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_find" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_find" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::set< std::pair< float,std::vector< std::string > > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::string > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_lower_bound" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_lower_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_lower_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::set< std::pair< float,std::vector< std::string > > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::string > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::string > > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_upper_bound" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_upper_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_upper_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::set< std::pair< float,std::vector< std::string > > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::string > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::pair< float,std::vector< std::string > > >::iterator,std::set< std::pair< float,std::vector< std::string > > >::iterator > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_equal_range", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_equal_range" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_equal_range" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_equal_range" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->equal_range((std::set< std::pair< float,std::vector< std::string > > >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< float,std::vector< std::string > > >::iterator,std::set< std::pair< float,std::vector< std::string > > >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< float,std::vector< std::string > > >::iterator,std::set< std::pair< float,std::vector< std::string > > >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOneLevelPaths_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::string > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::pair< float,std::vector< std::string > > >::iterator,bool > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOneLevelPaths_insert", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOneLevelPaths_insert" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  {
    std::pair< float,std::vector< std::string,std::allocator< std::string > > > *ptr = (std::pair< float,std::vector< std::string,std::allocator< std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOneLevelPaths_insert" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOneLevelPaths_insert" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::string > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->insert((std::set< std::pair< float,std::vector< std::string > > >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< float,std::vector< std::string > > >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< std::pair< float,std::vector< std::string > > >::iterator,bool > & >(result).second));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstOneLevelPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::string > > > *arg1 = (std::set< std::pair< float,std::vector< std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstOneLevelPaths" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::string > > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstOneLevelPaths_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstOneLevelPaths_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPath__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *)new std::pair< float,std::vector< std::pair< std::string,std::string > > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPath__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  float arg1 ;
  std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > arg2 ;
  float val1 ;
  int ecode1 = 0 ;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstTwoLevelPath" "', argument " "1"" of type '" "float""'");
  } 
  arg1 = static_cast< float >(val1);
  {
    std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HfstTwoLevelPath" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *)new std::pair< float,std::vector< std::pair< std::string,std::string > > >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPath__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTwoLevelPath" "', argument " "1"" of type '" "std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTwoLevelPath" "', argument " "1"" of type '" "std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *)new std::pair< float,std::vector< std::pair< std::string,std::string > > >((std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPath(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstTwoLevelPath", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstTwoLevelPath__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTwoLevelPath__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_float(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HfstTwoLevelPath__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstTwoLevelPath'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< float,std::vector< std::pair< std::string,std::string > > >::pair()\n"
    "    std::pair< float,std::vector< std::pair< std::string,std::string > > >::pair(float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >)\n"
    "    std::pair< float,std::vector< std::pair< std::string,std::string > > >::pair(std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPath_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPath_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPath_first_set" "', argument " "1"" of type '" "std::pair< float,std::vector< std::pair< std::string,std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::pair< std::string,std::string > > > * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTwoLevelPath_first_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPath_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPath_first_get" "', argument " "1"" of type '" "std::pair< float,std::vector< std::pair< std::string,std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::pair< std::string,std::string > > > * >(argp1);
  result = (float) ((arg1)->first);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPath_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *arg2 = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPath_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPath_second_set" "', argument " "1"" of type '" "std::pair< float,std::vector< std::pair< std::string,std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::pair< std::string,std::string > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPath_second_set" "', argument " "2"" of type '" "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > * >(argp2);
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPath_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPath_second_get" "', argument " "1"" of type '" "std::pair< float,std::vector< std::pair< std::string,std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::pair< std::string,std::string > > > * >(argp1);
  result = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)& ((arg1)->second);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTwoLevelPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< float,std::vector< std::pair< std::string,std::string > > > *arg1 = (std::pair< float,std::vector< std::pair< std::string,std::string > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTwoLevelPath" "', argument " "1"" of type '" "std::pair< float,std::vector< std::pair< std::string,std::string > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< float,std::vector< std::pair< std::string,std::string > > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTwoLevelPath_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTwoLevelPath_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPaths__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTwoLevelPaths" "', argument " "1"" of type '" "std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTwoLevelPaths" "', argument " "1"" of type '" "std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > * >(argp1);
  result = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *)new std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >((std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_iterator" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (swig::SwigPyIterator *)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths___nonzero__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (bool)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____nonzero__((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths___bool__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (bool)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____bool__((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths___len__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____len__((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_append" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstTwoLevelPaths_append" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths___contains__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths___contains__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstTwoLevelPaths___contains__" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (bool)std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____contains__(arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths___getitem__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths___getitem__" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTwoLevelPaths___getitem__" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::difference_type""'");
  } 
  arg2 = static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::difference_type >(val2);
  try {
    result = std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg____getitem__((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_add", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_add" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstTwoLevelPaths_add" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__add(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_discard(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_discard", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_discard" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    int res = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstTwoLevelPaths_discard" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__discard(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPaths__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *)new std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPaths__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > *ptr = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTwoLevelPaths" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTwoLevelPaths" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *)new std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >((std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTwoLevelPaths(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstTwoLevelPaths", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstTwoLevelPaths__SWIG_1(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTwoLevelPaths__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTwoLevelPaths__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstTwoLevelPaths'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::set(std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &)\n"
    "    std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::set()\n"
    "    std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::set(std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_empty" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (bool)((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_size" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = ((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_clear" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_swap" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_swap" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_swap" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::size_type result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_erase" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::size_type result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_count", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_count" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_count" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_count" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > const *)arg1)->count((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_begin" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_end" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_rbegin" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_rend" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_erase" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTwoLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTwoLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator""'");
    }
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__erase__SWIG_1(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator arg2 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_erase" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTwoLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTwoLevelPaths_erase" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTwoLevelPaths_erase" "', argument " "3"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTwoLevelPaths_erase" "', argument " "3"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator""'");
    }
  }
  std_set_Sl_std_pair_Sl_float_Sc_std_vector_Sl_std_pair_Sl_std_string_Sc_std_string_Sg__Sg__Sg__Sg__erase__SWIG_2(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstTwoLevelPaths_erase__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTwoLevelPaths_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstTwoLevelPaths_erase__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTwoLevelPaths_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::erase(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &)\n"
    "    std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::erase(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator)\n"
    "    std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::erase(std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_find", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_find" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_find" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_find" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_lower_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_lower_bound" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_lower_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_lower_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_upper_bound", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_upper_bound" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_upper_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_upper_bound" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_equal_range(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_equal_range", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_equal_range" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_equal_range" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_equal_range" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->equal_range((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::key_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  PyTuple_SetItem(resultobj,1,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator,std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator > & >(result).second),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTwoLevelPaths_insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< std::pair< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator,bool > > result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTwoLevelPaths_insert", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTwoLevelPaths_insert" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  {
    std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *ptr = (std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTwoLevelPaths_insert" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTwoLevelPaths_insert" "', argument " "2"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->insert((std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::value_type const &)*arg2);
  resultobj = PyTuple_New(2);
  PyTuple_SetItem(resultobj,0,SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::pair< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator,bool > & >(result).first),
      swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN));    
  PyTuple_SetItem(resultobj,1,SWIG_From_bool  (static_cast< const std::pair< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > >::iterator,bool > & >(result).second));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTwoLevelPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *arg1 = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTwoLevelPaths" "', argument " "1"" of type '" "std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *""'"); 
  }
  arg1 = reinterpret_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTwoLevelPaths_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTwoLevelPaths_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstTransducerPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)new std::pair< hfst::HfstTransducer,hfst::HfstTransducer >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  SwigValueWrapper< hfst::HfstTransducer > arg1 ;
  SwigValueWrapper< hfst::HfstTransducer > arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducerPair" "', argument " "1"" of type '" "hfst::HfstTransducer""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerPair" "', argument " "1"" of type '" "hfst::HfstTransducer""'");
    } else {
      hfst::HfstTransducer * temp = reinterpret_cast< hfst::HfstTransducer * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstTransducerPair" "', argument " "2"" of type '" "hfst::HfstTransducer""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerPair" "', argument " "2"" of type '" "hfst::HfstTransducer""'");
    } else {
      hfst::HfstTransducer * temp = reinterpret_cast< hfst::HfstTransducer * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)new std::pair< hfst::HfstTransducer,hfst::HfstTransducer >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducerPair" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerPair" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)new std::pair< hfst::HfstTransducer,hfst::HfstTransducer >((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPair(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstTransducerPair", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstTransducerPair__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTransducerPair__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HfstTransducerPair__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstTransducerPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< hfst::HfstTransducer,hfst::HfstTransducer >::pair()\n"
    "    std::pair< hfst::HfstTransducer,hfst::HfstTransducer >::pair(hfst::HfstTransducer,hfst::HfstTransducer)\n"
    "    std::pair< hfst::HfstTransducer,hfst::HfstTransducer >::pair(std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *arg1 = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *) 0 ;
  hfst::HfstTransducer *arg2 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPair_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPair_first_set" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerPair_first_set" "', argument " "2"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *arg1 = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPair_first_get" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > * >(argp1);
  result = (hfst::HfstTransducer *)& ((arg1)->first);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *arg1 = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *) 0 ;
  hfst::HfstTransducer *arg2 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPair_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPair_second_set" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerPair_second_set" "', argument " "2"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *arg1 = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPair_second_get" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > * >(argp1);
  result = (hfst::HfstTransducer *)& ((arg1)->second);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTransducerPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *arg1 = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTransducerPair" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTransducerPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTransducerPair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_iterator" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____nonzero__((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___bool__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (bool)std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____bool__((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___len__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____len__((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___getslice__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector___getslice__" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerPairVector___getslice__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val3);
  try {
    result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerPairVector___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg3 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___setslice__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector___setslice__" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerPairVector___setslice__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val3);
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstTransducerPairVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector___setslice__" "', argument " "4"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducerPairVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstTransducerPairVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerPairVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__setslice__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__setslice__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___delslice__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector___delslice__" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerPairVector___delslice__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val3);
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector___delitem__" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val2);
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___delitem__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstTransducerPairVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducerPairVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerPairVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__delitem__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___getitem__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector___getitem__" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val2);
  try {
    result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *) &std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____getitem____SWIG_1((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstTransducerPairVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducerPairVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerPairVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__getitem__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type >(val2);
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector___setitem__" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstTransducerPairVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerPairVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerPairVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerPairVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__setitem__(PySliceObject *,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::__setitem__(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::difference_type,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_pop" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  try {
    result = std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_append" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerPairVector_append" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector_append" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__append(arg1,(std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPairVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *)new std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPairVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducerPairVector" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerPairVector" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *)new std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_empty" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (bool)((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_size" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = ((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_swap" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerPairVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector_swap" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_begin" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_end" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_rbegin" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_rend" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_clear" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = ((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::allocator_type(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPairVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstTransducerPairVector" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type >(val1);
  result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *)new std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_pop_back" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_erase" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_erase" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_erase" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstTransducerPairVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstTransducerPairVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerPairVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::erase(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::erase(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPairVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type arg1 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstTransducerPairVector" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type >(val1);
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstTransducerPairVector" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerPairVector" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *)new std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >(arg1,(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerPairVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstTransducerPairVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstTransducerPairVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_HfstTransducerPairVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTransducerPairVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HfstTransducerPairVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstTransducerPairVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::vector()\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::vector(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const &)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::vector(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::vector(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_push_back" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerPairVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector_push_back" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_front" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *) &((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_back" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *) &((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_assign" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector_assign" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type >(val2);
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerPairVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector_assign" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_resize" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector_resize" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type >(val2);
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerPairVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector_resize" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducerPairVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerPairVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerPairVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::resize(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::resize(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
    }
  }
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducerPairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator arg2 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type arg3 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_insert" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstTransducerPairVector_insert" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducerPairVector_insert" "', argument " "3"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type >(val3);
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstTransducerPairVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducerPairVector_insert" "', argument " "4"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_pair_Sl_hfst_HfstTransducer_Sc_hfst_HfstTransducer_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducerPairVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstTransducerPairVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducerPairVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::insert(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)\n"
    "    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::insert(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::iterator,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type,std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerPairVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_reserve" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerPairVector_reserve" "', argument " "2"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerPairVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerPairVector_capacity" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  result = ((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTransducerPairVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *arg1 = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTransducerPairVector" "', argument " "1"" of type '" "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTransducerPairVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTransducerPairVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_HfstRuleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_iterator" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_hfst_xeroxRules_Rule_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___nonzero__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (bool)std_vector_Sl_hfst_xeroxRules_Rule_Sg____nonzero__((std::vector< hfst::xeroxRules::Rule > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___bool__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (bool)std_vector_Sl_hfst_xeroxRules_Rule_Sg____bool__((std::vector< hfst::xeroxRules::Rule > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___len__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = std_vector_Sl_hfst_xeroxRules_Rule_Sg____len__((std::vector< hfst::xeroxRules::Rule > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg2 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstRuleVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___getslice__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector___getslice__" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstRuleVector___getslice__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val3);
  try {
    result = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)std_vector_Sl_hfst_xeroxRules_Rule_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg2 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___setslice__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector___setslice__" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstRuleVector___setslice__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg2 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg3 ;
  std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___setslice__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector___setslice__" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstRuleVector___setslice__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val3);
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstRuleVector___setslice__" "', argument " "4"" of type '" "std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector___setslice__" "', argument " "4"" of type '" "std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstRuleVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstRuleVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstRuleVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstRuleVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::__setslice__(std::vector< hfst::xeroxRules::Rule >::difference_type,std::vector< hfst::xeroxRules::Rule >::difference_type)\n"
    "    std::vector< hfst::xeroxRules::Rule >::__setslice__(std::vector< hfst::xeroxRules::Rule >::difference_type,std::vector< hfst::xeroxRules::Rule >::difference_type,std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg2 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstRuleVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___delslice__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector___delslice__" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstRuleVector___delslice__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___delitem__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector___delitem__" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val2);
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___getitem__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)std_vector_Sl_hfst_xeroxRules_Rule_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstRuleVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___delitem__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstRuleVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstRuleVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstRuleVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstRuleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::__delitem__(std::vector< hfst::xeroxRules::Rule >::difference_type)\n"
    "    std::vector< hfst::xeroxRules::Rule >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___getitem__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector___getitem__" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val2);
  try {
    result = (std::vector< hfst::xeroxRules::Rule >::value_type *) &std_vector_Sl_hfst_xeroxRules_Rule_Sg____getitem____SWIG_1((std::vector< hfst::xeroxRules::Rule > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xeroxRules__Rule, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::xeroxRules::Rule >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstRuleVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstRuleVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstRuleVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstRuleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::__getitem__(PySliceObject *)\n"
    "    std::vector< hfst::xeroxRules::Rule >::__getitem__(std::vector< hfst::xeroxRules::Rule >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::difference_type arg2 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector___setitem__" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstRuleVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp3);
  try {
    std_vector_Sl_hfst_xeroxRules_Rule_Sg____setitem____SWIG_2(arg1,arg2,(hfst::xeroxRules::Rule const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstRuleVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_HfstRuleVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstRuleVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstRuleVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstRuleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::__setitem__(PySliceObject *,std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)\n"
    "    std::vector< hfst::xeroxRules::Rule >::__setitem__(PySliceObject *)\n"
    "    std::vector< hfst::xeroxRules::Rule >::__setitem__(std::vector< hfst::xeroxRules::Rule >::difference_type,std::vector< hfst::xeroxRules::Rule >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_pop" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  try {
    result = std_vector_Sl_hfst_xeroxRules_Rule_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< hfst::xeroxRules::Rule >::value_type(static_cast< const std::vector< hfst::xeroxRules::Rule >::value_type& >(result))), SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstRuleVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_append" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstRuleVector_append" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector_append" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp2);
  std_vector_Sl_hfst_xeroxRules_Rule_Sg__append(arg1,(hfst::xeroxRules::Rule const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstRuleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< hfst::xeroxRules::Rule > *)new std::vector< hfst::xeroxRules::Rule >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstRuleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< hfst::xeroxRules::Rule > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstRuleVector" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstRuleVector" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< hfst::xeroxRules::Rule > *)new std::vector< hfst::xeroxRules::Rule >((std::vector< hfst::xeroxRules::Rule > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_empty" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (bool)((std::vector< hfst::xeroxRules::Rule > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_size" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = ((std::vector< hfst::xeroxRules::Rule > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstRuleVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_swap" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstRuleVector_swap" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector_swap" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_begin" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::xeroxRules::Rule >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_end" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::xeroxRules::Rule >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_rbegin" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::xeroxRules::Rule >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_rend" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::xeroxRules::Rule >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_clear" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< hfst::xeroxRules::Rule > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_get_allocator" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = ((std::vector< hfst::xeroxRules::Rule > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< hfst::xeroxRules::Rule >::allocator_type(static_cast< const std::vector< hfst::xeroxRules::Rule >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_hfst__xeroxRules__Rule_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstRuleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< hfst::xeroxRules::Rule > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstRuleVector" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst::xeroxRules::Rule >::size_type >(val1);
  result = (std::vector< hfst::xeroxRules::Rule > *)new std::vector< hfst::xeroxRules::Rule >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_pop_back" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_resize" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector_resize" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< hfst::xeroxRules::Rule >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_erase" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_erase" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_erase" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_xeroxRules_Rule_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::xeroxRules::Rule >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::iterator arg2 ;
  std::vector< hfst::xeroxRules::Rule >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< hfst::xeroxRules::Rule >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_erase" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_erase" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_erase" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_erase" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_erase" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_xeroxRules_Rule_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::xeroxRules::Rule >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstRuleVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_HfstRuleVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_HfstRuleVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstRuleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::erase(std::vector< hfst::xeroxRules::Rule >::iterator)\n"
    "    std::vector< hfst::xeroxRules::Rule >::erase(std::vector< hfst::xeroxRules::Rule >::iterator,std::vector< hfst::xeroxRules::Rule >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_HfstRuleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule >::size_type arg1 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< hfst::xeroxRules::Rule > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstRuleVector" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst::xeroxRules::Rule >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstRuleVector" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstRuleVector" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp2);
  result = (std::vector< hfst::xeroxRules::Rule > *)new std::vector< hfst::xeroxRules::Rule >(arg1,(std::vector< hfst::xeroxRules::Rule >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstRuleVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstRuleVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstRuleVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_HfstRuleVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstRuleVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_HfstRuleVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstRuleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::vector()\n"
    "    std::vector< hfst::xeroxRules::Rule >::vector(std::vector< hfst::xeroxRules::Rule > const &)\n"
    "    std::vector< hfst::xeroxRules::Rule >::vector(std::vector< hfst::xeroxRules::Rule >::size_type)\n"
    "    std::vector< hfst::xeroxRules::Rule >::vector(std::vector< hfst::xeroxRules::Rule >::size_type,std::vector< hfst::xeroxRules::Rule >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstRuleVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_push_back" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstRuleVector_push_back" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector_push_back" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp2);
  (arg1)->push_back((std::vector< hfst::xeroxRules::Rule >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_front" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (std::vector< hfst::xeroxRules::Rule >::value_type *) &((std::vector< hfst::xeroxRules::Rule > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xeroxRules__Rule, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::xeroxRules::Rule >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_back" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = (std::vector< hfst::xeroxRules::Rule >::value_type *) &((std::vector< hfst::xeroxRules::Rule > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xeroxRules__Rule, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst::xeroxRules::Rule >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::size_type arg2 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstRuleVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_assign" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector_assign" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstRuleVector_assign" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector_assign" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< hfst::xeroxRules::Rule >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::size_type arg2 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_resize" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector_resize" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstRuleVector_resize" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector_resize" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< hfst::xeroxRules::Rule >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstRuleVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstRuleVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstRuleVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstRuleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::resize(std::vector< hfst::xeroxRules::Rule >::size_type)\n"
    "    std::vector< hfst::xeroxRules::Rule >::resize(std::vector< hfst::xeroxRules::Rule >::size_type,std::vector< hfst::xeroxRules::Rule >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::iterator arg2 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< hfst::xeroxRules::Rule >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_insert" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_insert" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_insert" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstRuleVector_insert" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector_insert" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp3);
  result = std_vector_Sl_hfst_xeroxRules_Rule_Sg__insert__SWIG_0(arg1,arg2,(hfst::xeroxRules::Rule const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst::xeroxRules::Rule >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::iterator arg2 ;
  std::vector< hfst::xeroxRules::Rule >::size_type arg3 ;
  std::vector< hfst::xeroxRules::Rule >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_insert" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_insert" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "HfstRuleVector_insert" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstRuleVector_insert" "', argument " "3"" of type '" "std::vector< hfst::xeroxRules::Rule >::size_type""'");
  } 
  arg3 = static_cast< std::vector< hfst::xeroxRules::Rule >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstRuleVector_insert" "', argument " "4"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstRuleVector_insert" "', argument " "4"" of type '" "std::vector< hfst::xeroxRules::Rule >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule >::value_type * >(argp4);
  std_vector_Sl_hfst_xeroxRules_Rule_Sg__insert__SWIG_1(arg1,arg2,arg3,(hfst::xeroxRules::Rule const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstRuleVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstRuleVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst::xeroxRules::Rule >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_HfstRuleVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstRuleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst::xeroxRules::Rule >::insert(std::vector< hfst::xeroxRules::Rule >::iterator,std::vector< hfst::xeroxRules::Rule >::value_type const &)\n"
    "    std::vector< hfst::xeroxRules::Rule >::insert(std::vector< hfst::xeroxRules::Rule >::iterator,std::vector< hfst::xeroxRules::Rule >::size_type,std::vector< hfst::xeroxRules::Rule >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  std::vector< hfst::xeroxRules::Rule >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstRuleVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_reserve" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstRuleVector_reserve" "', argument " "2"" of type '" "std::vector< hfst::xeroxRules::Rule >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst::xeroxRules::Rule >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstRuleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::xeroxRules::Rule >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstRuleVector_capacity" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  result = ((std::vector< hfst::xeroxRules::Rule > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstRuleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst::xeroxRules::Rule > *arg1 = (std::vector< hfst::xeroxRules::Rule > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstRuleVector" "', argument " "1"" of type '" "std::vector< hfst::xeroxRules::Rule > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst::xeroxRules::Rule > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstRuleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstRuleVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstTransducerUIntPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer *,unsigned int > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::pair< hfst::HfstTransducer *,unsigned int > *)new std::pair< hfst::HfstTransducer *,unsigned int >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerUIntPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  std::pair< hfst::HfstTransducer *,unsigned int > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducerUIntPair" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HfstTransducerUIntPair" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (std::pair< hfst::HfstTransducer *,unsigned int > *)new std::pair< hfst::HfstTransducer *,unsigned int >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerUIntPair__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer *,unsigned int > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::pair< hfst::HfstTransducer *,unsigned int > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer*,unsigned int > *ptr = (std::pair< hfst::HfstTransducer*,unsigned int > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducerUIntPair" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer *,unsigned int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerUIntPair" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer *,unsigned int > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< hfst::HfstTransducer *,unsigned int > *)new std::pair< hfst::HfstTransducer *,unsigned int >((std::pair< hfst::HfstTransducer *,unsigned int > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducerUIntPair(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstTransducerUIntPair", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstTransducerUIntPair__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< hfst::HfstTransducer*,unsigned int >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTransducerUIntPair__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_HfstTransducerUIntPair__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstTransducerUIntPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< hfst::HfstTransducer *,unsigned int >::pair()\n"
    "    std::pair< hfst::HfstTransducer *,unsigned int >::pair(hfst::HfstTransducer *,unsigned int)\n"
    "    std::pair< hfst::HfstTransducer *,unsigned int >::pair(std::pair< hfst::HfstTransducer *,unsigned int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducerUIntPair_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer *,unsigned int > *arg1 = (std::pair< hfst::HfstTransducer *,unsigned int > *) 0 ;
  hfst::HfstTransducer *arg2 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerUIntPair_first_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerUIntPair_first_set" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer *,unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer *,unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducerUIntPair_first_set" "', argument " "2"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  if (arg1) (arg1)->first = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerUIntPair_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer *,unsigned int > *arg1 = (std::pair< hfst::HfstTransducer *,unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerUIntPair_first_get" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer *,unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer *,unsigned int > * >(argp1);
  result = (hfst::HfstTransducer *) ((arg1)->first);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerUIntPair_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer *,unsigned int > *arg1 = (std::pair< hfst::HfstTransducer *,unsigned int > *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducerUIntPair_second_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerUIntPair_second_set" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer *,unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer *,unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducerUIntPair_second_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerUIntPair_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer *,unsigned int > *arg1 = (std::pair< hfst::HfstTransducer *,unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerUIntPair_second_get" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer *,unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer *,unsigned int > * >(argp1);
  result = (unsigned int) ((arg1)->second);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTransducerUIntPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< hfst::HfstTransducer *,unsigned int > *arg1 = (std::pair< hfst::HfstTransducer *,unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTransducerUIntPair" "', argument " "1"" of type '" "std::pair< hfst::HfstTransducer *,unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< hfst::HfstTransducer *,unsigned int > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTransducerUIntPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTransducerUIntPair_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LocationVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_iterator" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_hfst_ol_Location_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___nonzero__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (bool)std_vector_Sl_hfst_ol_Location_Sg____nonzero__((std::vector< hfst_ol::Location > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___bool__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (bool)std_vector_Sl_hfst_ol_Location_Sg____bool__((std::vector< hfst_ol::Location > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___len__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = std_vector_Sl_hfst_ol_Location_Sg____len__((std::vector< hfst_ol::Location > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::difference_type arg2 ;
  std::vector< hfst_ol::Location >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___getslice__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector___getslice__" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVector___getslice__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val3);
  try {
    result = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)std_vector_Sl_hfst_ol_Location_Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::difference_type arg2 ;
  std::vector< hfst_ol::Location >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___setslice__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector___setslice__" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVector___setslice__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_ol_Location_Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::difference_type arg2 ;
  std::vector< hfst_ol::Location >::difference_type arg3 ;
  std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___setslice__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector___setslice__" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVector___setslice__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val3);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LocationVector___setslice__" "', argument " "4"" of type '" "std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector___setslice__" "', argument " "4"" of type '" "std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_hfst_ol_Location_Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LocationVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LocationVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::__setslice__(std::vector< hfst_ol::Location >::difference_type,std::vector< hfst_ol::Location >::difference_type)\n"
    "    std::vector< hfst_ol::Location >::__setslice__(std::vector< hfst_ol::Location >::difference_type,std::vector< hfst_ol::Location >::difference_type,std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::difference_type arg2 ;
  std::vector< hfst_ol::Location >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___delslice__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector___delslice__" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVector___delslice__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val3);
  try {
    std_vector_Sl_hfst_ol_Location_Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___delitem__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector___delitem__" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val2);
  try {
    std_vector_Sl_hfst_ol_Location_Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___getitem__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)std_vector_Sl_hfst_ol_Location_Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_hfst_ol_Location_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_ol_Location_Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___delitem__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_hfst_ol_Location_Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LocationVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocationVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::__delitem__(std::vector< hfst_ol::Location >::difference_type)\n"
    "    std::vector< hfst_ol::Location >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< hfst_ol::Location >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___getitem__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector___getitem__" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val2);
  try {
    result = (std::vector< hfst_ol::Location >::value_type *) &std_vector_Sl_hfst_ol_Location_Sg____getitem____SWIG_1((std::vector< hfst_ol::Location > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst_ol::Location >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LocationVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocationVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::__getitem__(PySliceObject *)\n"
    "    std::vector< hfst_ol::Location >::__getitem__(std::vector< hfst_ol::Location >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::difference_type arg2 ;
  std::vector< hfst_ol::Location >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector___setitem__" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector___setitem__" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector___setitem__" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp3);
  try {
    std_vector_Sl_hfst_ol_Location_Sg____setitem____SWIG_2(arg1,arg2,(hfst_ol::Location const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LocationVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::__setitem__(PySliceObject *,std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)\n"
    "    std::vector< hfst_ol::Location >::__setitem__(PySliceObject *)\n"
    "    std::vector< hfst_ol::Location >::__setitem__(std::vector< hfst_ol::Location >::difference_type,std::vector< hfst_ol::Location >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_pop" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  try {
    result = std_vector_Sl_hfst_ol_Location_Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj((new std::vector< hfst_ol::Location >::value_type(static_cast< const std::vector< hfst_ol::Location >::value_type& >(result))), SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_append" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationVector_append" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector_append" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp2);
  std_vector_Sl_hfst_ol_Location_Sg__append(arg1,(hfst_ol::Location const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< hfst_ol::Location > *)new std::vector< hfst_ol::Location >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< hfst_ol::Location > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LocationVector" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LocationVector" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< hfst_ol::Location > *)new std::vector< hfst_ol::Location >((std::vector< hfst_ol::Location > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_empty" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (bool)((std::vector< hfst_ol::Location > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_size" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = ((std::vector< hfst_ol::Location > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_swap" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationVector_swap" "', argument " "2"" of type '" "std::vector< hfst_ol::Location > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector_swap" "', argument " "2"" of type '" "std::vector< hfst_ol::Location > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_begin" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst_ol::Location >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_end" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst_ol::Location >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_rbegin" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst_ol::Location >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_rend" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst_ol::Location >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_clear" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< hfst_ol::Location > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_get_allocator" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = ((std::vector< hfst_ol::Location > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< hfst_ol::Location >::allocator_type(static_cast< const std::vector< hfst_ol::Location >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_hfst_ol__Location_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< hfst_ol::Location > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LocationVector" "', argument " "1"" of type '" "std::vector< hfst_ol::Location >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst_ol::Location >::size_type >(val1);
  result = (std::vector< hfst_ol::Location > *)new std::vector< hfst_ol::Location >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_pop_back" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_resize" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector_resize" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< hfst_ol::Location >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_erase" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_erase" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_erase" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_ol_Location_Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst_ol::Location >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::iterator arg2 ;
  std::vector< hfst_ol::Location >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< hfst_ol::Location >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_erase" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_erase" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_erase" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_erase" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_erase" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
    }
  }
  result = std_vector_Sl_hfst_ol_Location_Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst_ol::Location >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_LocationVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_LocationVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::erase(std::vector< hfst_ol::Location >::iterator)\n"
    "    std::vector< hfst_ol::Location >::erase(std::vector< hfst_ol::Location >::iterator,std::vector< hfst_ol::Location >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_LocationVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location >::size_type arg1 ;
  std::vector< hfst_ol::Location >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< hfst_ol::Location > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LocationVector" "', argument " "1"" of type '" "std::vector< hfst_ol::Location >::size_type""'");
  } 
  arg1 = static_cast< std::vector< hfst_ol::Location >::size_type >(val1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LocationVector" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LocationVector" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp2);
  result = (std::vector< hfst_ol::Location > *)new std::vector< hfst_ol::Location >(arg1,(std::vector< hfst_ol::Location >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LocationVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LocationVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LocationVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LocationVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LocationVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LocationVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::vector()\n"
    "    std::vector< hfst_ol::Location >::vector(std::vector< hfst_ol::Location > const &)\n"
    "    std::vector< hfst_ol::Location >::vector(std::vector< hfst_ol::Location >::size_type)\n"
    "    std::vector< hfst_ol::Location >::vector(std::vector< hfst_ol::Location >::size_type,std::vector< hfst_ol::Location >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_push_back" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationVector_push_back" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector_push_back" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp2);
  (arg1)->push_back((std::vector< hfst_ol::Location >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_front" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (std::vector< hfst_ol::Location >::value_type *) &((std::vector< hfst_ol::Location > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst_ol::Location >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_back" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = (std::vector< hfst_ol::Location >::value_type *) &((std::vector< hfst_ol::Location > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  (void)swig::container_owner<swig::traits<std::vector< hfst_ol::Location >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::size_type arg2 ;
  std::vector< hfst_ol::Location >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_assign" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector_assign" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVector_assign" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector_assign" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp3);
  (arg1)->assign(arg2,(std::vector< hfst_ol::Location >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::size_type arg2 ;
  std::vector< hfst_ol::Location >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_resize" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector_resize" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::size_type >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVector_resize" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector_resize" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp3);
  (arg1)->resize(arg2,(std::vector< hfst_ol::Location >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocationVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::resize(std::vector< hfst_ol::Location >::size_type)\n"
    "    std::vector< hfst_ol::Location >::resize(std::vector< hfst_ol::Location >::size_type,std::vector< hfst_ol::Location >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::iterator arg2 ;
  std::vector< hfst_ol::Location >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  std::vector< hfst_ol::Location >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_insert" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_insert" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_insert" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVector_insert" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector_insert" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp3);
  result = std_vector_Sl_hfst_ol_Location_Sg__insert__SWIG_0(arg1,arg2,(hfst_ol::Location const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< hfst_ol::Location >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::iterator arg2 ;
  std::vector< hfst_ol::Location >::size_type arg3 ;
  std::vector< hfst_ol::Location >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_insert" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_insert" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVector_insert" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVector_insert" "', argument " "3"" of type '" "std::vector< hfst_ol::Location >::size_type""'");
  } 
  arg3 = static_cast< std::vector< hfst_ol::Location >::size_type >(val3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_hfst_ol__Location,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LocationVector_insert" "', argument " "4"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVector_insert" "', argument " "4"" of type '" "std::vector< hfst_ol::Location >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< hfst_ol::Location >::value_type * >(argp4);
  std_vector_Sl_hfst_ol_Location_Sg__insert__SWIG_1(arg1,arg2,arg3,(hfst_ol::Location const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< hfst_ol::Location >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LocationVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< hfst_ol::Location >::insert(std::vector< hfst_ol::Location >::iterator,std::vector< hfst_ol::Location >::value_type const &)\n"
    "    std::vector< hfst_ol::Location >::insert(std::vector< hfst_ol::Location >::iterator,std::vector< hfst_ol::Location >::size_type,std::vector< hfst_ol::Location >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  std::vector< hfst_ol::Location >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_reserve" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVector_reserve" "', argument " "2"" of type '" "std::vector< hfst_ol::Location >::size_type""'");
  } 
  arg2 = static_cast< std::vector< hfst_ol::Location >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst_ol::Location >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVector_capacity" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  result = ((std::vector< hfst_ol::Location > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocationVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< hfst_ol::Location > *arg1 = (std::vector< hfst_ol::Location > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocationVector" "', argument " "1"" of type '" "std::vector< hfst_ol::Location > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< hfst_ol::Location > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocationVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LocationVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_LocationVectorVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &swig_obj[0];
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_iterator" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____nonzero__((std::vector< std::vector< hfst_ol::Location > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___bool__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (bool)std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____bool__((std::vector< std::vector< hfst_ol::Location > > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___len__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____len__((std::vector< std::vector< hfst_ol::Location > > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVectorVector___getslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___getslice__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector___getslice__" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVectorVector___getslice__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val3);
  try {
    result = (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *)std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____getslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setslice____SWIG_0(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg3 ;
  std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___setslice__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector___setslice__" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVectorVector___setslice__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val3);
  {
    std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *ptr = (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LocationVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector___setslice__" "', argument " "4"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setslice____SWIG_1(arg1,arg2,arg3,(std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &)*arg4);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___setslice__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVectorVector___setslice__", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LocationVectorVector___setslice____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LocationVectorVector___setslice____SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVectorVector___setslice__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__setslice__(std::vector< std::vector< hfst_ol::Location > >::difference_type,std::vector< std::vector< hfst_ol::Location > >::difference_type)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__setslice__(std::vector< std::vector< hfst_ol::Location > >::difference_type,std::vector< std::vector< hfst_ol::Location > >::difference_type,std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVectorVector___delslice__", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___delslice__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector___delslice__" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVectorVector___delslice__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val3);
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____delslice__(arg1,arg2,arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector___delitem__" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val2);
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____delitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    result = (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *)std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____getitem____SWIG_0(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  {
    std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *ptr = (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___delitem__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  {
    if (!PySlice_Check(swig_obj[1])) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
    }
    arg2 = (PySliceObject *) swig_obj[1];
  }
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____delitem____SWIG_1(arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  } catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___delitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVectorVector___delitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LocationVectorVector___delitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocationVectorVector___delitem____SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVectorVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__delitem__(std::vector< std::vector< hfst_ol::Location > >::difference_type)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__delitem__(PySliceObject *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___getitem__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector___getitem__" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val2);
  try {
    result = (std::vector< std::vector< hfst_ol::Location > >::value_type *) &std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____getitem____SWIG_1((std::vector< std::vector< hfst_ol::Location > > const *)arg1,arg2);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< hfst_ol::Location > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___getitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVectorVector___getitem__", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LocationVectorVector___getitem____SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocationVectorVector___getitem____SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVectorVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__getitem__(PySliceObject *)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__getitem__(std::vector< std::vector< hfst_ol::Location > >::difference_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::difference_type arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector___setitem__" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector___setitem__" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::difference_type >(val2);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector___setitem__" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg____setitem____SWIG_2(arg1,arg2,(std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)*arg3);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector___setitem__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVectorVector___setitem__", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LocationVectorVector___setitem____SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVectorVector___setitem____SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVectorVector___setitem____SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVectorVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__setitem__(PySliceObject *,std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > const &)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__setitem__(PySliceObject *)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::__setitem__(std::vector< std::vector< hfst_ol::Location > >::difference_type,std::vector< std::vector< hfst_ol::Location > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::value_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_pop" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  try {
    result = std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__pop(arg1);
  } catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  resultobj = swig::from(static_cast< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVectorVector_append", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_append" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector_append" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__append(arg1,(std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVectorVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (std::vector< std::vector< hfst_ol::Location > > *)new std::vector< std::vector< hfst_ol::Location > >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVectorVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  std::vector< std::vector< hfst_ol::Location > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *ptr = (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LocationVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LocationVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::vector< hfst_ol::Location > > *)new std::vector< std::vector< hfst_ol::Location > >((std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_empty" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (bool)((std::vector< std::vector< hfst_ol::Location > > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_size" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = ((std::vector< std::vector< hfst_ol::Location > > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVectorVector_swap", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_swap" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector_swap" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_begin" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< hfst_ol::Location > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_end" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< hfst_ol::Location > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_rbegin" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< hfst_ol::Location > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::reverse_iterator result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_rend" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< hfst_ol::Location > >::reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_clear" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  SwigValueWrapper< std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = ((std::vector< std::vector< hfst_ol::Location > > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::vector< hfst_ol::Location > >::allocator_type(static_cast< const std::vector< std::vector< hfst_ol::Location > >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVectorVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< std::vector< hfst_ol::Location > > *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LocationVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< hfst_ol::Location > >::size_type >(val1);
  result = (std::vector< std::vector< hfst_ol::Location > > *)new std::vector< std::vector< hfst_ol::Location > >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_pop_back" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< std::vector< hfst_ol::Location > >::iterator result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__erase__SWIG_0(arg1,arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< hfst_ol::Location > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::iterator arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  std::vector< std::vector< hfst_ol::Location > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_erase" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_erase" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_erase" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
    }
  }
  result = std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__erase__SWIG_1(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< hfst_ol::Location > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVectorVector_erase", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_LocationVectorVector_erase__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_LocationVectorVector_erase__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVectorVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::erase(std::vector< std::vector< hfst_ol::Location > >::iterator)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::erase(std::vector< std::vector< hfst_ol::Location > >::iterator,std::vector< std::vector< hfst_ol::Location > >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_LocationVectorVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > >::size_type arg1 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::vector< std::vector< hfst_ol::Location > > *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LocationVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::vector< hfst_ol::Location > >::size_type >(val1);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_LocationVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LocationVectorVector" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::vector< hfst_ol::Location > > *)new std::vector< std::vector< hfst_ol::Location > >(arg1,(std::vector< std::vector< hfst_ol::Location > >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocationVectorVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LocationVectorVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LocationVectorVector__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LocationVectorVector__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LocationVectorVector__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_LocationVectorVector__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LocationVectorVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::vector()\n"
    "    std::vector< std::vector< hfst_ol::Location > >::vector(std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > const &)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::vector(std::vector< std::vector< hfst_ol::Location > >::size_type)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::vector(std::vector< std::vector< hfst_ol::Location > >::size_type,std::vector< std::vector< hfst_ol::Location > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVectorVector_push_back", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_push_back" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocationVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector_push_back" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::vector< hfst_ol::Location > >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_front" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (std::vector< std::vector< hfst_ol::Location > >::value_type *) &((std::vector< std::vector< hfst_ol::Location > > const *)arg1)->front();
  resultobj = swig::from(static_cast< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< hfst_ol::Location > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_back" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = (std::vector< std::vector< hfst_ol::Location > >::value_type *) &((std::vector< std::vector< hfst_ol::Location > > const *)arg1)->back();
  resultobj = swig::from(static_cast< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > >(*result));
  (void)swig::container_owner<swig::traits<std::vector< std::vector< hfst_ol::Location > >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::size_type arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVectorVector_assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_assign" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector_assign" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::size_type >(val2);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector_assign" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::vector< hfst_ol::Location > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::size_type arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_resize" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector_resize" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::size_type >(val2);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector_resize" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::vector< hfst_ol::Location > >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_resize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVectorVector_resize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LocationVectorVector_resize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVectorVector_resize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVectorVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::resize(std::vector< std::vector< hfst_ol::Location > >::size_type)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::resize(std::vector< std::vector< hfst_ol::Location > >::size_type,std::vector< std::vector< hfst_ol::Location > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::iterator arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  std::vector< std::vector< hfst_ol::Location > >::iterator result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
    }
  }
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocationVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__insert__SWIG_0(arg1,arg2,(std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::vector< hfst_ol::Location > >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::iterator arg2 ;
  std::vector< std::vector< hfst_ol::Location > >::size_type arg3 ;
  std::vector< std::vector< hfst_ol::Location > >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_insert" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LocationVectorVector_insert" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LocationVectorVector_insert" "', argument " "3"" of type '" "std::vector< std::vector< hfst_ol::Location > >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::vector< hfst_ol::Location > >::size_type >(val3);
  {
    std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *ptr = (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LocationVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LocationVectorVector_insert" "', argument " "4"" of type '" "std::vector< std::vector< hfst_ol::Location > >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  std_vector_Sl_std_vector_Sl_hfst_ol_Location_Sg__Sg__insert__SWIG_1(arg1,arg2,arg3,(std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_insert(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "LocationVectorVector_insert", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter) != 0));
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LocationVectorVector_insert__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::vector< hfst_ol::Location > >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_LocationVectorVector_insert__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LocationVectorVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::vector< hfst_ol::Location > >::insert(std::vector< std::vector< hfst_ol::Location > >::iterator,std::vector< std::vector< hfst_ol::Location > >::value_type const &)\n"
    "    std::vector< std::vector< hfst_ol::Location > >::insert(std::vector< std::vector< hfst_ol::Location > >::iterator,std::vector< std::vector< hfst_ol::Location > >::size_type,std::vector< std::vector< hfst_ol::Location > >::value_type const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  std::vector< std::vector< hfst_ol::Location > >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LocationVectorVector_reserve", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_reserve" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LocationVectorVector_reserve" "', argument " "2"" of type '" "std::vector< std::vector< hfst_ol::Location > >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::vector< hfst_ol::Location > >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocationVectorVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::vector< hfst_ol::Location > >::size_type result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LocationVectorVector_capacity" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  result = ((std::vector< std::vector< hfst_ol::Location > > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocationVectorVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::vector< hfst_ol::Location > > *arg1 = (std::vector< std::vector< hfst_ol::Location > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocationVectorVector" "', argument " "1"" of type '" "std::vector< std::vector< hfst_ol::Location > > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::vector< hfst_ol::Location > > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocationVectorVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LocationVectorVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstException__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  HfstException *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (HfstException *)new HfstException();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HfstException, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstException__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  HfstException *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HfstException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (HfstException *)new HfstException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HfstException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstException(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstException", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstException__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_HfstException__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstException'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    HfstException::HfstException()\n"
    "    HfstException::HfstException(std::string const &,std::string const &,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HfstException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HfstException *arg1 = (HfstException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HfstException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstException" "', argument " "1"" of type '" "HfstException *""'"); 
  }
  arg1 = reinterpret_cast< HfstException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HfstException *arg1 = (HfstException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HfstException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstException_what" "', argument " "1"" of type '" "HfstException const *""'"); 
  }
  arg1 = reinterpret_cast< HfstException * >(argp1);
  result = ((HfstException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HfstException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstTransducerTypeMismatchException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  HfstTransducerTypeMismatchException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_HfstTransducerTypeMismatchException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducerTypeMismatchException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerTypeMismatchException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstTransducerTypeMismatchException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducerTypeMismatchException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HfstTransducerTypeMismatchException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (HfstTransducerTypeMismatchException *)new HfstTransducerTypeMismatchException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HfstTransducerTypeMismatchException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTransducerTypeMismatchException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HfstTransducerTypeMismatchException *arg1 = (HfstTransducerTypeMismatchException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HfstTransducerTypeMismatchException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTransducerTypeMismatchException" "', argument " "1"" of type '" "HfstTransducerTypeMismatchException *""'"); 
  }
  arg1 = reinterpret_cast< HfstTransducerTypeMismatchException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducerTypeMismatchException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HfstTransducerTypeMismatchException *arg1 = (HfstTransducerTypeMismatchException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HfstTransducerTypeMismatchException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducerTypeMismatchException_what" "', argument " "1"" of type '" "HfstTransducerTypeMismatchException const *""'"); 
  }
  arg1 = reinterpret_cast< HfstTransducerTypeMismatchException * >(argp1);
  result = ((HfstTransducerTypeMismatchException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTransducerTypeMismatchException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HfstTransducerTypeMismatchException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTransducerTypeMismatchException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ImplementationTypeNotAvailableException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  hfst::ImplementationType arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  ImplementationTypeNotAvailableException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ImplementationTypeNotAvailableException", 4, 4, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ImplementationTypeNotAvailableException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImplementationTypeNotAvailableException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ImplementationTypeNotAvailableException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ImplementationTypeNotAvailableException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ImplementationTypeNotAvailableException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_ImplementationTypeNotAvailableException" "', argument " "4"" of type '" "hfst::ImplementationType""'");
  } 
  arg4 = static_cast< hfst::ImplementationType >(val4);
  result = (ImplementationTypeNotAvailableException *)new ImplementationTypeNotAvailableException((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ImplementationTypeNotAvailableException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ImplementationTypeNotAvailableException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ImplementationTypeNotAvailableException *arg1 = (ImplementationTypeNotAvailableException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ImplementationTypeNotAvailableException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ImplementationTypeNotAvailableException" "', argument " "1"" of type '" "ImplementationTypeNotAvailableException *""'"); 
  }
  arg1 = reinterpret_cast< ImplementationTypeNotAvailableException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImplementationTypeNotAvailableException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ImplementationTypeNotAvailableException *arg1 = (ImplementationTypeNotAvailableException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ImplementationTypeNotAvailableException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImplementationTypeNotAvailableException_what" "', argument " "1"" of type '" "ImplementationTypeNotAvailableException const *""'"); 
  }
  arg1 = reinterpret_cast< ImplementationTypeNotAvailableException * >(argp1);
  result = ((ImplementationTypeNotAvailableException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ImplementationTypeNotAvailableException_get_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ImplementationTypeNotAvailableException *arg1 = (ImplementationTypeNotAvailableException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::ImplementationType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ImplementationTypeNotAvailableException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ImplementationTypeNotAvailableException_get_type" "', argument " "1"" of type '" "ImplementationTypeNotAvailableException const *""'"); 
  }
  arg1 = reinterpret_cast< ImplementationTypeNotAvailableException * >(argp1);
  result = (hfst::ImplementationType)((ImplementationTypeNotAvailableException const *)arg1)->get_type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ImplementationTypeNotAvailableException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ImplementationTypeNotAvailableException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ImplementationTypeNotAvailableException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FunctionNotImplementedException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  FunctionNotImplementedException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_FunctionNotImplementedException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FunctionNotImplementedException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctionNotImplementedException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FunctionNotImplementedException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FunctionNotImplementedException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FunctionNotImplementedException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (FunctionNotImplementedException *)new FunctionNotImplementedException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FunctionNotImplementedException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FunctionNotImplementedException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FunctionNotImplementedException *arg1 = (FunctionNotImplementedException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FunctionNotImplementedException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FunctionNotImplementedException" "', argument " "1"" of type '" "FunctionNotImplementedException *""'"); 
  }
  arg1 = reinterpret_cast< FunctionNotImplementedException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FunctionNotImplementedException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FunctionNotImplementedException *arg1 = (FunctionNotImplementedException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FunctionNotImplementedException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FunctionNotImplementedException_what" "', argument " "1"" of type '" "FunctionNotImplementedException const *""'"); 
  }
  arg1 = reinterpret_cast< FunctionNotImplementedException * >(argp1);
  result = ((FunctionNotImplementedException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FunctionNotImplementedException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FunctionNotImplementedException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FunctionNotImplementedException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StreamNotReadableException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  StreamNotReadableException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_StreamNotReadableException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamNotReadableException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamNotReadableException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StreamNotReadableException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamNotReadableException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StreamNotReadableException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (StreamNotReadableException *)new StreamNotReadableException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StreamNotReadableException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StreamNotReadableException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StreamNotReadableException *arg1 = (StreamNotReadableException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StreamNotReadableException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StreamNotReadableException" "', argument " "1"" of type '" "StreamNotReadableException *""'"); 
  }
  arg1 = reinterpret_cast< StreamNotReadableException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamNotReadableException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StreamNotReadableException *arg1 = (StreamNotReadableException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StreamNotReadableException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamNotReadableException_what" "', argument " "1"" of type '" "StreamNotReadableException const *""'"); 
  }
  arg1 = reinterpret_cast< StreamNotReadableException * >(argp1);
  result = ((StreamNotReadableException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StreamNotReadableException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StreamNotReadableException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StreamNotReadableException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StreamCannotBeWrittenException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  StreamCannotBeWrittenException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_StreamCannotBeWrittenException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamCannotBeWrittenException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamCannotBeWrittenException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StreamCannotBeWrittenException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamCannotBeWrittenException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StreamCannotBeWrittenException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (StreamCannotBeWrittenException *)new StreamCannotBeWrittenException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StreamCannotBeWrittenException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StreamCannotBeWrittenException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StreamCannotBeWrittenException *arg1 = (StreamCannotBeWrittenException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StreamCannotBeWrittenException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StreamCannotBeWrittenException" "', argument " "1"" of type '" "StreamCannotBeWrittenException *""'"); 
  }
  arg1 = reinterpret_cast< StreamCannotBeWrittenException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamCannotBeWrittenException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StreamCannotBeWrittenException *arg1 = (StreamCannotBeWrittenException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StreamCannotBeWrittenException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamCannotBeWrittenException_what" "', argument " "1"" of type '" "StreamCannotBeWrittenException const *""'"); 
  }
  arg1 = reinterpret_cast< StreamCannotBeWrittenException * >(argp1);
  result = ((StreamCannotBeWrittenException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StreamCannotBeWrittenException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StreamCannotBeWrittenException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StreamCannotBeWrittenException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StreamIsClosedException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  StreamIsClosedException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_StreamIsClosedException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StreamIsClosedException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamIsClosedException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StreamIsClosedException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StreamIsClosedException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StreamIsClosedException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (StreamIsClosedException *)new StreamIsClosedException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StreamIsClosedException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StreamIsClosedException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StreamIsClosedException *arg1 = (StreamIsClosedException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StreamIsClosedException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StreamIsClosedException" "', argument " "1"" of type '" "StreamIsClosedException *""'"); 
  }
  arg1 = reinterpret_cast< StreamIsClosedException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StreamIsClosedException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StreamIsClosedException *arg1 = (StreamIsClosedException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StreamIsClosedException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StreamIsClosedException_what" "', argument " "1"" of type '" "StreamIsClosedException const *""'"); 
  }
  arg1 = reinterpret_cast< StreamIsClosedException * >(argp1);
  result = ((StreamIsClosedException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StreamIsClosedException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StreamIsClosedException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StreamIsClosedException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EndOfStreamException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  EndOfStreamException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_EndOfStreamException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EndOfStreamException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EndOfStreamException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EndOfStreamException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EndOfStreamException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EndOfStreamException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (EndOfStreamException *)new EndOfStreamException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EndOfStreamException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EndOfStreamException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EndOfStreamException *arg1 = (EndOfStreamException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_EndOfStreamException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EndOfStreamException" "', argument " "1"" of type '" "EndOfStreamException *""'"); 
  }
  arg1 = reinterpret_cast< EndOfStreamException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EndOfStreamException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EndOfStreamException *arg1 = (EndOfStreamException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_EndOfStreamException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EndOfStreamException_what" "', argument " "1"" of type '" "EndOfStreamException const *""'"); 
  }
  arg1 = reinterpret_cast< EndOfStreamException * >(argp1);
  result = ((EndOfStreamException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EndOfStreamException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EndOfStreamException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EndOfStreamException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransducerIsCyclicException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  TransducerIsCyclicException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TransducerIsCyclicException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransducerIsCyclicException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerIsCyclicException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransducerIsCyclicException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerIsCyclicException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TransducerIsCyclicException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (TransducerIsCyclicException *)new TransducerIsCyclicException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransducerIsCyclicException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransducerIsCyclicException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerIsCyclicException *arg1 = (TransducerIsCyclicException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerIsCyclicException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransducerIsCyclicException" "', argument " "1"" of type '" "TransducerIsCyclicException *""'"); 
  }
  arg1 = reinterpret_cast< TransducerIsCyclicException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransducerIsCyclicException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerIsCyclicException *arg1 = (TransducerIsCyclicException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerIsCyclicException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransducerIsCyclicException_what" "', argument " "1"" of type '" "TransducerIsCyclicException const *""'"); 
  }
  arg1 = reinterpret_cast< TransducerIsCyclicException * >(argp1);
  result = ((TransducerIsCyclicException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransducerIsCyclicException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TransducerIsCyclicException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransducerIsCyclicException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NotTransducerStreamException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  NotTransducerStreamException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_NotTransducerStreamException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NotTransducerStreamException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotTransducerStreamException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NotTransducerStreamException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotTransducerStreamException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NotTransducerStreamException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (NotTransducerStreamException *)new NotTransducerStreamException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NotTransducerStreamException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NotTransducerStreamException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotTransducerStreamException *arg1 = (NotTransducerStreamException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotTransducerStreamException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NotTransducerStreamException" "', argument " "1"" of type '" "NotTransducerStreamException *""'"); 
  }
  arg1 = reinterpret_cast< NotTransducerStreamException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NotTransducerStreamException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotTransducerStreamException *arg1 = (NotTransducerStreamException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotTransducerStreamException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotTransducerStreamException_what" "', argument " "1"" of type '" "NotTransducerStreamException const *""'"); 
  }
  arg1 = reinterpret_cast< NotTransducerStreamException * >(argp1);
  result = ((NotTransducerStreamException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NotTransducerStreamException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NotTransducerStreamException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NotTransducerStreamException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NotValidAttFormatException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  NotValidAttFormatException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_NotValidAttFormatException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NotValidAttFormatException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotValidAttFormatException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NotValidAttFormatException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotValidAttFormatException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NotValidAttFormatException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (NotValidAttFormatException *)new NotValidAttFormatException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NotValidAttFormatException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NotValidAttFormatException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotValidAttFormatException *arg1 = (NotValidAttFormatException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotValidAttFormatException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NotValidAttFormatException" "', argument " "1"" of type '" "NotValidAttFormatException *""'"); 
  }
  arg1 = reinterpret_cast< NotValidAttFormatException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NotValidAttFormatException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotValidAttFormatException *arg1 = (NotValidAttFormatException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotValidAttFormatException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotValidAttFormatException_what" "', argument " "1"" of type '" "NotValidAttFormatException const *""'"); 
  }
  arg1 = reinterpret_cast< NotValidAttFormatException * >(argp1);
  result = ((NotValidAttFormatException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NotValidAttFormatException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NotValidAttFormatException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NotValidAttFormatException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NotValidPrologFormatException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  NotValidPrologFormatException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_NotValidPrologFormatException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NotValidPrologFormatException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotValidPrologFormatException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NotValidPrologFormatException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotValidPrologFormatException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NotValidPrologFormatException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (NotValidPrologFormatException *)new NotValidPrologFormatException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NotValidPrologFormatException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NotValidPrologFormatException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotValidPrologFormatException *arg1 = (NotValidPrologFormatException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotValidPrologFormatException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NotValidPrologFormatException" "', argument " "1"" of type '" "NotValidPrologFormatException *""'"); 
  }
  arg1 = reinterpret_cast< NotValidPrologFormatException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NotValidPrologFormatException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotValidPrologFormatException *arg1 = (NotValidPrologFormatException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotValidPrologFormatException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotValidPrologFormatException_what" "', argument " "1"" of type '" "NotValidPrologFormatException const *""'"); 
  }
  arg1 = reinterpret_cast< NotValidPrologFormatException * >(argp1);
  result = ((NotValidPrologFormatException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NotValidPrologFormatException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NotValidPrologFormatException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NotValidPrologFormatException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_NotValidLexcFormatException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  NotValidLexcFormatException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_NotValidLexcFormatException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NotValidLexcFormatException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotValidLexcFormatException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NotValidLexcFormatException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NotValidLexcFormatException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_NotValidLexcFormatException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (NotValidLexcFormatException *)new NotValidLexcFormatException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NotValidLexcFormatException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NotValidLexcFormatException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotValidLexcFormatException *arg1 = (NotValidLexcFormatException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotValidLexcFormatException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NotValidLexcFormatException" "', argument " "1"" of type '" "NotValidLexcFormatException *""'"); 
  }
  arg1 = reinterpret_cast< NotValidLexcFormatException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NotValidLexcFormatException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NotValidLexcFormatException *arg1 = (NotValidLexcFormatException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_NotValidLexcFormatException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotValidLexcFormatException_what" "', argument " "1"" of type '" "NotValidLexcFormatException const *""'"); 
  }
  arg1 = reinterpret_cast< NotValidLexcFormatException * >(argp1);
  result = ((NotValidLexcFormatException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NotValidLexcFormatException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NotValidLexcFormatException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *NotValidLexcFormatException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StateIsNotFinalException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  StateIsNotFinalException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_StateIsNotFinalException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StateIsNotFinalException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StateIsNotFinalException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StateIsNotFinalException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StateIsNotFinalException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StateIsNotFinalException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (StateIsNotFinalException *)new StateIsNotFinalException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StateIsNotFinalException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StateIsNotFinalException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StateIsNotFinalException *arg1 = (StateIsNotFinalException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StateIsNotFinalException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StateIsNotFinalException" "', argument " "1"" of type '" "StateIsNotFinalException *""'"); 
  }
  arg1 = reinterpret_cast< StateIsNotFinalException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateIsNotFinalException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StateIsNotFinalException *arg1 = (StateIsNotFinalException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StateIsNotFinalException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateIsNotFinalException_what" "', argument " "1"" of type '" "StateIsNotFinalException const *""'"); 
  }
  arg1 = reinterpret_cast< StateIsNotFinalException * >(argp1);
  result = ((StateIsNotFinalException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StateIsNotFinalException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StateIsNotFinalException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StateIsNotFinalException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ContextTransducersAreNotAutomataException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  ContextTransducersAreNotAutomataException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ContextTransducersAreNotAutomataException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ContextTransducersAreNotAutomataException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ContextTransducersAreNotAutomataException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ContextTransducersAreNotAutomataException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ContextTransducersAreNotAutomataException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_ContextTransducersAreNotAutomataException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (ContextTransducersAreNotAutomataException *)new ContextTransducersAreNotAutomataException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ContextTransducersAreNotAutomataException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ContextTransducersAreNotAutomataException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ContextTransducersAreNotAutomataException *arg1 = (ContextTransducersAreNotAutomataException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ContextTransducersAreNotAutomataException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ContextTransducersAreNotAutomataException" "', argument " "1"" of type '" "ContextTransducersAreNotAutomataException *""'"); 
  }
  arg1 = reinterpret_cast< ContextTransducersAreNotAutomataException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ContextTransducersAreNotAutomataException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ContextTransducersAreNotAutomataException *arg1 = (ContextTransducersAreNotAutomataException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ContextTransducersAreNotAutomataException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ContextTransducersAreNotAutomataException_what" "', argument " "1"" of type '" "ContextTransducersAreNotAutomataException const *""'"); 
  }
  arg1 = reinterpret_cast< ContextTransducersAreNotAutomataException * >(argp1);
  result = ((ContextTransducersAreNotAutomataException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ContextTransducersAreNotAutomataException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ContextTransducersAreNotAutomataException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ContextTransducersAreNotAutomataException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransducersAreNotAutomataException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  TransducersAreNotAutomataException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TransducersAreNotAutomataException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransducersAreNotAutomataException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducersAreNotAutomataException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransducersAreNotAutomataException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducersAreNotAutomataException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TransducersAreNotAutomataException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (TransducersAreNotAutomataException *)new TransducersAreNotAutomataException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransducersAreNotAutomataException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransducersAreNotAutomataException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducersAreNotAutomataException *arg1 = (TransducersAreNotAutomataException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducersAreNotAutomataException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransducersAreNotAutomataException" "', argument " "1"" of type '" "TransducersAreNotAutomataException *""'"); 
  }
  arg1 = reinterpret_cast< TransducersAreNotAutomataException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransducersAreNotAutomataException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducersAreNotAutomataException *arg1 = (TransducersAreNotAutomataException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducersAreNotAutomataException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransducersAreNotAutomataException_what" "', argument " "1"" of type '" "TransducersAreNotAutomataException const *""'"); 
  }
  arg1 = reinterpret_cast< TransducersAreNotAutomataException * >(argp1);
  result = ((TransducersAreNotAutomataException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransducersAreNotAutomataException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TransducersAreNotAutomataException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransducersAreNotAutomataException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_StateIndexOutOfBoundsException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  StateIndexOutOfBoundsException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_StateIndexOutOfBoundsException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StateIndexOutOfBoundsException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StateIndexOutOfBoundsException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StateIndexOutOfBoundsException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StateIndexOutOfBoundsException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_StateIndexOutOfBoundsException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (StateIndexOutOfBoundsException *)new StateIndexOutOfBoundsException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_StateIndexOutOfBoundsException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StateIndexOutOfBoundsException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StateIndexOutOfBoundsException *arg1 = (StateIndexOutOfBoundsException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StateIndexOutOfBoundsException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StateIndexOutOfBoundsException" "', argument " "1"" of type '" "StateIndexOutOfBoundsException *""'"); 
  }
  arg1 = reinterpret_cast< StateIndexOutOfBoundsException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StateIndexOutOfBoundsException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  StateIndexOutOfBoundsException *arg1 = (StateIndexOutOfBoundsException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_StateIndexOutOfBoundsException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StateIndexOutOfBoundsException_what" "', argument " "1"" of type '" "StateIndexOutOfBoundsException const *""'"); 
  }
  arg1 = reinterpret_cast< StateIndexOutOfBoundsException * >(argp1);
  result = ((StateIndexOutOfBoundsException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StateIndexOutOfBoundsException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_StateIndexOutOfBoundsException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *StateIndexOutOfBoundsException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransducerHeaderException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  TransducerHeaderException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TransducerHeaderException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransducerHeaderException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerHeaderException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransducerHeaderException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerHeaderException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TransducerHeaderException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (TransducerHeaderException *)new TransducerHeaderException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransducerHeaderException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransducerHeaderException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerHeaderException *arg1 = (TransducerHeaderException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerHeaderException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransducerHeaderException" "', argument " "1"" of type '" "TransducerHeaderException *""'"); 
  }
  arg1 = reinterpret_cast< TransducerHeaderException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransducerHeaderException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerHeaderException *arg1 = (TransducerHeaderException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerHeaderException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransducerHeaderException_what" "', argument " "1"" of type '" "TransducerHeaderException const *""'"); 
  }
  arg1 = reinterpret_cast< TransducerHeaderException * >(argp1);
  result = ((TransducerHeaderException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransducerHeaderException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TransducerHeaderException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransducerHeaderException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MissingOpenFstInputSymbolTableException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  MissingOpenFstInputSymbolTableException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MissingOpenFstInputSymbolTableException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MissingOpenFstInputSymbolTableException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MissingOpenFstInputSymbolTableException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MissingOpenFstInputSymbolTableException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MissingOpenFstInputSymbolTableException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MissingOpenFstInputSymbolTableException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (MissingOpenFstInputSymbolTableException *)new MissingOpenFstInputSymbolTableException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MissingOpenFstInputSymbolTableException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MissingOpenFstInputSymbolTableException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MissingOpenFstInputSymbolTableException *arg1 = (MissingOpenFstInputSymbolTableException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MissingOpenFstInputSymbolTableException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MissingOpenFstInputSymbolTableException" "', argument " "1"" of type '" "MissingOpenFstInputSymbolTableException *""'"); 
  }
  arg1 = reinterpret_cast< MissingOpenFstInputSymbolTableException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MissingOpenFstInputSymbolTableException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MissingOpenFstInputSymbolTableException *arg1 = (MissingOpenFstInputSymbolTableException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MissingOpenFstInputSymbolTableException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MissingOpenFstInputSymbolTableException_what" "', argument " "1"" of type '" "MissingOpenFstInputSymbolTableException const *""'"); 
  }
  arg1 = reinterpret_cast< MissingOpenFstInputSymbolTableException * >(argp1);
  result = ((MissingOpenFstInputSymbolTableException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MissingOpenFstInputSymbolTableException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MissingOpenFstInputSymbolTableException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MissingOpenFstInputSymbolTableException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransducerTypeMismatchException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  TransducerTypeMismatchException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TransducerTypeMismatchException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransducerTypeMismatchException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerTypeMismatchException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransducerTypeMismatchException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerTypeMismatchException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TransducerTypeMismatchException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (TransducerTypeMismatchException *)new TransducerTypeMismatchException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransducerTypeMismatchException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransducerTypeMismatchException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerTypeMismatchException *arg1 = (TransducerTypeMismatchException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerTypeMismatchException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransducerTypeMismatchException" "', argument " "1"" of type '" "TransducerTypeMismatchException *""'"); 
  }
  arg1 = reinterpret_cast< TransducerTypeMismatchException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransducerTypeMismatchException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerTypeMismatchException *arg1 = (TransducerTypeMismatchException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerTypeMismatchException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransducerTypeMismatchException_what" "', argument " "1"" of type '" "TransducerTypeMismatchException const *""'"); 
  }
  arg1 = reinterpret_cast< TransducerTypeMismatchException * >(argp1);
  result = ((TransducerTypeMismatchException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransducerTypeMismatchException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TransducerTypeMismatchException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransducerTypeMismatchException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EmptySetOfContextsException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  EmptySetOfContextsException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_EmptySetOfContextsException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EmptySetOfContextsException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EmptySetOfContextsException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EmptySetOfContextsException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EmptySetOfContextsException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EmptySetOfContextsException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (EmptySetOfContextsException *)new EmptySetOfContextsException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EmptySetOfContextsException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EmptySetOfContextsException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EmptySetOfContextsException *arg1 = (EmptySetOfContextsException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_EmptySetOfContextsException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EmptySetOfContextsException" "', argument " "1"" of type '" "EmptySetOfContextsException *""'"); 
  }
  arg1 = reinterpret_cast< EmptySetOfContextsException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmptySetOfContextsException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EmptySetOfContextsException *arg1 = (EmptySetOfContextsException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_EmptySetOfContextsException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmptySetOfContextsException_what" "', argument " "1"" of type '" "EmptySetOfContextsException const *""'"); 
  }
  arg1 = reinterpret_cast< EmptySetOfContextsException * >(argp1);
  result = ((EmptySetOfContextsException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EmptySetOfContextsException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EmptySetOfContextsException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EmptySetOfContextsException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SpecifiedTypeRequiredException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SpecifiedTypeRequiredException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SpecifiedTypeRequiredException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpecifiedTypeRequiredException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpecifiedTypeRequiredException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpecifiedTypeRequiredException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpecifiedTypeRequiredException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SpecifiedTypeRequiredException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (SpecifiedTypeRequiredException *)new SpecifiedTypeRequiredException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SpecifiedTypeRequiredException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpecifiedTypeRequiredException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecifiedTypeRequiredException *arg1 = (SpecifiedTypeRequiredException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpecifiedTypeRequiredException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpecifiedTypeRequiredException" "', argument " "1"" of type '" "SpecifiedTypeRequiredException *""'"); 
  }
  arg1 = reinterpret_cast< SpecifiedTypeRequiredException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpecifiedTypeRequiredException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SpecifiedTypeRequiredException *arg1 = (SpecifiedTypeRequiredException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SpecifiedTypeRequiredException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpecifiedTypeRequiredException_what" "', argument " "1"" of type '" "SpecifiedTypeRequiredException const *""'"); 
  }
  arg1 = reinterpret_cast< SpecifiedTypeRequiredException * >(argp1);
  result = ((SpecifiedTypeRequiredException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SpecifiedTypeRequiredException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SpecifiedTypeRequiredException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SpecifiedTypeRequiredException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstFatalException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  HfstFatalException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_HfstFatalException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstFatalException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstFatalException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HfstFatalException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstFatalException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_HfstFatalException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (HfstFatalException *)new HfstFatalException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_HfstFatalException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstFatalException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HfstFatalException *arg1 = (HfstFatalException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HfstFatalException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstFatalException" "', argument " "1"" of type '" "HfstFatalException *""'"); 
  }
  arg1 = reinterpret_cast< HfstFatalException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstFatalException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  HfstFatalException *arg1 = (HfstFatalException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_HfstFatalException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstFatalException_what" "', argument " "1"" of type '" "HfstFatalException const *""'"); 
  }
  arg1 = reinterpret_cast< HfstFatalException * >(argp1);
  result = ((HfstFatalException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstFatalException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_HfstFatalException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstFatalException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_TransducerHasWrongTypeException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  TransducerHasWrongTypeException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TransducerHasWrongTypeException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransducerHasWrongTypeException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerHasWrongTypeException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransducerHasWrongTypeException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransducerHasWrongTypeException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TransducerHasWrongTypeException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (TransducerHasWrongTypeException *)new TransducerHasWrongTypeException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TransducerHasWrongTypeException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TransducerHasWrongTypeException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerHasWrongTypeException *arg1 = (TransducerHasWrongTypeException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerHasWrongTypeException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransducerHasWrongTypeException" "', argument " "1"" of type '" "TransducerHasWrongTypeException *""'"); 
  }
  arg1 = reinterpret_cast< TransducerHasWrongTypeException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TransducerHasWrongTypeException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TransducerHasWrongTypeException *arg1 = (TransducerHasWrongTypeException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_TransducerHasWrongTypeException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransducerHasWrongTypeException_what" "', argument " "1"" of type '" "TransducerHasWrongTypeException const *""'"); 
  }
  arg1 = reinterpret_cast< TransducerHasWrongTypeException * >(argp1);
  result = ((TransducerHasWrongTypeException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TransducerHasWrongTypeException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TransducerHasWrongTypeException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TransducerHasWrongTypeException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_IncorrectUtf8CodingException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  IncorrectUtf8CodingException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_IncorrectUtf8CodingException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IncorrectUtf8CodingException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncorrectUtf8CodingException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_IncorrectUtf8CodingException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IncorrectUtf8CodingException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IncorrectUtf8CodingException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (IncorrectUtf8CodingException *)new IncorrectUtf8CodingException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IncorrectUtf8CodingException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IncorrectUtf8CodingException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IncorrectUtf8CodingException *arg1 = (IncorrectUtf8CodingException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncorrectUtf8CodingException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IncorrectUtf8CodingException" "', argument " "1"" of type '" "IncorrectUtf8CodingException *""'"); 
  }
  arg1 = reinterpret_cast< IncorrectUtf8CodingException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IncorrectUtf8CodingException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IncorrectUtf8CodingException *arg1 = (IncorrectUtf8CodingException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IncorrectUtf8CodingException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IncorrectUtf8CodingException_what" "', argument " "1"" of type '" "IncorrectUtf8CodingException const *""'"); 
  }
  arg1 = reinterpret_cast< IncorrectUtf8CodingException * >(argp1);
  result = ((IncorrectUtf8CodingException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IncorrectUtf8CodingException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IncorrectUtf8CodingException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IncorrectUtf8CodingException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_EmptyStringException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  EmptyStringException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_EmptyStringException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_EmptyStringException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EmptyStringException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_EmptyStringException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_EmptyStringException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_EmptyStringException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (EmptyStringException *)new EmptyStringException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_EmptyStringException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_EmptyStringException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EmptyStringException *arg1 = (EmptyStringException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_EmptyStringException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_EmptyStringException" "', argument " "1"" of type '" "EmptyStringException *""'"); 
  }
  arg1 = reinterpret_cast< EmptyStringException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_EmptyStringException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  EmptyStringException *arg1 = (EmptyStringException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_EmptyStringException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "EmptyStringException_what" "', argument " "1"" of type '" "EmptyStringException const *""'"); 
  }
  arg1 = reinterpret_cast< EmptyStringException * >(argp1);
  result = ((EmptyStringException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *EmptyStringException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_EmptyStringException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *EmptyStringException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_SymbolNotFoundException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  SymbolNotFoundException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_SymbolNotFoundException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SymbolNotFoundException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymbolNotFoundException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SymbolNotFoundException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SymbolNotFoundException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_SymbolNotFoundException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (SymbolNotFoundException *)new SymbolNotFoundException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SymbolNotFoundException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SymbolNotFoundException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SymbolNotFoundException *arg1 = (SymbolNotFoundException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SymbolNotFoundException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SymbolNotFoundException" "', argument " "1"" of type '" "SymbolNotFoundException *""'"); 
  }
  arg1 = reinterpret_cast< SymbolNotFoundException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SymbolNotFoundException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SymbolNotFoundException *arg1 = (SymbolNotFoundException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_SymbolNotFoundException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SymbolNotFoundException_what" "', argument " "1"" of type '" "SymbolNotFoundException const *""'"); 
  }
  arg1 = reinterpret_cast< SymbolNotFoundException * >(argp1);
  result = ((SymbolNotFoundException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SymbolNotFoundException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SymbolNotFoundException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *SymbolNotFoundException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_MetadataException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  MetadataException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_MetadataException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MetadataException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MetadataException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MetadataException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MetadataException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MetadataException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (MetadataException *)new MetadataException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MetadataException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataException *arg1 = (MetadataException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MetadataException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MetadataException" "', argument " "1"" of type '" "MetadataException *""'"); 
  }
  arg1 = reinterpret_cast< MetadataException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataException *arg1 = (MetadataException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_MetadataException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataException_what" "', argument " "1"" of type '" "MetadataException const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataException * >(argp1);
  result = ((MetadataException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MetadataException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MetadataException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *MetadataException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_FlagDiacriticsAreNotIdentitiesException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  FlagDiacriticsAreNotIdentitiesException *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_FlagDiacriticsAreNotIdentitiesException", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FlagDiacriticsAreNotIdentitiesException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FlagDiacriticsAreNotIdentitiesException" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_FlagDiacriticsAreNotIdentitiesException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FlagDiacriticsAreNotIdentitiesException" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_FlagDiacriticsAreNotIdentitiesException" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  result = (FlagDiacriticsAreNotIdentitiesException *)new FlagDiacriticsAreNotIdentitiesException((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FlagDiacriticsAreNotIdentitiesException, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FlagDiacriticsAreNotIdentitiesException(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FlagDiacriticsAreNotIdentitiesException *arg1 = (FlagDiacriticsAreNotIdentitiesException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FlagDiacriticsAreNotIdentitiesException, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FlagDiacriticsAreNotIdentitiesException" "', argument " "1"" of type '" "FlagDiacriticsAreNotIdentitiesException *""'"); 
  }
  arg1 = reinterpret_cast< FlagDiacriticsAreNotIdentitiesException * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FlagDiacriticsAreNotIdentitiesException_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FlagDiacriticsAreNotIdentitiesException *arg1 = (FlagDiacriticsAreNotIdentitiesException *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_FlagDiacriticsAreNotIdentitiesException, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FlagDiacriticsAreNotIdentitiesException_what" "', argument " "1"" of type '" "FlagDiacriticsAreNotIdentitiesException const *""'"); 
  }
  arg1 = reinterpret_cast< FlagDiacriticsAreNotIdentitiesException * >(argp1);
  result = ((FlagDiacriticsAreNotIdentitiesException const *)arg1)->what();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FlagDiacriticsAreNotIdentitiesException_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FlagDiacriticsAreNotIdentitiesException, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *FlagDiacriticsAreNotIdentitiesException_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_Location_start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_start_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_start_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Location_start_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->start = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_start_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (unsigned int) ((arg1)->start);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_length_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_length_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Location_length_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  if (arg1) (arg1)->length = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_length_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (unsigned int) ((arg1)->length);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_input_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_input_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_input_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Location_input_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Location_input_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->input = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_input_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_input_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (std::string *) & ((arg1)->input);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_output_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_output_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_output_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Location_output_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Location_output_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->output = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_output_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_output_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (std::string *) & ((arg1)->output);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_tag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_tag_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_tag_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Location_tag_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Location_tag_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->tag = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_tag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_tag_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (std::string *) & ((arg1)->tag);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_weight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_weight_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_weight_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Location_weight_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  if (arg1) (arg1)->weight = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_weight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_weight_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (float) ((arg1)->weight);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_input_parts_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg2 = (std::vector< size_t,std::allocator< size_t > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_input_parts_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_input_parts_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Location_input_parts_set" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< size_t,std::allocator< size_t > > * >(argp2);
  if (arg1) (arg1)->input_parts = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_input_parts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_input_parts_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *)& ((arg1)->input_parts);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_output_parts_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg2 = (std::vector< size_t,std::allocator< size_t > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_output_parts_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_output_parts_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Location_output_parts_set" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< size_t,std::allocator< size_t > > * >(argp2);
  if (arg1) (arg1)->output_parts = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_output_parts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_output_parts_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *)& ((arg1)->output_parts);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_input_symbol_strings_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_input_symbol_strings_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_input_symbol_strings_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Location_input_symbol_strings_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  if (arg1) (arg1)->input_symbol_strings = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_input_symbol_strings_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_input_symbol_strings_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->input_symbol_strings);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_output_symbol_strings_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = (std::vector< std::string,std::allocator< std::string > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "Location_output_symbol_strings_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_output_symbol_strings_set" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Location_output_symbol_strings_set" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string,std::allocator< std::string > > * >(argp2);
  if (arg1) (arg1)->output_symbol_strings = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Location_output_symbol_strings_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Location_output_symbol_strings_get" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  result = (std::vector< std::string,std::allocator< std::string > > *)& ((arg1)->output_symbol_strings);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_Location", 0, 0, 0)) SWIG_fail;
  result = (hfst_ol::Location *)new hfst_ol::Location();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Location(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::Location *arg1 = (hfst_ol::Location *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__Location, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Location" "', argument " "1"" of type '" "hfst_ol::Location *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::Location * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Location_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst_ol__Location, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Location_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_Rule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst::xeroxRules::Rule *)new hfst::xeroxRules::Rule();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  hfst::xeroxRules::Rule *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rule" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rule" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  result = (hfst::xeroxRules::Rule *)new hfst::xeroxRules::Rule((hfst::HfstTransducerPairVector const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducerPairVector *arg2 = 0 ;
  hfst::xeroxRules::ReplaceType arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  hfst::xeroxRules::Rule *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rule" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rule" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Rule" "', argument " "2"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rule" "', argument " "2"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rule" "', argument " "3"" of type '" "hfst::xeroxRules::ReplaceType""'");
  } 
  arg3 = static_cast< hfst::xeroxRules::ReplaceType >(val3);
  result = (hfst::xeroxRules::Rule *)new hfst::xeroxRules::Rule((hfst::HfstTransducerPairVector const &)*arg1,(hfst::HfstTransducerPairVector const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rule__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::xeroxRules::Rule *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rule" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rule" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = (hfst::xeroxRules::Rule *)new hfst::xeroxRules::Rule((hfst::xeroxRules::Rule const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Rule(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_Rule", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_Rule__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rule__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Rule__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_Rule__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Rule'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::Rule::Rule()\n"
    "    hfst::xeroxRules::Rule::Rule(hfst::HfstTransducerPairVector const &)\n"
    "    hfst::xeroxRules::Rule::Rule(hfst::HfstTransducerPairVector const &,hfst::HfstTransducerPairVector const &,hfst::xeroxRules::ReplaceType)\n"
    "    hfst::xeroxRules::Rule::Rule(hfst::xeroxRules::Rule const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Rule_get_mapping(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = (hfst::xeroxRules::Rule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstTransducerPairVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xeroxRules__Rule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rule_get_mapping" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = ((hfst::xeroxRules::Rule const *)arg1)->get_mapping();
  resultobj = swig::from(static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rule_get_context(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = (hfst::xeroxRules::Rule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstTransducerPairVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xeroxRules__Rule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rule_get_context" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = ((hfst::xeroxRules::Rule const *)arg1)->get_context();
  resultobj = swig::from(static_cast< std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rule_get_replType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = (hfst::xeroxRules::Rule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::xeroxRules::ReplaceType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xeroxRules__Rule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rule_get_replType" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = (hfst::xeroxRules::ReplaceType)((hfst::xeroxRules::Rule const *)arg1)->get_replType();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Rule_encodeFlags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = (hfst::xeroxRules::Rule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xeroxRules__Rule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rule_encodeFlags" "', argument " "1"" of type '" "hfst::xeroxRules::Rule *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  (arg1)->encodeFlags();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Rule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = (hfst::xeroxRules::Rule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rule" "', argument " "1"" of type '" "hfst::xeroxRules::Rule *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Rule_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *Rule_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_replace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "replace" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst::xeroxRules::replace((hfst::xeroxRules::Rule const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstRuleVector *arg1 = 0 ;
  bool arg2 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "replace" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst::xeroxRules::replace((std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "replace", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_replace__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_replace__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'replace'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::replace(hfst::xeroxRules::Rule const &,bool)\n"
    "    hfst::xeroxRules::replace(hfst::HfstRuleVector const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xerox_replace_left__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xerox_replace_left" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xerox_replace_left" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xerox_replace_left" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst::xeroxRules::replace_left((hfst::xeroxRules::Rule const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_xerox_replace_left__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstRuleVector *arg1 = 0 ;
  bool arg2 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xerox_replace_left" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xerox_replace_left" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "xerox_replace_left" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst::xeroxRules::replace_left((std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_xerox_replace_left(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "xerox_replace_left", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xerox_replace_left__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_xerox_replace_left__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'xerox_replace_left'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::replace_left(hfst::xeroxRules::Rule const &,bool)\n"
    "    hfst::xeroxRules::replace_left(hfst::HfstRuleVector const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_replace_leftmost_longest_match__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_leftmost_longest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_leftmost_longest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = hfst::xeroxRules::replace_leftmost_longest_match((hfst::xeroxRules::Rule const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_leftmost_longest_match__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstRuleVector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_leftmost_longest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_leftmost_longest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    arg1 = ptr;
  }
  result = hfst::xeroxRules::replace_leftmost_longest_match((std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_leftmost_longest_match(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "replace_leftmost_longest_match", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_leftmost_longest_match__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_leftmost_longest_match__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'replace_leftmost_longest_match'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::replace_leftmost_longest_match(hfst::xeroxRules::Rule const &)\n"
    "    hfst::xeroxRules::replace_leftmost_longest_match(hfst::HfstRuleVector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_replace_rightmost_longest_match__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_rightmost_longest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_rightmost_longest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = hfst::xeroxRules::replace_rightmost_longest_match((hfst::xeroxRules::Rule const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_rightmost_longest_match__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstRuleVector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_rightmost_longest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_rightmost_longest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    arg1 = ptr;
  }
  result = hfst::xeroxRules::replace_rightmost_longest_match((std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_rightmost_longest_match(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "replace_rightmost_longest_match", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_rightmost_longest_match__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_rightmost_longest_match__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'replace_rightmost_longest_match'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::replace_rightmost_longest_match(hfst::xeroxRules::Rule const &)\n"
    "    hfst::xeroxRules::replace_rightmost_longest_match(hfst::HfstRuleVector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_replace_leftmost_shortest_match__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_leftmost_shortest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_leftmost_shortest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = hfst::xeroxRules::replace_leftmost_shortest_match((hfst::xeroxRules::Rule const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_leftmost_shortest_match__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstRuleVector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_leftmost_shortest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_leftmost_shortest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    arg1 = ptr;
  }
  result = hfst::xeroxRules::replace_leftmost_shortest_match((std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_leftmost_shortest_match(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "replace_leftmost_shortest_match", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_leftmost_shortest_match__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_leftmost_shortest_match__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'replace_leftmost_shortest_match'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::replace_leftmost_shortest_match(hfst::xeroxRules::Rule const &)\n"
    "    hfst::xeroxRules::replace_leftmost_shortest_match(hfst::HfstRuleVector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_replace_rightmost_shortest_match__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_rightmost_shortest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_rightmost_shortest_match" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  result = hfst::xeroxRules::replace_rightmost_shortest_match((hfst::xeroxRules::Rule const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_rightmost_shortest_match__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstRuleVector *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_rightmost_shortest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_rightmost_shortest_match" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    arg1 = ptr;
  }
  result = hfst::xeroxRules::replace_rightmost_shortest_match((std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg1);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_rightmost_shortest_match(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "replace_rightmost_shortest_match", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_rightmost_shortest_match__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_replace_rightmost_shortest_match__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'replace_rightmost_shortest_match'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::replace_rightmost_shortest_match(hfst::xeroxRules::Rule const &)\n"
    "    hfst::xeroxRules::replace_rightmost_shortest_match(hfst::HfstRuleVector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_replace_epenthesis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::xeroxRules::Rule *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xeroxRules__Rule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_epenthesis" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_epenthesis" "', argument " "1"" of type '" "hfst::xeroxRules::Rule const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xeroxRules::Rule * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "replace_epenthesis" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst::xeroxRules::replace_epenthesis((hfst::xeroxRules::Rule const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_epenthesis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstRuleVector *arg1 = 0 ;
  bool arg2 ;
  int res1 = SWIG_OLDOBJ ;
  bool val2 ;
  int ecode2 = 0 ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *ptr = (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_epenthesis" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_epenthesis" "', argument " "1"" of type '" "hfst::HfstRuleVector const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "replace_epenthesis" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst::xeroxRules::replace_epenthesis((std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_epenthesis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "replace_epenthesis", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__xeroxRules__Rule, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_replace_epenthesis__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_replace_epenthesis__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'replace_epenthesis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xeroxRules::replace_epenthesis(hfst::xeroxRules::Rule const &,bool)\n"
    "    hfst::xeroxRules::replace_epenthesis(hfst::HfstRuleVector const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_xerox_restriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  hfst::HfstTransducerPairVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "xerox_restriction", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "xerox_restriction" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xerox_restriction" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "xerox_restriction" "', argument " "2"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "xerox_restriction" "', argument " "2"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg2 = ptr;
  }
  result = hfst::xeroxRules::restriction((hfst::HfstTransducer const &)*arg1,(std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_before(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "before", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "before" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "before" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "before" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "before" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  result = hfst::xeroxRules::before((hfst::HfstTransducer const &)*arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_after(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "after", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "after" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "after" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "after" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "after" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  result = hfst::xeroxRules::after((hfst::HfstTransducer const &)*arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_is_diacritic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "is_diacritic" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "is_diacritic" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (bool)hfst::is_diacritic((std::string const &)*arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_compile_pmatch_expression(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  hfst::HfstTransducerVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "compile_pmatch_expression" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "compile_pmatch_expression" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  try {
    result = hfst::compile_pmatch_expression((std::string const &)*arg1);
  } catch(HfstException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new HfstException(static_cast< const HfstException& >(_e))),SWIGTYPE_p_HfstException,SWIG_POINTER_OWN), "HfstException", SWIGTYPE_p_HfstException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_set_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_set_name", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_set_name" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_set_name" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_set_name" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_name((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_get_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_get_name" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = ((hfst::HfstTransducer const *)arg1)->get_name();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_get_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::ImplementationType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_get_type" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (hfst::ImplementationType)((hfst::HfstTransducer const *)arg1)->get_type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_set_property(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_set_property", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_set_property" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_set_property" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_set_property" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer_set_property" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_set_property" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->set_property((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_get_property(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_get_property", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_get_property" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_get_property" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_get_property" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((hfst::HfstTransducer const *)arg1)->get_property((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_get_properties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_get_properties" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *) &((hfst::HfstTransducer const *)arg1)->get_properties();
  resultobj = swig::from(static_cast< std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compare__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_compare" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_compare" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_compare" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_compare" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = (bool)((hfst::HfstTransducer const *)arg1)->compare((hfst::HfstTransducer const &)*arg2,arg3);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compare__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_compare" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_compare" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_compare" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    result = (bool)((hfst::HfstTransducer const *)arg1)->compare((hfst::HfstTransducer const &)*arg2);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compare(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_compare", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_compare__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_compare__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_compare'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::compare(hfst::HfstTransducer const &,bool) const\n"
    "    hfst::HfstTransducer::compare(hfst::HfstTransducer const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_number_of_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_number_of_states" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (unsigned int)((hfst::HfstTransducer const *)arg1)->number_of_states();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_number_of_arcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  unsigned int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_number_of_arcs" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (unsigned int)((hfst::HfstTransducer const *)arg1)->number_of_arcs();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_get_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::StringSet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_get_alphabet" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = ((hfst::HfstTransducer const *)arg1)->get_alphabet();
  resultobj = swig::from(static_cast< std::set< std::string,std::less< std::string >,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_is_cyclic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_is_cyclic" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (bool)((hfst::HfstTransducer const *)arg1)->is_cyclic();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_is_automaton(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_is_automaton" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (bool)((hfst::HfstTransducer const *)arg1)->is_automaton();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_is_infinitely_ambiguous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_is_infinitely_ambiguous" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (bool)((hfst::HfstTransducer const *)arg1)->is_infinitely_ambiguous();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_is_lookup_infinitely_ambiguous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_is_lookup_infinitely_ambiguous", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_is_lookup_infinitely_ambiguous" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_is_lookup_infinitely_ambiguous" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_is_lookup_infinitely_ambiguous" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)((hfst::HfstTransducer const *)arg1)->is_lookup_infinitely_ambiguous((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_has_flag_diacritics(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_has_flag_diacritics" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (bool)((hfst::HfstTransducer const *)arg1)->has_flag_diacritics();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_insert_to_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_insert_to_alphabet", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_insert_to_alphabet" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_insert_to_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_insert_to_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->insert_to_alphabet((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_remove_from_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_remove_from_alphabet", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_remove_from_alphabet" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_remove_from_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_remove_from_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->remove_from_alphabet((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_is_implementation_type_available(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::ImplementationType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "HfstTransducer_is_implementation_type_available" "', argument " "1"" of type '" "hfst::ImplementationType""'");
  } 
  arg1 = static_cast< hfst::ImplementationType >(val1);
  result = (bool)hfst::HfstTransducer::is_implementation_type_available(arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_longest_path_size__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_longest_path_size" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_longest_path_size" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (int)((hfst::HfstTransducer const *)arg1)->longest_path_size(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_longest_path_size__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_longest_path_size" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (int)((hfst::HfstTransducer const *)arg1)->longest_path_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_longest_path_size(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_longest_path_size", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HfstTransducer_longest_path_size__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducer_longest_path_size__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_longest_path_size'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::longest_path_size(bool) const\n"
    "    hfst::HfstTransducer::longest_path_size() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_concatenate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_concatenate" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_concatenate" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_concatenate" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_concatenate" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    hfst_HfstTransducer_concatenate__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_concatenate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_concatenate" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_concatenate" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_concatenate" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    hfst_HfstTransducer_concatenate__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_concatenate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_concatenate", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_concatenate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_concatenate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_concatenate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::concatenate(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::concatenate(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_disjunct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_disjunct" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_disjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_disjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_disjunct" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    hfst_HfstTransducer_disjunct__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_disjunct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_disjunct" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_disjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_disjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    hfst_HfstTransducer_disjunct__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_disjunct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_disjunct", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_disjunct__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_disjunct__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_disjunct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::disjunct(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::disjunct(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_subtract__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_subtract" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_subtract" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_subtract" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_subtract" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    hfst_HfstTransducer_subtract__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_subtract__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_subtract" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_subtract" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_subtract" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    hfst_HfstTransducer_subtract__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_subtract(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_subtract", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_subtract__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_subtract__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_subtract'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::subtract(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::subtract(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_intersect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_intersect" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_intersect" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_intersect" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_intersect" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    hfst_HfstTransducer_intersect__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_intersect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_intersect" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_intersect" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_intersect" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    hfst_HfstTransducer_intersect__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_intersect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_intersect", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_intersect__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_intersect__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_intersect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::intersect(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::intersect(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compose__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_compose" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_compose" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_compose" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_compose" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    hfst_HfstTransducer_compose__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compose__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_compose" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_compose" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_compose" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    hfst_HfstTransducer_compose__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compose(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_compose", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_compose__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_compose__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_compose'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::compose(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::compose(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compose_intersect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducerVector *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_compose_intersect" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *ptr = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_compose_intersect" "', argument " "2"" of type '" "hfst::HfstTransducerVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_compose_intersect" "', argument " "2"" of type '" "hfst::HfstTransducerVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_compose_intersect" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer_compose_intersect" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  hfst_HfstTransducer_compose_intersect__SWIG_0(arg1,(std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &)*arg2,arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compose_intersect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducerVector *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_compose_intersect" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *ptr = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_compose_intersect" "', argument " "2"" of type '" "hfst::HfstTransducerVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_compose_intersect" "', argument " "2"" of type '" "hfst::HfstTransducerVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_compose_intersect" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_compose_intersect__SWIG_0(arg1,(std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compose_intersect__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducerVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_compose_intersect" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *ptr = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_compose_intersect" "', argument " "2"" of type '" "hfst::HfstTransducerVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_compose_intersect" "', argument " "2"" of type '" "hfst::HfstTransducerVector const &""'"); 
    }
    arg2 = ptr;
  }
  hfst_HfstTransducer_compose_intersect__SWIG_0(arg1,(std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_compose_intersect(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_compose_intersect", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_compose_intersect__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_compose_intersect__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer_compose_intersect__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_compose_intersect'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::compose_intersect(hfst::HfstTransducerVector const &,bool,bool)\n"
    "    hfst::HfstTransducer::compose_intersect(hfst::HfstTransducerVector const &,bool)\n"
    "    hfst::HfstTransducer::compose_intersect(hfst::HfstTransducerVector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_priority_union(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_priority_union", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_priority_union" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_priority_union" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_priority_union" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  hfst_HfstTransducer_priority_union(arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_lenient_composition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_lenient_composition" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_lenient_composition" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_lenient_composition" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_lenient_composition" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_lenient_composition__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_lenient_composition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_lenient_composition" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_lenient_composition" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_lenient_composition" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  hfst_HfstTransducer_lenient_composition__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_lenient_composition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_lenient_composition", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_lenient_composition__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_lenient_composition__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_lenient_composition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::lenient_composition(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::lenient_composition(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_cross_product__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_cross_product" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_cross_product" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_cross_product" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_cross_product" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    hfst_HfstTransducer_cross_product__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  } catch(TransducersAreNotAutomataException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducersAreNotAutomataException(static_cast< const TransducersAreNotAutomataException& >(_e))),SWIGTYPE_p_TransducersAreNotAutomataException,SWIG_POINTER_OWN), "TransducersAreNotAutomataException", SWIGTYPE_p_TransducersAreNotAutomataException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_cross_product__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_cross_product" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_cross_product" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_cross_product" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    hfst_HfstTransducer_cross_product__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  } catch(TransducersAreNotAutomataException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducersAreNotAutomataException(static_cast< const TransducersAreNotAutomataException& >(_e))),SWIGTYPE_p_TransducersAreNotAutomataException,SWIG_POINTER_OWN), "TransducersAreNotAutomataException", SWIGTYPE_p_TransducersAreNotAutomataException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_cross_product(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_cross_product", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_cross_product__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_cross_product__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_cross_product'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::cross_product(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::cross_product(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_shuffle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_shuffle" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_shuffle" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_shuffle" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_shuffle" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_shuffle__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_shuffle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_shuffle" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_shuffle" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_shuffle" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  hfst_HfstTransducer_shuffle__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_shuffle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_shuffle", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_shuffle__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_shuffle__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_shuffle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::shuffle(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::shuffle(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_remove_epsilons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_remove_epsilons" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_remove_epsilons(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_determinize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_determinize" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_determinize(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_minimize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_minimize" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_minimize(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_prune(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_prune" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_prune(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_eliminate_flags(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_eliminate_flags" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_eliminate_flags(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_eliminate_flag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_eliminate_flag", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_eliminate_flag" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_eliminate_flag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_eliminate_flag" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    hfst_HfstTransducer_eliminate_flag(arg1,(std::string const &)*arg2);
  } catch(HfstException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new HfstException(static_cast< const HfstException& >(_e))),SWIGTYPE_p_HfstException,SWIG_POINTER_OWN), "HfstException", SWIGTYPE_p_HfstException); SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_n_best(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_n_best", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_n_best" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_n_best" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  hfst_HfstTransducer_n_best(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_convert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::ImplementationType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_convert", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_convert" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_convert" "', argument " "2"" of type '" "hfst::ImplementationType""'");
  } 
  arg2 = static_cast< hfst::ImplementationType >(val2);
  hfst_HfstTransducer_convert(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_repeat_star(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_repeat_star" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_repeat_star(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_repeat_plus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_repeat_plus" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_repeat_plus(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_repeat_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_repeat_n", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_repeat_n" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_repeat_n" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  hfst_HfstTransducer_repeat_n(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_repeat_n_to_k(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_repeat_n_to_k", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_repeat_n_to_k" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_repeat_n_to_k" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_repeat_n_to_k" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  hfst_HfstTransducer_repeat_n_to_k(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_repeat_n_minus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_repeat_n_minus", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_repeat_n_minus" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_repeat_n_minus" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  hfst_HfstTransducer_repeat_n_minus(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_repeat_n_plus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_repeat_n_plus", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_repeat_n_plus" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_repeat_n_plus" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  hfst_HfstTransducer_repeat_n_plus(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_invert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_invert" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_invert(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_reverse" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_reverse(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_input_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_input_project" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_input_project(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_output_project(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_output_project" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_output_project(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_optionalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_optionalize" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_optionalize(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_insert_freely__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_insert_freely" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_insert_freely" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_insert_freely__SWIG_0(arg1,(std::pair< std::string,std::string > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_insert_freely__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_insert_freely" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  hfst_HfstTransducer_insert_freely__SWIG_0(arg1,(std::pair< std::string,std::string > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_insert_freely__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_insert_freely" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_insert_freely" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_insert_freely__SWIG_2(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_insert_freely__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_insert_freely" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_insert_freely" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  hfst_HfstTransducer_insert_freely__SWIG_2(arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_insert_freely(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_insert_freely", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_insert_freely__SWIG_3(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_insert_freely__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_insert_freely__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_insert_freely__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_insert_freely'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::insert_freely(hfst::StringPair const &,bool)\n"
    "    hfst::HfstTransducer::insert_freely(hfst::StringPair const &)\n"
    "    hfst::HfstTransducer::insert_freely(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::insert_freely(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__substitute_symbol" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HfstTransducer__substitute_symbol" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  hfst_HfstTransducer__substitute_symbol__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__substitute_symbol" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  hfst_HfstTransducer__substitute_symbol__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  hfst_HfstTransducer__substitute_symbol__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__substitute_symbol", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducer__substitute_symbol__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer__substitute_symbol__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_HfstTransducer__substitute_symbol__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__substitute_symbol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_substitute_symbol(std::string const &,std::string const &,bool,bool)\n"
    "    hfst::HfstTransducer::_substitute_symbol(std::string const &,std::string const &,bool)\n"
    "    hfst::HfstTransducer::_substitute_symbol(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  hfst::StringPair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer__substitute_symbol_pair", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol_pair" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol_pair" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer__substitute_symbol_pair" "', argument " "3"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair" "', argument " "3"" of type '" "hfst::StringPair const &""'"); 
    }
    arg3 = ptr;
  }
  hfst_HfstTransducer__substitute_symbol_pair(arg1,(std::pair< std::string,std::string > const &)*arg2,(std::pair< std::string,std::string > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol_pair_with_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer__substitute_symbol_pair_with_set", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol_pair_with_set" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol_pair_with_set" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair_with_set" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer__substitute_symbol_pair_with_set" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair_with_set" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  hfst_HfstTransducer__substitute_symbol_pair_with_set(arg1,(std::pair< std::string,std::string > const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol_pair_with_transducer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  hfst::HfstTransducer *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__HfstTransducer,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "3"" of type '" "hfst::HfstTransducer &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "3"" of type '" "hfst::HfstTransducer &""'"); 
  }
  arg3 = reinterpret_cast< hfst::HfstTransducer * >(argp3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  hfst_HfstTransducer__substitute_symbol_pair_with_transducer__SWIG_0(arg1,(std::pair< std::string,std::string > const &)*arg2,*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol_pair_with_transducer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  hfst::HfstTransducer *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__HfstTransducer,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "3"" of type '" "hfst::HfstTransducer &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pair_with_transducer" "', argument " "3"" of type '" "hfst::HfstTransducer &""'"); 
  }
  arg3 = reinterpret_cast< hfst::HfstTransducer * >(argp3);
  hfst_HfstTransducer__substitute_symbol_pair_with_transducer__SWIG_0(arg1,(std::pair< std::string,std::string > const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol_pair_with_transducer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__substitute_symbol_pair_with_transducer", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTransducer__substitute_symbol_pair_with_transducer__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer__substitute_symbol_pair_with_transducer__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__substitute_symbol_pair_with_transducer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_substitute_symbol_pair_with_transducer(hfst::StringPair const &,hfst::HfstTransducer &,bool)\n"
    "    hfst::HfstTransducer::_substitute_symbol_pair_with_transducer(hfst::StringPair const &,hfst::HfstTransducer &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstSymbolSubstitutions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer__substitute_symbols", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbols" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *ptr = (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbols" "', argument " "2"" of type '" "hfst::HfstSymbolSubstitutions const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbols" "', argument " "2"" of type '" "hfst::HfstSymbolSubstitutions const &""'"); 
    }
    arg2 = ptr;
  }
  hfst_HfstTransducer__substitute_symbols(arg1,(std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__substitute_symbol_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstSymbolPairSubstitutions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer__substitute_symbol_pairs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__substitute_symbol_pairs" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > *ptr = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__substitute_symbol_pairs" "', argument " "2"" of type '" "hfst::HfstSymbolPairSubstitutions const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__substitute_symbol_pairs" "', argument " "2"" of type '" "hfst::HfstSymbolPairSubstitutions const &""'"); 
    }
    arg2 = ptr;
  }
  hfst_HfstTransducer__substitute_symbol_pairs(arg1,(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_set_final_weights__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  float arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_set_final_weights" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_set_final_weights" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_set_final_weights" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_set_final_weights__SWIG_0(arg1,arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_set_final_weights__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_set_final_weights" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer_set_final_weights" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  hfst_HfstTransducer_set_final_weights__SWIG_0(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_set_final_weights(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_set_final_weights", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducer_set_final_weights__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_set_final_weights__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_set_final_weights'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::set_final_weights(float,bool)\n"
    "    hfst::HfstTransducer::set_final_weights(float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_push_weights_to_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_push_weights_to_start" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_push_weights_to_start(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_push_weights_to_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_push_weights_to_end" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_push_weights_to_end(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_minus__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_minus" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_minus" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_minus" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_minus" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_minus__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_minus__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_minus" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_minus" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_minus" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  hfst_HfstTransducer_minus__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_minus(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_minus", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_minus__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_minus__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_minus'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::minus(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::minus(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_conjunct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_conjunct" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_conjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_conjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer_conjunct" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  hfst_HfstTransducer_conjunct__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_conjunct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_conjunct" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_conjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_conjunct" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  hfst_HfstTransducer_conjunct__SWIG_0(arg1,(hfst::HfstTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_conjunct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer_conjunct", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer_conjunct__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer_conjunct__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer_conjunct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::conjunct(hfst::HfstTransducer const &,bool)\n"
    "    hfst::HfstTransducer::conjunct(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_lookup_optimize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_lookup_optimize" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_lookup_optimize(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_remove_optimization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_remove_optimization" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  hfst_HfstTransducer_remove_optimization(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst::HfstTransducer *)new_hfst_HfstTransducer__SWIG_0();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::HfstTransducer *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducer" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducer" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (hfst::HfstTransducer *)new_hfst_HfstTransducer__SWIG_1((hfst::HfstTransducer const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::HfstTransducer *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (hfst::HfstTransducer *)new_hfst_HfstTransducer__SWIG_2((hfst::implementations::HfstBasicTransducer const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducer__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = 0 ;
  hfst::ImplementationType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  hfst::HfstTransducer *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstTransducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstTransducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_HfstTransducer" "', argument " "2"" of type '" "hfst::ImplementationType""'");
  } 
  arg2 = static_cast< hfst::ImplementationType >(val2);
  result = (hfst::HfstTransducer *)new_hfst_HfstTransducer__SWIG_3((hfst::implementations::HfstBasicTransducer const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstTransducer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstTransducer", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstTransducer__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTransducer__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstTransducer__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_HfstTransducer__SWIG_3(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstTransducer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::HfstTransducer()\n"
    "    hfst::HfstTransducer::HfstTransducer(hfst::HfstTransducer const &)\n"
    "    hfst::HfstTransducer::HfstTransducer(hfst::implementations::HfstBasicTransducer const &)\n"
    "    hfst::HfstTransducer::HfstTransducer(hfst::implementations::HfstBasicTransducer const &,hfst::ImplementationType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HfstTransducer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTransducer" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  delete_hfst_HfstTransducer(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer___str__" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (char *)hfst_HfstTransducer___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer_write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::HfstOutputStream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer_write", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer_write" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstOutputStream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer_write" "', argument " "2"" of type '" "hfst::HfstOutputStream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer_write" "', argument " "2"" of type '" "hfst::HfstOutputStream &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstOutputStream * >(argp2);
  hfst_HfstTransducer_write(arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_shortest_paths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstTwoLevelPaths result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_shortest_paths" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = hfst_HfstTransducer__extract_shortest_paths(arg1);
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_longest_paths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::HfstTwoLevelPaths result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer__extract_longest_paths", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_longest_paths" "', argument " "1"" of type '" "hfst::HfstTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_longest_paths" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst_HfstTransducer__extract_longest_paths(arg1,arg2);
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  hfst::HfstTwoLevelPaths result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_paths" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_paths" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__extract_paths" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = hfst_HfstTransducer__extract_paths__SWIG_0((hfst::HfstTransducer const *)arg1,arg2,arg3);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  hfst::HfstTwoLevelPaths result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_paths" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_paths" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = hfst_HfstTransducer__extract_paths__SWIG_0((hfst::HfstTransducer const *)arg1,arg2);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::HfstTwoLevelPaths result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_paths" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  try {
    result = hfst_HfstTransducer__extract_paths__SWIG_0((hfst::HfstTransducer const *)arg1);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__extract_paths", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HfstTransducer__extract_paths__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducer__extract_paths__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer__extract_paths__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__extract_paths'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_extract_paths(int,int) const\n"
    "    hfst::HfstTransducer::_extract_paths(int) const\n"
    "    hfst::HfstTransducer::_extract_paths() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths_fd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  hfst::HfstTwoLevelPaths result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    result = hfst_HfstTransducer__extract_paths_fd__SWIG_0((hfst::HfstTransducer const *)arg1,arg2,arg3,arg4);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths_fd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  hfst::HfstTwoLevelPaths result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = hfst_HfstTransducer__extract_paths_fd__SWIG_0((hfst::HfstTransducer const *)arg1,arg2,arg3);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths_fd__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  hfst::HfstTwoLevelPaths result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    result = hfst_HfstTransducer__extract_paths_fd__SWIG_0((hfst::HfstTransducer const *)arg1,arg2);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths_fd__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::HfstTwoLevelPaths result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_paths_fd" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  try {
    result = hfst_HfstTransducer__extract_paths_fd__SWIG_0((hfst::HfstTransducer const *)arg1);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_paths_fd(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__extract_paths_fd", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HfstTransducer__extract_paths_fd__SWIG_3(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstTransducer__extract_paths_fd__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer__extract_paths_fd__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer__extract_paths_fd__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__extract_paths_fd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_extract_paths_fd(int,int,bool) const\n"
    "    hfst::HfstTransducer::_extract_paths_fd(int,int) const\n"
    "    hfst::HfstTransducer::_extract_paths_fd(int) const\n"
    "    hfst::HfstTransducer::_extract_paths_fd() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_random_paths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::HfstTwoLevelPaths result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer__extract_random_paths", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_random_paths" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_random_paths" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = hfst_HfstTransducer__extract_random_paths((hfst::HfstTransducer const *)arg1,arg2);
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__extract_random_paths_fd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  hfst::HfstTwoLevelPaths result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTransducer__extract_random_paths_fd", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__extract_random_paths_fd" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstTransducer__extract_random_paths_fd" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__extract_random_paths_fd" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = hfst_HfstTransducer__extract_random_paths_fd((hfst::HfstTransducer const *)arg1,arg2,arg3);
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_vector" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_vector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__lookup_vector" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    result = hfst_HfstTransducer__lookup_vector__SWIG_0((hfst::HfstTransducer const *)arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,arg3,arg4);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_vector" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_vector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = hfst_HfstTransducer__lookup_vector__SWIG_0((hfst::HfstTransducer const *)arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,arg3);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_vector" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = hfst_HfstTransducer__lookup_vector__SWIG_0((hfst::HfstTransducer const *)arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__lookup_vector", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer__lookup_vector__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer__lookup_vector__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer__lookup_vector__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__lookup_vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_lookup_vector(hfst::StringVector const &,int,double) const\n"
    "    hfst::HfstTransducer::_lookup_vector(hfst::StringVector const &,int) const\n"
    "    hfst::HfstTransducer::_lookup_vector(hfst::StringVector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    result = hfst_HfstTransducer__lookup_fd_vector__SWIG_0((hfst::HfstTransducer const *)arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,arg3,arg4);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = hfst_HfstTransducer__lookup_fd_vector__SWIG_0((hfst::HfstTransducer const *)arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,arg3);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_fd_vector" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = hfst_HfstTransducer__lookup_fd_vector__SWIG_0((hfst::HfstTransducer const *)arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_vector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__lookup_fd_vector", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer__lookup_fd_vector__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer__lookup_fd_vector__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::vector< std::string,std::allocator< std::string > >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer__lookup_fd_vector__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__lookup_fd_vector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_lookup_fd_vector(hfst::StringVector const &,int,double) const\n"
    "    hfst::HfstTransducer::_lookup_fd_vector(hfst::StringVector const &,int) const\n"
    "    hfst::HfstTransducer::_lookup_fd_vector(hfst::StringVector const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_fd_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    result = hfst_HfstTransducer__lookup_fd_string__SWIG_0((hfst::HfstTransducer const *)arg1,(std::string const &)*arg2,arg3,arg4);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_fd_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = hfst_HfstTransducer__lookup_fd_string__SWIG_0((hfst::HfstTransducer const *)arg1,(std::string const &)*arg2,arg3);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_string__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_fd_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_fd_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = hfst_HfstTransducer__lookup_fd_string__SWIG_0((hfst::HfstTransducer const *)arg1,(std::string const &)*arg2);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_fd_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__lookup_fd_string", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer__lookup_fd_string__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer__lookup_fd_string__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer__lookup_fd_string__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__lookup_fd_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_lookup_fd_string(std::string const &,int,double) const\n"
    "    hfst::HfstTransducer::_lookup_fd_string(std::string const &,int) const\n"
    "    hfst::HfstTransducer::_lookup_fd_string(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_string__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_string" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_string" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstTransducer__lookup_string" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    result = hfst_HfstTransducer__lookup_string__SWIG_0((hfst::HfstTransducer const *)arg1,(std::string const &)*arg2,arg3,arg4);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_string__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_string" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstTransducer__lookup_string" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    result = hfst_HfstTransducer__lookup_string__SWIG_0((hfst::HfstTransducer const *)arg1,(std::string const &)*arg2,arg3);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_string__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = (hfst::HfstTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  hfst::HfstOneLevelPaths result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTransducer__lookup_string" "', argument " "1"" of type '" "hfst::HfstTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTransducer__lookup_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTransducer__lookup_string" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = hfst_HfstTransducer__lookup_string__SWIG_0((hfst::HfstTransducer const *)arg1,(std::string const &)*arg2);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  } catch(FunctionNotImplementedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new FunctionNotImplementedException(static_cast< const FunctionNotImplementedException& >(_e))),SWIGTYPE_p_FunctionNotImplementedException,SWIG_POINTER_OWN), "FunctionNotImplementedException", SWIGTYPE_p_FunctionNotImplementedException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTransducer__lookup_string(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTransducer__lookup_string", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTransducer__lookup_string__SWIG_2(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstTransducer__lookup_string__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstTransducer__lookup_string__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTransducer__lookup_string'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTransducer::_lookup_string(std::string const &,int,double) const\n"
    "    hfst::HfstTransducer::_lookup_string(std::string const &,int) const\n"
    "    hfst::HfstTransducer::_lookup_string(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *HfstTransducer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__HfstTransducer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTransducer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_create_hfst_output_stream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  hfst::ImplementationType arg2 ;
  bool arg3 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  hfst::HfstOutputStream *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "create_hfst_output_stream", 3, 3, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "create_hfst_output_stream" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "create_hfst_output_stream" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "create_hfst_output_stream" "', argument " "2"" of type '" "hfst::ImplementationType""'");
  } 
  arg2 = static_cast< hfst::ImplementationType >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "create_hfst_output_stream" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (hfst::HfstOutputStream *)hfst::create_hfst_output_stream((std::string const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstOutputStream, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstOutputStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstOutputStream *arg1 = (hfst::HfstOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstOutputStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstOutputStream" "', argument " "1"" of type '" "hfst::HfstOutputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstOutputStream * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOutputStream_flush(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstOutputStream *arg1 = (hfst::HfstOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstOutputStream *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOutputStream_flush" "', argument " "1"" of type '" "hfst::HfstOutputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstOutputStream * >(argp1);
  result = (hfst::HfstOutputStream *) &(arg1)->flush();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstOutputStream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOutputStream_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstOutputStream *arg1 = (hfst::HfstOutputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOutputStream_close" "', argument " "1"" of type '" "hfst::HfstOutputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstOutputStream * >(argp1);
  (arg1)->close();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstOutputStream_redirect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstOutputStream *arg1 = (hfst::HfstOutputStream *) 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::HfstOutputStream *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstOutputStream_redirect", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstOutputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstOutputStream_redirect" "', argument " "1"" of type '" "hfst::HfstOutputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstOutputStream * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstOutputStream_redirect" "', argument " "2"" of type '" "hfst::HfstTransducer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstOutputStream_redirect" "', argument " "2"" of type '" "hfst::HfstTransducer &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  try {
    result = (hfst::HfstOutputStream *) &(arg1)->redirect(*arg2);
  } catch(StreamIsClosedException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new StreamIsClosedException(static_cast< const StreamIsClosedException& >(_e))),SWIGTYPE_p_StreamIsClosedException,SWIG_POINTER_OWN), "StreamIsClosedException", SWIGTYPE_p_StreamIsClosedException); SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstOutputStream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstOutputStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstOutputStream *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_HfstOutputStream", 0, 0, 0)) SWIG_fail;
  result = (hfst::HfstOutputStream *)new_hfst_HfstOutputStream();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstOutputStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstOutputStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__HfstOutputStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstOutputStream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstInputStream__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  try {
    result = (hfst::HfstInputStream *)new hfst::HfstInputStream();
  } catch(StreamNotReadableException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new StreamNotReadableException(static_cast< const StreamNotReadableException& >(_e))),SWIGTYPE_p_StreamNotReadableException,SWIG_POINTER_OWN), "StreamNotReadableException", SWIGTYPE_p_StreamNotReadableException); SWIG_fail;
  } catch(NotTransducerStreamException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new NotTransducerStreamException(static_cast< const NotTransducerStreamException& >(_e))),SWIGTYPE_p_NotTransducerStreamException,SWIG_POINTER_OWN), "NotTransducerStreamException", SWIGTYPE_p_NotTransducerStreamException); SWIG_fail;
  } catch(EndOfStreamException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new EndOfStreamException(static_cast< const EndOfStreamException& >(_e))),SWIGTYPE_p_EndOfStreamException,SWIG_POINTER_OWN), "EndOfStreamException", SWIGTYPE_p_EndOfStreamException); SWIG_fail;
  } catch(TransducerHeaderException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerHeaderException(static_cast< const TransducerHeaderException& >(_e))),SWIGTYPE_p_TransducerHeaderException,SWIG_POINTER_OWN), "TransducerHeaderException", SWIGTYPE_p_TransducerHeaderException); SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstInputStream, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstInputStream__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  hfst::HfstInputStream *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstInputStream" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstInputStream" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  try {
    result = (hfst::HfstInputStream *)new hfst::HfstInputStream((std::string const &)*arg1);
  } catch(StreamNotReadableException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new StreamNotReadableException(static_cast< const StreamNotReadableException& >(_e))),SWIGTYPE_p_StreamNotReadableException,SWIG_POINTER_OWN), "StreamNotReadableException", SWIGTYPE_p_StreamNotReadableException); SWIG_fail;
  } catch(NotTransducerStreamException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new NotTransducerStreamException(static_cast< const NotTransducerStreamException& >(_e))),SWIGTYPE_p_NotTransducerStreamException,SWIG_POINTER_OWN), "NotTransducerStreamException", SWIGTYPE_p_NotTransducerStreamException); SWIG_fail;
  } catch(EndOfStreamException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new EndOfStreamException(static_cast< const EndOfStreamException& >(_e))),SWIGTYPE_p_EndOfStreamException,SWIG_POINTER_OWN), "EndOfStreamException", SWIGTYPE_p_EndOfStreamException); SWIG_fail;
  } catch(TransducerHeaderException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerHeaderException(static_cast< const TransducerHeaderException& >(_e))),SWIGTYPE_p_TransducerHeaderException,SWIG_POINTER_OWN), "TransducerHeaderException", SWIGTYPE_p_TransducerHeaderException); SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstInputStream, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstInputStream(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstInputStream", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstInputStream__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstInputStream__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstInputStream'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstInputStream::HfstInputStream()\n"
    "    hfst::HfstInputStream::HfstInputStream(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HfstInputStream(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *arg1 = (hfst::HfstInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstInputStream, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstInputStream" "', argument " "1"" of type '" "hfst::HfstInputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstInputStream * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstInputStream_close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *arg1 = (hfst::HfstInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstInputStream_close" "', argument " "1"" of type '" "hfst::HfstInputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstInputStream * >(argp1);
  (arg1)->close();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstInputStream_is_eof(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *arg1 = (hfst::HfstInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstInputStream_is_eof" "', argument " "1"" of type '" "hfst::HfstInputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstInputStream * >(argp1);
  result = (bool)(arg1)->is_eof();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstInputStream_is_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *arg1 = (hfst::HfstInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstInputStream_is_bad" "', argument " "1"" of type '" "hfst::HfstInputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstInputStream * >(argp1);
  result = (bool)(arg1)->is_bad();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstInputStream_is_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *arg1 = (hfst::HfstInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstInputStream_is_good" "', argument " "1"" of type '" "hfst::HfstInputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstInputStream * >(argp1);
  result = (bool)(arg1)->is_good();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstInputStream_get_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *arg1 = (hfst::HfstInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::ImplementationType result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstInputStream_get_type" "', argument " "1"" of type '" "hfst::HfstInputStream const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstInputStream * >(argp1);
  try {
    result = (hfst::ImplementationType)((hfst::HfstInputStream const *)arg1)->get_type();
  } catch(TransducerTypeMismatchException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerTypeMismatchException(static_cast< const TransducerTypeMismatchException& >(_e))),SWIGTYPE_p_TransducerTypeMismatchException,SWIG_POINTER_OWN), "TransducerTypeMismatchException", SWIGTYPE_p_TransducerTypeMismatchException); SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstInputStream_read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstInputStream *arg1 = (hfst::HfstInputStream *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstInputStream, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstInputStream_read" "', argument " "1"" of type '" "hfst::HfstInputStream *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstInputStream * >(argp1);
  try {
    result = (hfst::HfstTransducer *)hfst_HfstInputStream_read(arg1);
  } catch(EndOfStreamException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new EndOfStreamException(static_cast< const EndOfStreamException& >(_e))),SWIGTYPE_p_EndOfStreamException,SWIG_POINTER_OWN), "EndOfStreamException", SWIGTYPE_p_EndOfStreamException); SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstInputStream_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__HfstInputStream, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstInputStream_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstTokenizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTokenizer *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_HfstTokenizer", 0, 0, 0)) SWIG_fail;
  result = (hfst::HfstTokenizer *)new hfst::HfstTokenizer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTokenizer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_add_skip_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTokenizer *arg1 = (hfst::HfstTokenizer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTokenizer_add_skip_symbol", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTokenizer_add_skip_symbol" "', argument " "1"" of type '" "hfst::HfstTokenizer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTokenizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTokenizer_add_skip_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_add_skip_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_skip_symbol((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_add_multichar_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTokenizer *arg1 = (hfst::HfstTokenizer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTokenizer_add_multichar_symbol", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTokenizer_add_multichar_symbol" "', argument " "1"" of type '" "hfst::HfstTokenizer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTokenizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTokenizer_add_multichar_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_add_multichar_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_multichar_symbol((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_tokenize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTokenizer *arg1 = (hfst::HfstTokenizer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  hfst::StringPairVector result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTokenizer_tokenize" "', argument " "1"" of type '" "hfst::HfstTokenizer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTokenizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTokenizer_tokenize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_tokenize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((hfst::HfstTokenizer const *)arg1)->tokenize((std::string const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_tokenize_one_level(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTokenizer *arg1 = (hfst::HfstTokenizer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  hfst::StringVector result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstTokenizer_tokenize_one_level", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTokenizer_tokenize_one_level" "', argument " "1"" of type '" "hfst::HfstTokenizer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTokenizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTokenizer_tokenize_one_level" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_tokenize_one_level" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((hfst::HfstTokenizer const *)arg1)->tokenize_one_level((std::string const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< std::string,std::allocator< std::string > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_tokenize_space_separated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  hfst::StringPairVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTokenizer_tokenize_space_separated" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_tokenize_space_separated" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = hfst::HfstTokenizer::tokenize_space_separated((std::string const &)*arg1);
  resultobj = swig::from(static_cast< std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_tokenize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTokenizer *arg1 = (hfst::HfstTokenizer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  hfst::StringPairVector result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTokenizer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTokenizer_tokenize" "', argument " "1"" of type '" "hfst::HfstTokenizer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTokenizer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstTokenizer_tokenize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_tokenize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstTokenizer_tokenize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_tokenize" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = ((hfst::HfstTokenizer const *)arg1)->tokenize((std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = swig::from(static_cast< std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_tokenize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstTokenizer_tokenize", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTokenizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstTokenizer_tokenize__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__HfstTokenizer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstTokenizer_tokenize__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstTokenizer_tokenize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::HfstTokenizer::tokenize(std::string const &) const\n"
    "    hfst::HfstTokenizer::tokenize(std::string const &,std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstTokenizer_check_utf8_correctness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstTokenizer_check_utf8_correctness" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstTokenizer_check_utf8_correctness" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  hfst::HfstTokenizer::check_utf8_correctness((std::string const &)*arg1);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HfstTokenizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTokenizer *arg1 = (hfst::HfstTokenizer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__HfstTokenizer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstTokenizer" "', argument " "1"" of type '" "hfst::HfstTokenizer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTokenizer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstTokenizer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__HfstTokenizer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstTokenizer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstBasicTransducer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst::implementations::HfstBasicTransducer *)new hfst::implementations::HfstBasicTransducer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransducer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::implementations::HfstBasicTransducer *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstBasicTransducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstBasicTransducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (hfst::implementations::HfstBasicTransducer *)new hfst::implementations::HfstBasicTransducer((hfst::implementations::HfstBasicTransducer const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransducer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::implementations::HfstBasicTransducer *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HfstBasicTransducer" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HfstBasicTransducer" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  result = (hfst::implementations::HfstBasicTransducer *)new hfst::implementations::HfstBasicTransducer((hfst::HfstTransducer const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransducer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstBasicTransducer", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstBasicTransducer__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstBasicTransducer__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_HfstBasicTransducer__SWIG_2(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstBasicTransducer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransducer::HfstBasicTransducer()\n"
    "    hfst::implementations::HfstBasicTransducer::HfstBasicTransducer(hfst::implementations::HfstBasicTransducer const &)\n"
    "    hfst::implementations::HfstBasicTransducer::HfstBasicTransducer(hfst::HfstTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_name_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_name_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_name_set" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_name_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->name = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_name_get" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (std::string *) & ((arg1)->name);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_symbol_to_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_add_symbol_to_alphabet", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_symbol_to_alphabet" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_add_symbol_to_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_add_symbol_to_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_symbol_to_alphabet((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_remove_symbol_from_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_remove_symbol_from_alphabet", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_remove_symbol_from_alphabet" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_remove_symbol_from_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_remove_symbol_from_alphabet" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->remove_symbol_from_alphabet((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_remove_symbols_from_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_remove_symbols_from_alphabet", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_remove_symbols_from_alphabet" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::set< std::string,std::less< std::string >,std::allocator< std::string > > *ptr = (std::set< std::string,std::less< std::string >,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_remove_symbols_from_alphabet" "', argument " "2"" of type '" "hfst::StringSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_remove_symbols_from_alphabet" "', argument " "2"" of type '" "hfst::StringSet const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->remove_symbols_from_alphabet((hfst::StringSet const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_symbols_to_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringSet *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_add_symbols_to_alphabet", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_symbols_to_alphabet" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::set< std::string,std::less< std::string >,std::allocator< std::string > > *ptr = (std::set< std::string,std::less< std::string >,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_add_symbols_to_alphabet" "', argument " "2"" of type '" "hfst::StringSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_add_symbols_to_alphabet" "', argument " "2"" of type '" "hfst::StringSet const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->add_symbols_to_alphabet((hfst::StringSet const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_symbols_used(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string,std::less< std::string >,std::allocator< std::string > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_symbols_used" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (arg1)->symbols_used();
  resultobj = swig::from(static_cast< std::set< std::string,std::less< std::string >,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_prune_alphabet__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_prune_alphabet" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_prune_alphabet" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->prune_alphabet(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_prune_alphabet__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_prune_alphabet" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  (arg1)->prune_alphabet();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_prune_alphabet(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_prune_alphabet", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HfstBasicTransducer_prune_alphabet__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstBasicTransducer_prune_alphabet__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransducer_prune_alphabet'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransducer::prune_alphabet(bool)\n"
    "    hfst::implementations::HfstBasicTransducer::prune_alphabet()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_alphabet(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::set< std::string,std::less< std::string >,std::allocator< std::string > > *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_alphabet" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (std::set< std::string,std::less< std::string >,std::allocator< std::string > > *) &((hfst::implementations::HfstBasicTransducer const *)arg1)->get_alphabet();
  resultobj = swig::from(static_cast< std::set< std::string,std::less< std::string >,std::allocator< std::string > > >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_input_symbols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::StringSet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_input_symbols" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = ((hfst::implementations::HfstBasicTransducer const *)arg1)->get_input_symbols();
  resultobj = swig::from(static_cast< std::set< std::string,std::less< std::string >,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_output_symbols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::StringSet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_output_symbols" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = ((hfst::implementations::HfstBasicTransducer const *)arg1)->get_output_symbols();
  resultobj = swig::from(static_cast< std::set< std::string,std::less< std::string >,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_transition_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::StringPairSet result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_transition_pairs" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = ((hfst::implementations::HfstBasicTransducer const *)arg1)->get_transition_pairs();
  resultobj = swig::from(static_cast< std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_state__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  hfst::implementations::HfstState result;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_state" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (hfst::implementations::HfstState)(arg1)->add_state();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_state__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  hfst::implementations::HfstState result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_state" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_add_state" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  result = (hfst::implementations::HfstState)(arg1)->add_state(arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_state(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_add_state", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_HfstBasicTransducer_add_state__SWIG_0(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_HfstBasicTransducer_add_state__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransducer_add_state'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransducer::add_state()\n"
    "    hfst::implementations::HfstBasicTransducer::add_state(hfst::implementations::HfstState)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_max_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::implementations::HfstState result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_max_state" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (hfst::implementations::HfstState)((hfst::implementations::HfstBasicTransducer const *)arg1)->get_max_state();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_states(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::vector< hfst::implementations::HfstState,std::allocator< hfst::implementations::HfstState > > result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_states" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = ((hfst::implementations::HfstBasicTransducer const *)arg1)->states();
  resultobj = swig::from(static_cast< std::vector< unsigned int,std::allocator< unsigned int > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_transition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  hfst::implementations::HfstBasicTransition *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_transition" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_add_transition" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer_add_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_add_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  arg3 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstBasicTransducer_add_transition" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->add_transition(arg2,(hfst::implementations::HfstBasicTransition const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_transition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  hfst::implementations::HfstBasicTransition *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_transition" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_add_transition" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer_add_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_add_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  arg3 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp3);
  (arg1)->add_transition(arg2,(hfst::implementations::HfstBasicTransition const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_remove_transition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  hfst::implementations::HfstBasicTransition *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_remove_transition" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_remove_transition" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer_remove_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_remove_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  arg3 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstBasicTransducer_remove_transition" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  (arg1)->remove_transition(arg2,(hfst::implementations::HfstBasicTransition const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_remove_transition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  hfst::implementations::HfstBasicTransition *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_remove_transition" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_remove_transition" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransition,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer_remove_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_remove_transition" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransition const &""'"); 
  }
  arg3 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp3);
  (arg1)->remove_transition(arg2,(hfst::implementations::HfstBasicTransition const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_remove_transition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_remove_transition", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstBasicTransducer_remove_transition__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstBasicTransducer_remove_transition__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransducer_remove_transition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransducer::remove_transition(hfst::implementations::HfstState,hfst::implementations::HfstBasicTransition const &,bool)\n"
    "    hfst::implementations::HfstBasicTransducer::remove_transition(hfst::implementations::HfstState,hfst::implementations::HfstBasicTransition const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_is_final_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_is_final_state", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_is_final_state" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_is_final_state" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  result = (bool)((hfst::implementations::HfstBasicTransducer const *)arg1)->is_final_state(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_final_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  float result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_get_final_weight", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_final_weight" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_get_final_weight" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  try {
    result = (float)((hfst::implementations::HfstBasicTransducer const *)arg1)->get_final_weight(arg2);
  } catch(StateIsNotFinalException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new StateIsNotFinalException(static_cast< const StateIsNotFinalException& >(_e))),SWIGTYPE_p_StateIsNotFinalException,SWIG_POINTER_OWN), "StateIsNotFinalException", SWIGTYPE_p_StateIsNotFinalException); SWIG_fail;
  } catch(StateIndexOutOfBoundsException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new StateIndexOutOfBoundsException(static_cast< const StateIndexOutOfBoundsException& >(_e))),SWIGTYPE_p_StateIndexOutOfBoundsException,SWIG_POINTER_OWN), "StateIndexOutOfBoundsException", SWIGTYPE_p_StateIndexOutOfBoundsException); SWIG_fail;
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_set_final_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  float *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_set_final_weight", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_set_final_weight" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_set_final_weight" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransducer_set_final_weight" "', argument " "3"" of type '" "float""'");
  } 
  temp3 = static_cast< float >(val3);
  arg3 = &temp3;
  (arg1)->set_final_weight(arg2,(float const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_remove_final_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_remove_final_weight", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_remove_final_weight" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_remove_final_weight" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  (arg1)->remove_final_weight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__transitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::implementations::HfstBasicTransitions *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__transitions", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__transitions" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer__transitions" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  result = (hfst::implementations::HfstBasicTransitions *) &(arg1)->transitions(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_is_infinitely_ambiguous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_is_infinitely_ambiguous" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (bool)(arg1)->is_infinitely_ambiguous();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_is_lookup_infinitely_ambiguous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_is_lookup_infinitely_ambiguous", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_is_lookup_infinitely_ambiguous" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_is_lookup_infinitely_ambiguous" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_is_lookup_infinitely_ambiguous" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->is_lookup_infinitely_ambiguous((hfst::StringVector const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_longest_path_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  int result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_longest_path_size" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (int)(arg1)->longest_path_size();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  hfst_implementations_HfstBasicTransducer__substitute_symbol__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  bool val4 ;
  int ecode4 = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  hfst_implementations_HfstBasicTransducer__substitute_symbol__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  hfst_implementations_HfstBasicTransducer__substitute_symbol__SWIG_0(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__substitute_symbol", 0, 5, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstBasicTransducer__substitute_symbol__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstBasicTransducer__substitute_symbol__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_HfstBasicTransducer__substitute_symbol__SWIG_0(self, argc, argv);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransducer__substitute_symbol'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransducer::_substitute_symbol(std::string const &,std::string const &,bool,bool)\n"
    "    hfst::implementations::HfstBasicTransducer::_substitute_symbol(std::string const &,std::string const &,bool)\n"
    "    hfst::implementations::HfstBasicTransducer::_substitute_symbol(std::string const &,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol_pair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  hfst::StringPair *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__substitute_symbol_pair", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbol_pair" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbol_pair" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol_pair" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer__substitute_symbol_pair" "', argument " "3"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol_pair" "', argument " "3"" of type '" "hfst::StringPair const &""'"); 
    }
    arg3 = ptr;
  }
  hfst_implementations_HfstBasicTransducer__substitute_symbol_pair(arg1,(std::pair< std::string,std::string > const &)*arg2,(std::pair< std::string,std::string > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol_pair_with_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__substitute_symbol_pair_with_set", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_set" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_set" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_set" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_set" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_set" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  hfst_implementations_HfstBasicTransducer__substitute_symbol_pair_with_set(arg1,(std::pair< std::string,std::string > const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol_pair_with_transducer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  hfst::implementations::HfstBasicTransducer *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__substitute_symbol_pair_with_transducer", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_transducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_transducer" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_transducer" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_transducer" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransducer &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol_pair_with_transducer" "', argument " "3"" of type '" "hfst::implementations::HfstBasicTransducer &""'"); 
  }
  arg3 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp3);
  hfst_implementations_HfstBasicTransducer__substitute_symbol_pair_with_transducer(arg1,(std::pair< std::string,std::string > const &)*arg2,*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::HfstSymbolSubstitutions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__substitute_symbols", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbols" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *ptr = (std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbols" "', argument " "2"" of type '" "hfst::HfstSymbolSubstitutions const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbols" "', argument " "2"" of type '" "hfst::HfstSymbolSubstitutions const &""'"); 
    }
    arg2 = ptr;
  }
  hfst_implementations_HfstBasicTransducer__substitute_symbols(arg1,(std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__substitute_symbol_pairs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::HfstSymbolPairSubstitutions *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__substitute_symbol_pairs", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__substitute_symbol_pairs" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > *ptr = (std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__substitute_symbol_pairs" "', argument " "2"" of type '" "hfst::HfstSymbolPairSubstitutions const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__substitute_symbol_pairs" "', argument " "2"" of type '" "hfst::HfstSymbolPairSubstitutions const &""'"); 
    }
    arg2 = ptr;
  }
  hfst_implementations_HfstBasicTransducer__substitute_symbol_pairs(arg1,(std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_insert_freely__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringPair *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_insert_freely" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::pair< std::string,std::string > *ptr = (std::pair< std::string,std::string > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_insert_freely" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_insert_freely" "', argument " "2"" of type '" "hfst::StringPair const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransducer_insert_freely" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  hfst_implementations_HfstBasicTransducer_insert_freely__SWIG_0(arg1,(std::pair< std::string,std::string > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_insert_freely__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstBasicTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_insert_freely" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_insert_freely" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_insert_freely" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp2);
  hfst_implementations_HfstBasicTransducer_insert_freely__SWIG_1(arg1,(hfst::implementations::HfstBasicTransducer const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_insert_freely(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_insert_freely", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_HfstBasicTransducer_insert_freely__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = swig::asptr(argv[1], (std::pair< std::string,std::string >**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_HfstBasicTransducer_insert_freely__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransducer_insert_freely'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransducer::insert_freely(hfst::StringPair const &,float)\n"
    "    hfst::implementations::HfstBasicTransducer::insert_freely(hfst::implementations::HfstBasicTransducer const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_sort_arcs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_sort_arcs" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  hfst_implementations_HfstBasicTransducer_sort_arcs(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_disjunct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringPairVector *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_disjunct", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_disjunct" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_disjunct" "', argument " "2"" of type '" "hfst::StringPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_disjunct" "', argument " "2"" of type '" "hfst::StringPairVector const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransducer_disjunct" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  hfst_implementations_HfstBasicTransducer_disjunct(arg1,(std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > const &)*arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_harmonize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstBasicTransducer *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_harmonize", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_harmonize" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer_harmonize" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer_harmonize" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer &""'"); 
  }
  arg2 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp2);
  hfst_implementations_HfstBasicTransducer_harmonize(arg1,*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer__lookup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::StringVector *arg2 = 0 ;
  size_t *arg3 = (size_t *) 0 ;
  float *arg4 = (float *) 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  hfst::HfstTwoLevelPaths result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer__lookup", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer__lookup" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransducer__lookup" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransducer__lookup" "', argument " "2"" of type '" "hfst::StringVector const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3,SWIGTYPE_p_size_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "HfstBasicTransducer__lookup" "', argument " "3"" of type '" "size_t *""'"); 
  }
  arg3 = reinterpret_cast< size_t * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "HfstBasicTransducer__lookup" "', argument " "4"" of type '" "float *""'"); 
  }
  arg4 = reinterpret_cast< float * >(argp4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HfstBasicTransducer__lookup" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  try {
    result = hfst_implementations_HfstBasicTransducer__lookup(arg1,(std::vector< std::string,std::allocator< std::string > > const &)*arg2,arg3,arg4,arg5);
  } catch(TransducerIsCyclicException &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new TransducerIsCyclicException(static_cast< const TransducerIsCyclicException& >(_e))),SWIGTYPE_p_TransducerIsCyclicException,SWIG_POINTER_OWN), "TransducerIsCyclicException", SWIGTYPE_p_TransducerIsCyclicException); SWIG_fail;
  }
  resultobj = swig::from(static_cast< std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_prolog_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_get_prolog_string", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_prolog_string" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_get_prolog_string" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst_implementations_HfstBasicTransducer_get_prolog_string(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_xfst_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_get_xfst_string", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_xfst_string" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_get_xfst_string" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst_implementations_HfstBasicTransducer_get_xfst_string(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_get_att_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_get_att_string", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_get_att_string" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_get_att_string" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = hfst_implementations_HfstBasicTransducer_get_att_string(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer___str__" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  result = (char *)hfst_implementations_HfstBasicTransducer___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_transition__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  hfst::implementations::HfstState arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  float arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  float val6 ;
  int ecode6 = 0 ;
  
  if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_transition" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_add_transition" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransducer_add_transition" "', argument " "3"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg3 = static_cast< hfst::implementations::HfstState >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstBasicTransducer_add_transition" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstBasicTransducer_add_transition" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HfstBasicTransducer_add_transition" "', argument " "6"" of type '" "float""'");
  } 
  arg6 = static_cast< float >(val6);
  hfst_implementations_HfstBasicTransducer_add_transition__SWIG_2(arg1,arg2,arg3,arg4,arg5,arg6);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_transition__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  hfst::implementations::HfstState arg2 ;
  hfst::implementations::HfstState arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransducer_add_transition" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransducer_add_transition" "', argument " "2"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg2 = static_cast< hfst::implementations::HfstState >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HfstBasicTransducer_add_transition" "', argument " "3"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg3 = static_cast< hfst::implementations::HfstState >(val3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstBasicTransducer_add_transition" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[4], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HfstBasicTransducer_add_transition" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  hfst_implementations_HfstBasicTransducer_add_transition__SWIG_2(arg1,arg2,arg3,arg4,arg5);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransducer_add_transition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "HfstBasicTransducer_add_transition", 0, 6, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_HfstBasicTransducer_add_transition__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_HfstBasicTransducer_add_transition__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_HfstBasicTransducer_add_transition__SWIG_3(self, argc, argv);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                int res = SWIG_AsVal_float(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_HfstBasicTransducer_add_transition__SWIG_2(self, argc, argv);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'HfstBasicTransducer_add_transition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransducer::add_transition(hfst::implementations::HfstState,hfst::implementations::HfstBasicTransition const &,bool)\n"
    "    hfst::implementations::HfstBasicTransducer::add_transition(hfst::implementations::HfstState,hfst::implementations::HfstBasicTransition const &)\n"
    "    hfst::implementations::HfstBasicTransducer::add_transition(hfst::implementations::HfstState,hfst::implementations::HfstState,std::string,std::string,float)\n"
    "    hfst::implementations::HfstBasicTransducer::add_transition(hfst::implementations::HfstState,hfst::implementations::HfstState,std::string,std::string)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HfstBasicTransducer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransducer *arg1 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstBasicTransducer" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstBasicTransducer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstBasicTransducer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_HfstBasicTransition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst::implementations::HfstBasicTransition *)new hfst::implementations::HfstBasicTransition();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstState arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  float arg4 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  hfst::implementations::HfstBasicTransition *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_HfstBasicTransition" "', argument " "1"" of type '" "hfst::implementations::HfstState""'");
  } 
  arg1 = static_cast< hfst::implementations::HfstState >(val1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HfstBasicTransition" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HfstBasicTransition" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_HfstBasicTransition" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = (hfst::implementations::HfstBasicTransition *)new hfst::implementations::HfstBasicTransition(arg1,arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HfstBasicTransition(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_HfstBasicTransition", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_HfstBasicTransition__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_HfstBasicTransition__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_HfstBasicTransition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::implementations::HfstBasicTransition::HfstBasicTransition()\n"
    "    hfst::implementations::HfstBasicTransition::HfstBasicTransition(hfst::implementations::HfstState,std::string,std::string,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_HfstBasicTransition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HfstBasicTransition" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition_get_target_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  hfst::implementations::HfstState result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition_get_target_state" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  result = (hfst::implementations::HfstState)((hfst::implementations::HfstBasicTransition const *)arg1)->get_target_state();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition_get_input_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition_get_input_symbol" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  result = ((hfst::implementations::HfstBasicTransition const *)arg1)->get_input_symbol();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition_set_input_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransition_set_input_symbol", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition_set_input_symbol" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransition_set_input_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransition_set_input_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_input_symbol((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition_get_output_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition_get_output_symbol" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  result = ((hfst::implementations::HfstBasicTransition const *)arg1)->get_output_symbol();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition_set_output_symbol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransition_set_output_symbol", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition_set_output_symbol" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HfstBasicTransition_set_output_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HfstBasicTransition_set_output_symbol" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->set_output_symbol((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition_get_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  float result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition_get_weight" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  result = (float)((hfst::implementations::HfstBasicTransition const *)arg1)->get_weight();
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition_set_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "HfstBasicTransition_set_weight", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition_set_weight" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HfstBasicTransition_set_weight" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  (arg1)->set_weight(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HfstBasicTransition___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::implementations::HfstBasicTransition *arg1 = (hfst::implementations::HfstBasicTransition *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__implementations__HfstBasicTransition, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HfstBasicTransition___str__" "', argument " "1"" of type '" "hfst::implementations::HfstBasicTransition *""'"); 
  }
  arg1 = reinterpret_cast< hfst::implementations::HfstBasicTransition * >(argp1);
  result = (char *)hfst_implementations_HfstBasicTransition___str__(arg1);
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *HfstBasicTransition_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__implementations__HfstBasicTransition, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *HfstBasicTransition_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_XreCompiler__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst::xre::XreCompiler *)new hfst::xre::XreCompiler();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xre__XreCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XreCompiler__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::ImplementationType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  hfst::xre::XreCompiler *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XreCompiler" "', argument " "1"" of type '" "hfst::ImplementationType""'");
  } 
  arg1 = static_cast< hfst::ImplementationType >(val1);
  result = (hfst::xre::XreCompiler *)new hfst::xre::XreCompiler(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xre__XreCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XreCompiler(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_XreCompiler", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_XreCompiler__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XreCompiler__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_XreCompiler'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xre::XreCompiler::XreCompiler()\n"
    "    hfst::xre::XreCompiler::XreCompiler(hfst::ImplementationType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XreCompiler_define_list(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  std::set< std::string,std::less< std::string >,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_define_list", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_define_list" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_define_list" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_list" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::set< std::string,std::less< std::string >,std::allocator< std::string > > *ptr = (std::set< std::string,std::less< std::string >,std::allocator< std::string > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XreCompiler_define_list" "', argument " "3"" of type '" "std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_list" "', argument " "3"" of type '" "std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->define_list((std::string const &)*arg2,(std::set< std::string,std::less< std::string >,std::allocator< std::string > > const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_define_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  unsigned int arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_define_function", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_define_function" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_define_function" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_function" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "XreCompiler_define_function" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "XreCompiler_define_function" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_function" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (bool)(arg1)->define_function((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_is_definition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_is_definition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_is_definition" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_is_definition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_is_definition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->is_definition((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_is_function_definition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_is_function_definition", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_is_function_definition" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_is_function_definition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_is_function_definition" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)(arg1)->is_function_definition((std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_undefine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_undefine", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_undefine" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_undefine" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_undefine" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->undefine((std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_compile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_compile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_compile" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_compile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_compile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (hfst::HfstTransducer *)(arg1)->compile((std::string const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_set_verbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_set_verbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_set_verbosity" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XreCompiler_set_verbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_verbosity(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_getOutputToConsole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_getOutputToConsole" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  result = (bool)(arg1)->getOutputToConsole();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_set_expand_definitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_set_expand_definitions", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_set_expand_definitions" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XreCompiler_set_expand_definitions" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_expand_definitions(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_set_harmonization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_set_harmonization", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_set_harmonization" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XreCompiler_set_harmonization" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_harmonization(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_contained_only_comments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_contained_only_comments" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  result = (bool)(arg1)->contained_only_comments();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_define_xre(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_define_xre", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_define_xre" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_define_xre" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_xre" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XreCompiler_define_xre" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_xre" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  hfst_xre_XreCompiler_define_xre(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_define_transducer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  hfst::HfstTransducer *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_define_transducer", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_define_transducer" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_define_transducer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_transducer" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XreCompiler_define_transducer" "', argument " "3"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_define_transducer" "', argument " "3"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg3 = reinterpret_cast< hfst::HfstTransducer * >(argp3);
  hfst_xre_XreCompiler_define_transducer(arg1,(std::string const &)*arg2,(hfst::HfstTransducer const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_setOutputToConsole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_setOutputToConsole", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_setOutputToConsole" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XreCompiler_setOutputToConsole" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  hfst_xre_XreCompiler_setOutputToConsole(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XreCompiler_compile_first(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject *swig_obj[2] ;
  hfst::HfstTransducerUIntPair result;
  
  if (!SWIG_Python_UnpackTuple(args, "XreCompiler_compile_first", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XreCompiler_compile_first" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XreCompiler_compile_first" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "XreCompiler_compile_first" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = hfst_xre_XreCompiler_compile_first(arg1,(std::string const &)*arg2);
  resultobj = swig::from(static_cast< std::pair< hfst::HfstTransducer*,unsigned int > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_XreCompiler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = (hfst::xre::XreCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xre__XreCompiler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XreCompiler" "', argument " "1"" of type '" "hfst::xre::XreCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *XreCompiler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__xre__XreCompiler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *XreCompiler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_LexcCompiler__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::lexc::LexcCompiler *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst::lexc::LexcCompiler *)new hfst::lexc::LexcCompiler();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__lexc__LexcCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LexcCompiler__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::ImplementationType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  hfst::lexc::LexcCompiler *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LexcCompiler" "', argument " "1"" of type '" "hfst::ImplementationType""'");
  } 
  arg1 = static_cast< hfst::ImplementationType >(val1);
  result = (hfst::lexc::LexcCompiler *)new hfst::lexc::LexcCompiler(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__lexc__LexcCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LexcCompiler__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::ImplementationType arg1 ;
  bool arg2 ;
  bool arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  hfst::lexc::LexcCompiler *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LexcCompiler" "', argument " "1"" of type '" "hfst::ImplementationType""'");
  } 
  arg1 = static_cast< hfst::ImplementationType >(val1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LexcCompiler" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_LexcCompiler" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (hfst::lexc::LexcCompiler *)new hfst::lexc::LexcCompiler(arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__lexc__LexcCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LexcCompiler(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_LexcCompiler", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_LexcCompiler__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LexcCompiler__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_LexcCompiler__SWIG_2(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LexcCompiler'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::lexc::LexcCompiler::LexcCompiler()\n"
    "    hfst::lexc::LexcCompiler::LexcCompiler(hfst::ImplementationType)\n"
    "    hfst::lexc::LexcCompiler::LexcCompiler(hfst::ImplementationType,bool,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LexcCompiler_setVerbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::lexc::LexcCompiler *arg1 = (hfst::lexc::LexcCompiler *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::lexc::LexcCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "LexcCompiler_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__lexc__LexcCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexcCompiler_setVerbosity" "', argument " "1"" of type '" "hfst::lexc::LexcCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::lexc::LexcCompiler * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LexcCompiler_setVerbosity" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (hfst::lexc::LexcCompiler *) &(arg1)->setVerbosity(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__lexc__LexcCompiler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LexcCompiler_setOutputToConsole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::lexc::LexcCompiler *arg1 = (hfst::lexc::LexcCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "LexcCompiler_setOutputToConsole", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__lexc__LexcCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LexcCompiler_setOutputToConsole" "', argument " "1"" of type '" "hfst::lexc::LexcCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::lexc::LexcCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LexcCompiler_setOutputToConsole" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setOutputToConsole(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LexcCompiler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::lexc::LexcCompiler *arg1 = (hfst::lexc::LexcCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__lexc__LexcCompiler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LexcCompiler" "', argument " "1"" of type '" "hfst::lexc::LexcCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::lexc::LexcCompiler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LexcCompiler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__lexc__LexcCompiler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *LexcCompiler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_XfstCompiler__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst::xfst::XfstCompiler *)new hfst::xfst::XfstCompiler();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XfstCompiler__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::ImplementationType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_XfstCompiler" "', argument " "1"" of type '" "hfst::ImplementationType""'");
  } 
  arg1 = static_cast< hfst::ImplementationType >(val1);
  result = (hfst::xfst::XfstCompiler *)new hfst::xfst::XfstCompiler(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_XfstCompiler(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_XfstCompiler", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_XfstCompiler__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_XfstCompiler__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_XfstCompiler'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::xfst::XfstCompiler::XfstCompiler()\n"
    "    hfst::xfst::XfstCompiler::XfstCompiler(hfst::ImplementationType)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_setOutputToConsole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_setOutputToConsole", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_setOutputToConsole" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XfstCompiler_setOutputToConsole" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (hfst::xfst::XfstCompiler *) &(arg1)->setOutputToConsole(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_setReadInteractiveTextFromStdin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_setReadInteractiveTextFromStdin", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_setReadInteractiveTextFromStdin" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XfstCompiler_setReadInteractiveTextFromStdin" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (hfst::xfst::XfstCompiler *) &(arg1)->setReadInteractiveTextFromStdin(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_setReadline(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_setReadline", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_setReadline" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XfstCompiler_setReadline" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (hfst::xfst::XfstCompiler *) &(arg1)->setReadline(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_setVerbosity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_setVerbosity", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_setVerbosity" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XfstCompiler_setVerbosity" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (hfst::xfst::XfstCompiler *) &(arg1)->setVerbosity(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject *swig_obj[3] ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_set", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_set" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XfstCompiler_set" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(swig_obj[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "XfstCompiler_set" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (hfst::xfst::XfstCompiler *) &(arg1)->set((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_get_prompt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_get_prompt" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  result = (char *)((hfst::xfst::XfstCompiler const *)arg1)->get_prompt();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_apply_up(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_apply_up", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_apply_up" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XfstCompiler_apply_up" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (hfst::xfst::XfstCompiler *) &(arg1)->apply_up((char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_apply_down(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  hfst::xfst::XfstCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_apply_down", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_apply_down" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XfstCompiler_apply_down" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (hfst::xfst::XfstCompiler *) &(arg1)->apply_down((char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_parse_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "XfstCompiler_parse_line", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_parse_line" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "XfstCompiler_parse_line" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)(arg1)->parse_line(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XfstCompiler_quit_requested(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XfstCompiler_quit_requested" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler const *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  result = (bool)((hfst::xfst::XfstCompiler const *)arg1)->quit_requested();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_XfstCompiler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = (hfst::xfst::XfstCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__xfst__XfstCompiler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XfstCompiler" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *XfstCompiler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__xfst__XfstCompiler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *XfstCompiler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_get_hfst_regex_error_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_hfst_regex_error_message", 0, 0, 0)) SWIG_fail;
  result = hfst::get_hfst_regex_error_message();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hfst_regex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xre::XreCompiler *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "hfst_regex", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xre__XreCompiler,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hfst_regex" "', argument " "1"" of type '" "hfst::xre::XreCompiler &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_regex" "', argument " "1"" of type '" "hfst::xre::XreCompiler &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xre::XreCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hfst_regex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_regex" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hfst_regex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_regex" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (hfst::HfstTransducer *)hfst::hfst_regex(*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_hfst_xfst_string_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_hfst_xfst_string_one", 0, 0, 0)) SWIG_fail;
  result = (char *)hfst::get_hfst_xfst_string_one();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_hfst_xfst_string_two(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "get_hfst_xfst_string_two", 0, 0, 0)) SWIG_fail;
  result = (char *)hfst::get_hfst_xfst_string_two();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hfst_compile_xfst_to_string_one(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[2] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "hfst_compile_xfst_to_string_one", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xfst__XfstCompiler,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hfst_compile_xfst_to_string_one" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_xfst_to_string_one" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hfst_compile_xfst_to_string_one" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (int)hfst::hfst_compile_xfst_to_string_one(*arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hfst_compile_xfst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::xfst::XfstCompiler *arg1 = 0 ;
  std::string arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "hfst_compile_xfst", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__xfst__XfstCompiler,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hfst_compile_xfst" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_xfst" "', argument " "1"" of type '" "hfst::xfst::XfstCompiler &""'"); 
  }
  arg1 = reinterpret_cast< hfst::xfst::XfstCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "hfst_compile_xfst" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hfst_compile_xfst" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_xfst" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "hfst_compile_xfst" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_xfst" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  result = (int)hfst::hfst_compile_xfst(*arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_hfst_lexc_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_hfst_lexc_output", 0, 0, 0)) SWIG_fail;
  result = hfst::get_hfst_lexc_output();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hfst_compile_lexc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::lexc::LexcCompiler *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "hfst_compile_lexc", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__lexc__LexcCompiler,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hfst_compile_lexc" "', argument " "1"" of type '" "hfst::lexc::LexcCompiler &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_lexc" "', argument " "1"" of type '" "hfst::lexc::LexcCompiler &""'"); 
  }
  arg1 = reinterpret_cast< hfst::lexc::LexcCompiler * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hfst_compile_lexc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_lexc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "hfst_compile_lexc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_lexc" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  result = (hfst::HfstTransducer *)hfst::hfst_compile_lexc(*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_hfst_sfst_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_hfst_sfst_output", 0, 0, 0)) SWIG_fail;
  result = hfst::get_hfst_sfst_output();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_hfst_compile_sfst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  hfst::HfstTransducer *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "hfst_compile_sfst", 4, 4, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hfst_compile_sfst" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_sfst" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hfst_compile_sfst" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "hfst_compile_sfst" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "hfst_compile_sfst" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "hfst_compile_sfst" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (hfst::HfstTransducer *)hfst::hfst_compile_sfst((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__HfstTransducer, 0 |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_one_level_paths_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstOneLevelPaths *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > *ptr = (std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "one_level_paths_to_string" "', argument " "1"" of type '" "hfst::HfstOneLevelPaths const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "one_level_paths_to_string" "', argument " "1"" of type '" "hfst::HfstOneLevelPaths const &""'"); 
    }
    arg1 = ptr;
  }
  result = hfst::one_level_paths_to_string((std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_two_level_paths_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTwoLevelPaths *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > *ptr = (std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "two_level_paths_to_string" "', argument " "1"" of type '" "hfst::HfstTwoLevelPaths const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_paths_to_string" "', argument " "1"" of type '" "hfst::HfstTwoLevelPaths const &""'"); 
    }
    arg1 = ptr;
  }
  result = hfst::two_level_paths_to_string((std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > const &)*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_prolog_network_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  hfst::implementations::HfstBasicTransducer *arg2 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "parse_prolog_network_line", 2, 2, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_prolog_network_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_prolog_network_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_prolog_network_line" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg2 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp2);
  result = (bool)hfst::parse_prolog_network_line((std::string const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_prolog_arc_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  hfst::implementations::HfstBasicTransducer *arg2 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "parse_prolog_arc_line", 2, 2, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_prolog_arc_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_prolog_arc_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_prolog_arc_line" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg2 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp2);
  result = (bool)hfst::parse_prolog_arc_line((std::string const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_prolog_symbol_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  hfst::implementations::HfstBasicTransducer *arg2 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "parse_prolog_symbol_line", 2, 2, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_prolog_symbol_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_prolog_symbol_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_prolog_symbol_line" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg2 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp2);
  result = (bool)hfst::parse_prolog_symbol_line((std::string const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parse_prolog_final_line(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  hfst::implementations::HfstBasicTransducer *arg2 = (hfst::implementations::HfstBasicTransducer *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "parse_prolog_final_line", 2, 2, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parse_prolog_final_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parse_prolog_final_line" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_hfst__implementations__HfstBasicTransducer, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parse_prolog_final_line" "', argument " "2"" of type '" "hfst::implementations::HfstBasicTransducer *""'"); 
  }
  arg2 = reinterpret_cast< hfst::implementations::HfstBasicTransducer * >(argp2);
  result = (bool)hfst::parse_prolog_final_line((std::string const &)*arg1,arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_default_fst_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::ImplementationType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "set_default_fst_type" "', argument " "1"" of type '" "hfst::ImplementationType""'");
  } 
  arg1 = static_cast< hfst::ImplementationType >(val1);
  hfst::set_default_fst_type(arg1);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_get_default_fst_type(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::ImplementationType result;
  
  if (!SWIG_Python_UnpackTuple(args, "get_default_fst_type", 0, 0, 0)) SWIG_fail;
  result = (hfst::ImplementationType)hfst::get_default_fst_type();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_fst_type_to_string(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::ImplementationType arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "fst_type_to_string" "', argument " "1"" of type '" "hfst::ImplementationType""'");
  } 
  arg1 = static_cast< hfst::ImplementationType >(val1);
  result = hfst::fst_type_to_string(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_two_level_if(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::StringPairSet *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "two_level_if", 3, 3, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "two_level_if" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_if" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "two_level_if" "', argument " "2"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_if" "', argument " "2"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "two_level_if" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_if" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::two_level_if((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_two_level_only_if(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::StringPairSet *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "two_level_only_if", 3, 3, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "two_level_only_if" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_only_if" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "two_level_only_if" "', argument " "2"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_only_if" "', argument " "2"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "two_level_only_if" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_only_if" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::two_level_only_if((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_two_level_if_and_only_if(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::StringPairSet *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "two_level_if_and_only_if", 3, 3, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "two_level_if_and_only_if" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_if_and_only_if" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res2 = swig::asptr(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "two_level_if_and_only_if" "', argument " "2"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_if_and_only_if" "', argument " "2"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "two_level_if_and_only_if" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "two_level_if_and_only_if" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::two_level_if_and_only_if((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_down__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_down" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replace_down" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "replace_down" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replace_down" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::replace_down((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_down_karttunen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "replace_down_karttunen", 4, 4, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_down_karttunen" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down_karttunen" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replace_down_karttunen" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down_karttunen" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "replace_down_karttunen" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replace_down_karttunen" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down_karttunen" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::replace_down_karttunen((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_right(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "replace_right", 4, 4, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_right" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_right" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replace_right" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_right" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "replace_right" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replace_right" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_right" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::replace_right((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_left(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "replace_left", 4, 4, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_left" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_left" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "replace_left" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_left" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "replace_left" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "replace_left" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_left" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::replace_left((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_up(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  bool arg2 ;
  hfst::StringPairSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "replace_up", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_up" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_up" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "replace_up" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replace_up" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_up" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::replace_up((hfst::HfstTransducer const &)*arg1,arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_down__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  bool arg2 ;
  hfst::StringPairSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "replace_down" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "replace_down" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "replace_down" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "replace_down" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::replace_down((hfst::HfstTransducer const &)*arg1,arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_replace_down(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "replace_down", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_replace_down__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_replace_down__SWIG_0(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'replace_down'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::hfst_rules::replace_down(hfst::HfstTransducerPair const &,hfst::HfstTransducer const &,bool,hfst::StringPairSet const &)\n"
    "    hfst::hfst_rules::replace_down(hfst::HfstTransducer const &,bool,hfst::StringPairSet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_left_replace_up__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducer *arg1 = 0 ;
  bool arg2 ;
  hfst::StringPairSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "left_replace_up" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_up" "', argument " "1"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg1 = reinterpret_cast< hfst::HfstTransducer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "left_replace_up" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "left_replace_up" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_up" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::left_replace_up((hfst::HfstTransducer const &)*arg1,arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_left_replace_up__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "left_replace_up" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_up" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "left_replace_up" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_up" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "left_replace_up" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "left_replace_up" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_up" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::left_replace_up((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_left_replace_up(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "left_replace_up", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_left_replace_up__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair< hfst::HfstTransducer,hfst::HfstTransducer >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = swig::asptr(argv[3], (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_left_replace_up__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'left_replace_up'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::hfst_rules::left_replace_up(hfst::HfstTransducer const &,bool,hfst::StringPairSet const &)\n"
    "    hfst::hfst_rules::left_replace_up(hfst::HfstTransducerPair const &,hfst::HfstTransducer const &,bool,hfst::StringPairSet const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_left_replace_down(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "left_replace_down", 4, 4, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "left_replace_down" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_down" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "left_replace_down" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_down" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "left_replace_down" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "left_replace_down" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_down" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::left_replace_down((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_left_replace_down_karttunen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "left_replace_down_karttunen", 4, 4, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "left_replace_down_karttunen" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_down_karttunen" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "left_replace_down_karttunen" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_down_karttunen" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "left_replace_down_karttunen" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "left_replace_down_karttunen" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_down_karttunen" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::left_replace_down_karttunen((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_left_replace_left(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "left_replace_left", 4, 4, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "left_replace_left" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_left" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "left_replace_left" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_left" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "left_replace_left" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "left_replace_left" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_left" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::left_replace_left((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_left_replace_right(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPair *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  bool arg3 ;
  hfst::StringPairSet *arg4 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject *swig_obj[4] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "left_replace_right", 4, 4, swig_obj)) SWIG_fail;
  {
    std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *ptr = (std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "left_replace_right" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_right" "', argument " "1"" of type '" "hfst::HfstTransducerPair const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "left_replace_right" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_right" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "left_replace_right" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res4 = swig::asptr(swig_obj[3], &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "left_replace_right" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "left_replace_right" "', argument " "4"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg4 = ptr;
  }
  result = hfst::hfst_rules::left_replace_right((std::pair< hfst::HfstTransducer,hfst::HfstTransducer > const &)*arg1,(hfst::HfstTransducer const &)*arg2,arg3,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg4);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_restriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "restriction", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "restriction" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "restriction" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "restriction" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "restriction" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "restriction" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "restriction" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::restriction((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_coercion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "coercion", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::coercion((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_restriction_and_coercion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "restriction_and_coercion", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "restriction_and_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "restriction_and_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "restriction_and_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "restriction_and_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "restriction_and_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "restriction_and_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::restriction_and_coercion((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_restriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "surface_restriction", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_restriction" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_restriction" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surface_restriction" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_restriction" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surface_restriction" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_restriction" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::surface_restriction((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_coercion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "surface_coercion", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surface_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surface_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::surface_coercion((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_surface_restriction_and_coercion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "surface_restriction_and_coercion", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "surface_restriction_and_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_restriction_and_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "surface_restriction_and_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_restriction_and_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "surface_restriction_and_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "surface_restriction_and_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::surface_restriction_and_coercion((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_deep_restriction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "deep_restriction", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deep_restriction" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_restriction" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deep_restriction" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_restriction" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deep_restriction" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_restriction" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::deep_restriction((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_deep_coercion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "deep_coercion", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deep_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deep_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deep_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::deep_coercion((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_deep_restriction_and_coercion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerPairVector *arg1 = 0 ;
  hfst::HfstTransducer *arg2 = 0 ;
  hfst::StringPairSet *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject *swig_obj[3] ;
  SwigValueWrapper< hfst::HfstTransducer > result;
  
  if (!SWIG_Python_UnpackTuple(args, "deep_restriction_and_coercion", 3, 3, swig_obj)) SWIG_fail;
  {
    std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *ptr = (std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *)0;
    res1 = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deep_restriction_and_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_restriction_and_coercion" "', argument " "1"" of type '" "hfst::HfstTransducerPairVector const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_hfst__HfstTransducer,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "deep_restriction_and_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_restriction_and_coercion" "', argument " "2"" of type '" "hfst::HfstTransducer const &""'"); 
  }
  arg2 = reinterpret_cast< hfst::HfstTransducer * >(argp2);
  {
    std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *ptr = (std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *)0;
    res3 = swig::asptr(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "deep_restriction_and_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "deep_restriction_and_coercion" "', argument " "3"" of type '" "hfst::StringPairSet const &""'"); 
    }
    arg3 = ptr;
  }
  result = hfst::hfst_rules::deep_restriction_and_coercion((std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > const &)*arg1,(hfst::HfstTransducer const &)*arg2,(std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > const &)*arg3);
  resultobj = SWIG_NewPointerObj((new hfst::HfstTransducer(static_cast< const hfst::HfstTransducer& >(result))), SWIGTYPE_p_hfst__HfstTransducer, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TwolcCompiler_compile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool arg6 ;
  hfst::ImplementationType arg7 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  PyObject *swig_obj[7] ;
  int result;
  
  if (!SWIG_Python_UnpackTuple(args, "TwolcCompiler_compile", 7, 7, swig_obj)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TwolcCompiler_compile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwolcCompiler_compile" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TwolcCompiler_compile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TwolcCompiler_compile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TwolcCompiler_compile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TwolcCompiler_compile" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TwolcCompiler_compile" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TwolcCompiler_compile" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_int(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "TwolcCompiler_compile" "', argument " "7"" of type '" "hfst::ImplementationType""'");
  } 
  arg7 = static_cast< hfst::ImplementationType >(val7);
  result = (int)hfst::twolc::TwolcCompiler::compile((std::string const &)*arg1,(std::string const &)*arg2,arg3,arg4,arg5,arg6,arg7);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TwolcCompiler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::twolc::TwolcCompiler *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_TwolcCompiler", 0, 0, 0)) SWIG_fail;
  result = (hfst::twolc::TwolcCompiler *)new hfst::twolc::TwolcCompiler();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst__twolc__TwolcCompiler, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TwolcCompiler(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst::twolc::TwolcCompiler *arg1 = (hfst::twolc::TwolcCompiler *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst__twolc__TwolcCompiler, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TwolcCompiler" "', argument " "1"" of type '" "hfst::twolc::TwolcCompiler *""'"); 
  }
  arg1 = reinterpret_cast< hfst::twolc::TwolcCompiler * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TwolcCompiler_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst__twolc__TwolcCompiler, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *TwolcCompiler_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_pmatch_get_tokenized_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int *arg4 = (int *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  double arg8 ;
  bool arg9 ;
  float arg10 ;
  bool arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  float val10 ;
  int ecode10 = 0 ;
  bool val11 ;
  int ecode11 = 0 ;
  PyObject *swig_obj[11] ;
  std::string result;
  
  if (!SWIG_Python_UnpackTuple(args, "pmatch_get_tokenized_output", 11, 11, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pmatch_get_tokenized_output" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pmatch_get_tokenized_output" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pmatch_get_tokenized_output" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(swig_obj[2], &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pmatch_get_tokenized_output" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pmatch_get_tokenized_output" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "pmatch_get_tokenized_output" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  ecode5 = SWIG_AsVal_bool(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "pmatch_get_tokenized_output" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  ecode6 = SWIG_AsVal_bool(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "pmatch_get_tokenized_output" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(swig_obj[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "pmatch_get_tokenized_output" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  ecode8 = SWIG_AsVal_double(swig_obj[7], &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "pmatch_get_tokenized_output" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_bool(swig_obj[8], &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "pmatch_get_tokenized_output" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  ecode10 = SWIG_AsVal_float(swig_obj[9], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "pmatch_get_tokenized_output" "', argument " "10"" of type '" "float""'");
  } 
  arg10 = static_cast< float >(val10);
  ecode11 = SWIG_AsVal_bool(swig_obj[10], &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "pmatch_get_tokenized_output" "', argument " "11"" of type '" "bool""'");
  } 
  arg11 = static_cast< bool >(val11);
  result = hfst::pmatch_get_tokenized_output(arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pmatch_locate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  hfst_ol::LocationVectorVector result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pmatch_locate" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pmatch_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pmatch_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pmatch_locate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = hfst::pmatch_locate(arg1,(std::string const &)*arg2,arg3);
  resultobj = swig::from(static_cast< std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pmatch_locate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  hfst_ol::LocationVectorVector result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pmatch_locate" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pmatch_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pmatch_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = hfst::pmatch_locate(arg1,(std::string const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pmatch_locate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  hfst_ol::LocationVectorVector result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pmatch_locate" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pmatch_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pmatch_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "pmatch_locate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "pmatch_locate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = hfst::pmatch_locate(arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = swig::from(static_cast< std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pmatch_locate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "pmatch_locate", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_pmatch_locate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_pmatch_locate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_pmatch_locate__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'pmatch_locate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst::pmatch_locate(hfst_ol::PmatchContainer *,std::string const &,double)\n"
    "    hfst::pmatch_locate(hfst_ol::PmatchContainer *,std::string const &)\n"
    "    hfst::pmatch_locate(hfst_ol::PmatchContainer *,std::string const &,double,float)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_PmatchContainer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  result = (hfst_ol::PmatchContainer *)new hfst_ol::PmatchContainer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst_ol__PmatchContainer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PmatchContainer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst::HfstTransducerVector arg1 ;
  hfst_ol::PmatchContainer *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *ptr = (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *)0;
    int res = swig::asptr(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PmatchContainer" "', argument " "1"" of type '" "hfst::HfstTransducerVector""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (hfst_ol::PmatchContainer *)new hfst_ol::PmatchContainer(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst_ol__PmatchContainer, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PmatchContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PmatchContainer" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_match__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  std::string result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_match" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PmatchContainer_match" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PmatchContainer_match" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PmatchContainer_match" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = (arg1)->match((std::string const &)*arg2,arg3);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_match__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  std::string result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_match" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PmatchContainer_match" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PmatchContainer_match" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->match((std::string const &)*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_match(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PmatchContainer_match", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PmatchContainer_match__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PmatchContainer_match__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PmatchContainer_match'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst_ol::PmatchContainer::match(std::string const &,double)\n"
    "    hfst_ol::PmatchContainer::match(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_get_profiling_info(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  std::string result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_get_profiling_info" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  result = (arg1)->get_profiling_info();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_set_verbose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PmatchContainer_set_verbose", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_set_verbose" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PmatchContainer_set_verbose" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_verbose(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_set_profile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "PmatchContainer_set_profile", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_set_profile" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PmatchContainer_set_profile" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->set_profile(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PmatchContainer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  hfst_ol::PmatchContainer *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PmatchContainer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PmatchContainer" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (hfst_ol::PmatchContainer *)new_hfst_ol_PmatchContainer__SWIG_2((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_hfst_ol__PmatchContainer, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PmatchContainer(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_PmatchContainer", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_PmatchContainer__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PmatchContainer__SWIG_2(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_PmatchContainer__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PmatchContainer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst_ol::PmatchContainer::PmatchContainer()\n"
    "    hfst_ol::PmatchContainer::PmatchContainer(hfst::HfstTransducerVector)\n"
    "    hfst_ol::PmatchContainer::PmatchContainer(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_locate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  hfst_ol::LocationVectorVector result;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_locate" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PmatchContainer_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PmatchContainer_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PmatchContainer_locate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  result = hfst_ol_PmatchContainer_locate__SWIG_0(arg1,(std::string const &)*arg2,arg3);
  resultobj = swig::from(static_cast< std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_locate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  hfst_ol::LocationVectorVector result;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_locate" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PmatchContainer_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PmatchContainer_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = hfst_ol_PmatchContainer_locate__SWIG_0(arg1,(std::string const &)*arg2);
  resultobj = swig::from(static_cast< std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_locate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  hfst_ol::PmatchContainer *arg1 = (hfst_ol::PmatchContainer *) 0 ;
  std::string *arg2 = 0 ;
  double arg3 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  double val3 ;
  int ecode3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  hfst_ol::LocationVectorVector result;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_hfst_ol__PmatchContainer, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PmatchContainer_locate" "', argument " "1"" of type '" "hfst_ol::PmatchContainer *""'"); 
  }
  arg1 = reinterpret_cast< hfst_ol::PmatchContainer * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(swig_obj[1], &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PmatchContainer_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PmatchContainer_locate" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PmatchContainer_locate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PmatchContainer_locate" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  result = hfst_ol_PmatchContainer_locate__SWIG_2(arg1,(std::string const &)*arg2,arg3,arg4);
  resultobj = swig::from(static_cast< std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PmatchContainer_locate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "PmatchContainer_locate", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_PmatchContainer_locate__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_PmatchContainer_locate__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_hfst_ol__PmatchContainer, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_PmatchContainer_locate__SWIG_2(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PmatchContainer_locate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    hfst_ol::PmatchContainer::locate(std::string const &,double)\n"
    "    hfst_ol::PmatchContainer::locate(std::string const &)\n"
    "    hfst_ol::PmatchContainer::locate(std::string const &,double,float)\n");
  return 0;
}


SWIGINTERN PyObject *PmatchContainer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_hfst_ol__PmatchContainer, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *PmatchContainer_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, NULL},
	 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, NULL},
	 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, NULL},
	 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, NULL},
	 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, NULL},
	 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, NULL},
	 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, NULL},
	 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, NULL},
	 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, NULL},
	 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, NULL},
	 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, NULL},
	 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, NULL},
	 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, NULL},
	 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, NULL},
	 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, NULL},
	 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, NULL},
	 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, NULL},
	 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
	 { "StringVector_iterator", _wrap_StringVector_iterator, METH_O, NULL},
	 { "StringVector___nonzero__", _wrap_StringVector___nonzero__, METH_O, NULL},
	 { "StringVector___bool__", _wrap_StringVector___bool__, METH_O, NULL},
	 { "StringVector___len__", _wrap_StringVector___len__, METH_O, NULL},
	 { "StringVector___getslice__", _wrap_StringVector___getslice__, METH_VARARGS, NULL},
	 { "StringVector___setslice__", _wrap_StringVector___setslice__, METH_VARARGS, NULL},
	 { "StringVector___delslice__", _wrap_StringVector___delslice__, METH_VARARGS, NULL},
	 { "StringVector___delitem__", _wrap_StringVector___delitem__, METH_VARARGS, NULL},
	 { "StringVector___getitem__", _wrap_StringVector___getitem__, METH_VARARGS, NULL},
	 { "StringVector___setitem__", _wrap_StringVector___setitem__, METH_VARARGS, NULL},
	 { "StringVector_pop", _wrap_StringVector_pop, METH_O, NULL},
	 { "StringVector_append", _wrap_StringVector_append, METH_VARARGS, NULL},
	 { "StringVector_empty", _wrap_StringVector_empty, METH_O, NULL},
	 { "StringVector_size", _wrap_StringVector_size, METH_O, NULL},
	 { "StringVector_swap", _wrap_StringVector_swap, METH_VARARGS, NULL},
	 { "StringVector_begin", _wrap_StringVector_begin, METH_O, NULL},
	 { "StringVector_end", _wrap_StringVector_end, METH_O, NULL},
	 { "StringVector_rbegin", _wrap_StringVector_rbegin, METH_O, NULL},
	 { "StringVector_rend", _wrap_StringVector_rend, METH_O, NULL},
	 { "StringVector_clear", _wrap_StringVector_clear, METH_O, NULL},
	 { "StringVector_get_allocator", _wrap_StringVector_get_allocator, METH_O, NULL},
	 { "StringVector_pop_back", _wrap_StringVector_pop_back, METH_O, NULL},
	 { "StringVector_erase", _wrap_StringVector_erase, METH_VARARGS, NULL},
	 { "new_StringVector", _wrap_new_StringVector, METH_VARARGS, NULL},
	 { "StringVector_push_back", _wrap_StringVector_push_back, METH_VARARGS, NULL},
	 { "StringVector_front", _wrap_StringVector_front, METH_O, NULL},
	 { "StringVector_back", _wrap_StringVector_back, METH_O, NULL},
	 { "StringVector_assign", _wrap_StringVector_assign, METH_VARARGS, NULL},
	 { "StringVector_resize", _wrap_StringVector_resize, METH_VARARGS, NULL},
	 { "StringVector_insert", _wrap_StringVector_insert, METH_VARARGS, NULL},
	 { "StringVector_reserve", _wrap_StringVector_reserve, METH_VARARGS, NULL},
	 { "StringVector_capacity", _wrap_StringVector_capacity, METH_O, NULL},
	 { "delete_StringVector", _wrap_delete_StringVector, METH_O, NULL},
	 { "StringVector_swigregister", StringVector_swigregister, METH_O, NULL},
	 { "StringVector_swiginit", StringVector_swiginit, METH_VARARGS, NULL},
	 { "new_StringPair", _wrap_new_StringPair, METH_VARARGS, NULL},
	 { "StringPair_first_set", _wrap_StringPair_first_set, METH_VARARGS, NULL},
	 { "StringPair_first_get", _wrap_StringPair_first_get, METH_O, NULL},
	 { "StringPair_second_set", _wrap_StringPair_second_set, METH_VARARGS, NULL},
	 { "StringPair_second_get", _wrap_StringPair_second_get, METH_O, NULL},
	 { "delete_StringPair", _wrap_delete_StringPair, METH_O, NULL},
	 { "StringPair_swigregister", StringPair_swigregister, METH_O, NULL},
	 { "StringPair_swiginit", StringPair_swiginit, METH_VARARGS, NULL},
	 { "StringPairVector_iterator", _wrap_StringPairVector_iterator, METH_O, NULL},
	 { "StringPairVector___nonzero__", _wrap_StringPairVector___nonzero__, METH_O, NULL},
	 { "StringPairVector___bool__", _wrap_StringPairVector___bool__, METH_O, NULL},
	 { "StringPairVector___len__", _wrap_StringPairVector___len__, METH_O, NULL},
	 { "StringPairVector___getslice__", _wrap_StringPairVector___getslice__, METH_VARARGS, NULL},
	 { "StringPairVector___setslice__", _wrap_StringPairVector___setslice__, METH_VARARGS, NULL},
	 { "StringPairVector___delslice__", _wrap_StringPairVector___delslice__, METH_VARARGS, NULL},
	 { "StringPairVector___delitem__", _wrap_StringPairVector___delitem__, METH_VARARGS, NULL},
	 { "StringPairVector___getitem__", _wrap_StringPairVector___getitem__, METH_VARARGS, NULL},
	 { "StringPairVector___setitem__", _wrap_StringPairVector___setitem__, METH_VARARGS, NULL},
	 { "StringPairVector_pop", _wrap_StringPairVector_pop, METH_O, NULL},
	 { "StringPairVector_append", _wrap_StringPairVector_append, METH_VARARGS, NULL},
	 { "StringPairVector_empty", _wrap_StringPairVector_empty, METH_O, NULL},
	 { "StringPairVector_size", _wrap_StringPairVector_size, METH_O, NULL},
	 { "StringPairVector_swap", _wrap_StringPairVector_swap, METH_VARARGS, NULL},
	 { "StringPairVector_begin", _wrap_StringPairVector_begin, METH_O, NULL},
	 { "StringPairVector_end", _wrap_StringPairVector_end, METH_O, NULL},
	 { "StringPairVector_rbegin", _wrap_StringPairVector_rbegin, METH_O, NULL},
	 { "StringPairVector_rend", _wrap_StringPairVector_rend, METH_O, NULL},
	 { "StringPairVector_clear", _wrap_StringPairVector_clear, METH_O, NULL},
	 { "StringPairVector_get_allocator", _wrap_StringPairVector_get_allocator, METH_O, NULL},
	 { "StringPairVector_pop_back", _wrap_StringPairVector_pop_back, METH_O, NULL},
	 { "StringPairVector_erase", _wrap_StringPairVector_erase, METH_VARARGS, NULL},
	 { "new_StringPairVector", _wrap_new_StringPairVector, METH_VARARGS, NULL},
	 { "StringPairVector_push_back", _wrap_StringPairVector_push_back, METH_VARARGS, NULL},
	 { "StringPairVector_front", _wrap_StringPairVector_front, METH_O, NULL},
	 { "StringPairVector_back", _wrap_StringPairVector_back, METH_O, NULL},
	 { "StringPairVector_assign", _wrap_StringPairVector_assign, METH_VARARGS, NULL},
	 { "StringPairVector_resize", _wrap_StringPairVector_resize, METH_VARARGS, NULL},
	 { "StringPairVector_insert", _wrap_StringPairVector_insert, METH_VARARGS, NULL},
	 { "StringPairVector_reserve", _wrap_StringPairVector_reserve, METH_VARARGS, NULL},
	 { "StringPairVector_capacity", _wrap_StringPairVector_capacity, METH_O, NULL},
	 { "delete_StringPairVector", _wrap_delete_StringPairVector, METH_O, NULL},
	 { "StringPairVector_swigregister", StringPairVector_swigregister, METH_O, NULL},
	 { "StringPairVector_swiginit", StringPairVector_swiginit, METH_VARARGS, NULL},
	 { "FloatVector_iterator", _wrap_FloatVector_iterator, METH_O, NULL},
	 { "FloatVector___nonzero__", _wrap_FloatVector___nonzero__, METH_O, NULL},
	 { "FloatVector___bool__", _wrap_FloatVector___bool__, METH_O, NULL},
	 { "FloatVector___len__", _wrap_FloatVector___len__, METH_O, NULL},
	 { "FloatVector___getslice__", _wrap_FloatVector___getslice__, METH_VARARGS, NULL},
	 { "FloatVector___setslice__", _wrap_FloatVector___setslice__, METH_VARARGS, NULL},
	 { "FloatVector___delslice__", _wrap_FloatVector___delslice__, METH_VARARGS, NULL},
	 { "FloatVector___delitem__", _wrap_FloatVector___delitem__, METH_VARARGS, NULL},
	 { "FloatVector___getitem__", _wrap_FloatVector___getitem__, METH_VARARGS, NULL},
	 { "FloatVector___setitem__", _wrap_FloatVector___setitem__, METH_VARARGS, NULL},
	 { "FloatVector_pop", _wrap_FloatVector_pop, METH_O, NULL},
	 { "FloatVector_append", _wrap_FloatVector_append, METH_VARARGS, NULL},
	 { "FloatVector_empty", _wrap_FloatVector_empty, METH_O, NULL},
	 { "FloatVector_size", _wrap_FloatVector_size, METH_O, NULL},
	 { "FloatVector_swap", _wrap_FloatVector_swap, METH_VARARGS, NULL},
	 { "FloatVector_begin", _wrap_FloatVector_begin, METH_O, NULL},
	 { "FloatVector_end", _wrap_FloatVector_end, METH_O, NULL},
	 { "FloatVector_rbegin", _wrap_FloatVector_rbegin, METH_O, NULL},
	 { "FloatVector_rend", _wrap_FloatVector_rend, METH_O, NULL},
	 { "FloatVector_clear", _wrap_FloatVector_clear, METH_O, NULL},
	 { "FloatVector_get_allocator", _wrap_FloatVector_get_allocator, METH_O, NULL},
	 { "FloatVector_pop_back", _wrap_FloatVector_pop_back, METH_O, NULL},
	 { "FloatVector_erase", _wrap_FloatVector_erase, METH_VARARGS, NULL},
	 { "new_FloatVector", _wrap_new_FloatVector, METH_VARARGS, NULL},
	 { "FloatVector_push_back", _wrap_FloatVector_push_back, METH_VARARGS, NULL},
	 { "FloatVector_front", _wrap_FloatVector_front, METH_O, NULL},
	 { "FloatVector_back", _wrap_FloatVector_back, METH_O, NULL},
	 { "FloatVector_assign", _wrap_FloatVector_assign, METH_VARARGS, NULL},
	 { "FloatVector_resize", _wrap_FloatVector_resize, METH_VARARGS, NULL},
	 { "FloatVector_insert", _wrap_FloatVector_insert, METH_VARARGS, NULL},
	 { "FloatVector_reserve", _wrap_FloatVector_reserve, METH_VARARGS, NULL},
	 { "FloatVector_capacity", _wrap_FloatVector_capacity, METH_O, NULL},
	 { "delete_FloatVector", _wrap_delete_FloatVector, METH_O, NULL},
	 { "FloatVector_swigregister", FloatVector_swigregister, METH_O, NULL},
	 { "FloatVector_swiginit", FloatVector_swiginit, METH_VARARGS, NULL},
	 { "StringSet_iterator", _wrap_StringSet_iterator, METH_O, NULL},
	 { "StringSet___nonzero__", _wrap_StringSet___nonzero__, METH_O, NULL},
	 { "StringSet___bool__", _wrap_StringSet___bool__, METH_O, NULL},
	 { "StringSet___len__", _wrap_StringSet___len__, METH_O, NULL},
	 { "StringSet_append", _wrap_StringSet_append, METH_VARARGS, NULL},
	 { "StringSet___contains__", _wrap_StringSet___contains__, METH_VARARGS, NULL},
	 { "StringSet___getitem__", _wrap_StringSet___getitem__, METH_VARARGS, NULL},
	 { "StringSet_add", _wrap_StringSet_add, METH_VARARGS, NULL},
	 { "StringSet_discard", _wrap_StringSet_discard, METH_VARARGS, NULL},
	 { "new_StringSet", _wrap_new_StringSet, METH_VARARGS, NULL},
	 { "StringSet_empty", _wrap_StringSet_empty, METH_O, NULL},
	 { "StringSet_size", _wrap_StringSet_size, METH_O, NULL},
	 { "StringSet_clear", _wrap_StringSet_clear, METH_O, NULL},
	 { "StringSet_swap", _wrap_StringSet_swap, METH_VARARGS, NULL},
	 { "StringSet_count", _wrap_StringSet_count, METH_VARARGS, NULL},
	 { "StringSet_begin", _wrap_StringSet_begin, METH_O, NULL},
	 { "StringSet_end", _wrap_StringSet_end, METH_O, NULL},
	 { "StringSet_rbegin", _wrap_StringSet_rbegin, METH_O, NULL},
	 { "StringSet_rend", _wrap_StringSet_rend, METH_O, NULL},
	 { "StringSet_erase", _wrap_StringSet_erase, METH_VARARGS, NULL},
	 { "StringSet_find", _wrap_StringSet_find, METH_VARARGS, NULL},
	 { "StringSet_lower_bound", _wrap_StringSet_lower_bound, METH_VARARGS, NULL},
	 { "StringSet_upper_bound", _wrap_StringSet_upper_bound, METH_VARARGS, NULL},
	 { "StringSet_equal_range", _wrap_StringSet_equal_range, METH_VARARGS, NULL},
	 { "StringSet_insert", _wrap_StringSet_insert, METH_VARARGS, NULL},
	 { "delete_StringSet", _wrap_delete_StringSet, METH_O, NULL},
	 { "StringSet_swigregister", StringSet_swigregister, METH_O, NULL},
	 { "StringSet_swiginit", StringSet_swiginit, METH_VARARGS, NULL},
	 { "StringPairSet_iterator", _wrap_StringPairSet_iterator, METH_O, NULL},
	 { "StringPairSet___nonzero__", _wrap_StringPairSet___nonzero__, METH_O, NULL},
	 { "StringPairSet___bool__", _wrap_StringPairSet___bool__, METH_O, NULL},
	 { "StringPairSet___len__", _wrap_StringPairSet___len__, METH_O, NULL},
	 { "StringPairSet_append", _wrap_StringPairSet_append, METH_VARARGS, NULL},
	 { "StringPairSet___contains__", _wrap_StringPairSet___contains__, METH_VARARGS, NULL},
	 { "StringPairSet___getitem__", _wrap_StringPairSet___getitem__, METH_VARARGS, NULL},
	 { "StringPairSet_add", _wrap_StringPairSet_add, METH_VARARGS, NULL},
	 { "StringPairSet_discard", _wrap_StringPairSet_discard, METH_VARARGS, NULL},
	 { "new_StringPairSet", _wrap_new_StringPairSet, METH_VARARGS, NULL},
	 { "StringPairSet_empty", _wrap_StringPairSet_empty, METH_O, NULL},
	 { "StringPairSet_size", _wrap_StringPairSet_size, METH_O, NULL},
	 { "StringPairSet_clear", _wrap_StringPairSet_clear, METH_O, NULL},
	 { "StringPairSet_swap", _wrap_StringPairSet_swap, METH_VARARGS, NULL},
	 { "StringPairSet_count", _wrap_StringPairSet_count, METH_VARARGS, NULL},
	 { "StringPairSet_begin", _wrap_StringPairSet_begin, METH_O, NULL},
	 { "StringPairSet_end", _wrap_StringPairSet_end, METH_O, NULL},
	 { "StringPairSet_rbegin", _wrap_StringPairSet_rbegin, METH_O, NULL},
	 { "StringPairSet_rend", _wrap_StringPairSet_rend, METH_O, NULL},
	 { "StringPairSet_erase", _wrap_StringPairSet_erase, METH_VARARGS, NULL},
	 { "StringPairSet_find", _wrap_StringPairSet_find, METH_VARARGS, NULL},
	 { "StringPairSet_lower_bound", _wrap_StringPairSet_lower_bound, METH_VARARGS, NULL},
	 { "StringPairSet_upper_bound", _wrap_StringPairSet_upper_bound, METH_VARARGS, NULL},
	 { "StringPairSet_equal_range", _wrap_StringPairSet_equal_range, METH_VARARGS, NULL},
	 { "StringPairSet_insert", _wrap_StringPairSet_insert, METH_VARARGS, NULL},
	 { "delete_StringPairSet", _wrap_delete_StringPairSet, METH_O, NULL},
	 { "StringPairSet_swigregister", StringPairSet_swigregister, METH_O, NULL},
	 { "StringPairSet_swiginit", StringPairSet_swiginit, METH_VARARGS, NULL},
	 { "HfstTransducerVector_iterator", _wrap_HfstTransducerVector_iterator, METH_O, NULL},
	 { "HfstTransducerVector___nonzero__", _wrap_HfstTransducerVector___nonzero__, METH_O, NULL},
	 { "HfstTransducerVector___bool__", _wrap_HfstTransducerVector___bool__, METH_O, NULL},
	 { "HfstTransducerVector___len__", _wrap_HfstTransducerVector___len__, METH_O, NULL},
	 { "HfstTransducerVector___getslice__", _wrap_HfstTransducerVector___getslice__, METH_VARARGS, NULL},
	 { "HfstTransducerVector___setslice__", _wrap_HfstTransducerVector___setslice__, METH_VARARGS, NULL},
	 { "HfstTransducerVector___delslice__", _wrap_HfstTransducerVector___delslice__, METH_VARARGS, NULL},
	 { "HfstTransducerVector___delitem__", _wrap_HfstTransducerVector___delitem__, METH_VARARGS, NULL},
	 { "HfstTransducerVector___getitem__", _wrap_HfstTransducerVector___getitem__, METH_VARARGS, NULL},
	 { "HfstTransducerVector___setitem__", _wrap_HfstTransducerVector___setitem__, METH_VARARGS, NULL},
	 { "HfstTransducerVector_pop", _wrap_HfstTransducerVector_pop, METH_O, NULL},
	 { "HfstTransducerVector_append", _wrap_HfstTransducerVector_append, METH_VARARGS, NULL},
	 { "HfstTransducerVector_empty", _wrap_HfstTransducerVector_empty, METH_O, NULL},
	 { "HfstTransducerVector_size", _wrap_HfstTransducerVector_size, METH_O, NULL},
	 { "HfstTransducerVector_swap", _wrap_HfstTransducerVector_swap, METH_VARARGS, NULL},
	 { "HfstTransducerVector_begin", _wrap_HfstTransducerVector_begin, METH_O, NULL},
	 { "HfstTransducerVector_end", _wrap_HfstTransducerVector_end, METH_O, NULL},
	 { "HfstTransducerVector_rbegin", _wrap_HfstTransducerVector_rbegin, METH_O, NULL},
	 { "HfstTransducerVector_rend", _wrap_HfstTransducerVector_rend, METH_O, NULL},
	 { "HfstTransducerVector_clear", _wrap_HfstTransducerVector_clear, METH_O, NULL},
	 { "HfstTransducerVector_get_allocator", _wrap_HfstTransducerVector_get_allocator, METH_O, NULL},
	 { "HfstTransducerVector_pop_back", _wrap_HfstTransducerVector_pop_back, METH_O, NULL},
	 { "HfstTransducerVector_erase", _wrap_HfstTransducerVector_erase, METH_VARARGS, NULL},
	 { "new_HfstTransducerVector", _wrap_new_HfstTransducerVector, METH_VARARGS, NULL},
	 { "HfstTransducerVector_push_back", _wrap_HfstTransducerVector_push_back, METH_VARARGS, NULL},
	 { "HfstTransducerVector_front", _wrap_HfstTransducerVector_front, METH_O, NULL},
	 { "HfstTransducerVector_back", _wrap_HfstTransducerVector_back, METH_O, NULL},
	 { "HfstTransducerVector_assign", _wrap_HfstTransducerVector_assign, METH_VARARGS, NULL},
	 { "HfstTransducerVector_resize", _wrap_HfstTransducerVector_resize, METH_VARARGS, NULL},
	 { "HfstTransducerVector_insert", _wrap_HfstTransducerVector_insert, METH_VARARGS, NULL},
	 { "HfstTransducerVector_reserve", _wrap_HfstTransducerVector_reserve, METH_VARARGS, NULL},
	 { "HfstTransducerVector_capacity", _wrap_HfstTransducerVector_capacity, METH_O, NULL},
	 { "delete_HfstTransducerVector", _wrap_delete_HfstTransducerVector, METH_O, NULL},
	 { "HfstTransducerVector_swigregister", HfstTransducerVector_swigregister, METH_O, NULL},
	 { "HfstTransducerVector_swiginit", HfstTransducerVector_swiginit, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_iterator", _wrap_HfstSymbolSubstitutions_iterator, METH_O, NULL},
	 { "HfstSymbolSubstitutions___nonzero__", _wrap_HfstSymbolSubstitutions___nonzero__, METH_O, NULL},
	 { "HfstSymbolSubstitutions___bool__", _wrap_HfstSymbolSubstitutions___bool__, METH_O, NULL},
	 { "HfstSymbolSubstitutions___len__", _wrap_HfstSymbolSubstitutions___len__, METH_O, NULL},
	 { "HfstSymbolSubstitutions___getitem__", _wrap_HfstSymbolSubstitutions___getitem__, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions___delitem__", _wrap_HfstSymbolSubstitutions___delitem__, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_has_key", _wrap_HfstSymbolSubstitutions_has_key, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_keys", _wrap_HfstSymbolSubstitutions_keys, METH_O, NULL},
	 { "HfstSymbolSubstitutions_values", _wrap_HfstSymbolSubstitutions_values, METH_O, NULL},
	 { "HfstSymbolSubstitutions_items", _wrap_HfstSymbolSubstitutions_items, METH_O, NULL},
	 { "HfstSymbolSubstitutions___contains__", _wrap_HfstSymbolSubstitutions___contains__, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_key_iterator", _wrap_HfstSymbolSubstitutions_key_iterator, METH_O, NULL},
	 { "HfstSymbolSubstitutions_value_iterator", _wrap_HfstSymbolSubstitutions_value_iterator, METH_O, NULL},
	 { "HfstSymbolSubstitutions___setitem__", _wrap_HfstSymbolSubstitutions___setitem__, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_asdict", _wrap_HfstSymbolSubstitutions_asdict, METH_O, NULL},
	 { "new_HfstSymbolSubstitutions", _wrap_new_HfstSymbolSubstitutions, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_empty", _wrap_HfstSymbolSubstitutions_empty, METH_O, NULL},
	 { "HfstSymbolSubstitutions_size", _wrap_HfstSymbolSubstitutions_size, METH_O, NULL},
	 { "HfstSymbolSubstitutions_swap", _wrap_HfstSymbolSubstitutions_swap, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_begin", _wrap_HfstSymbolSubstitutions_begin, METH_O, NULL},
	 { "HfstSymbolSubstitutions_end", _wrap_HfstSymbolSubstitutions_end, METH_O, NULL},
	 { "HfstSymbolSubstitutions_rbegin", _wrap_HfstSymbolSubstitutions_rbegin, METH_O, NULL},
	 { "HfstSymbolSubstitutions_rend", _wrap_HfstSymbolSubstitutions_rend, METH_O, NULL},
	 { "HfstSymbolSubstitutions_clear", _wrap_HfstSymbolSubstitutions_clear, METH_O, NULL},
	 { "HfstSymbolSubstitutions_get_allocator", _wrap_HfstSymbolSubstitutions_get_allocator, METH_O, NULL},
	 { "HfstSymbolSubstitutions_count", _wrap_HfstSymbolSubstitutions_count, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_erase", _wrap_HfstSymbolSubstitutions_erase, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_find", _wrap_HfstSymbolSubstitutions_find, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_lower_bound", _wrap_HfstSymbolSubstitutions_lower_bound, METH_VARARGS, NULL},
	 { "HfstSymbolSubstitutions_upper_bound", _wrap_HfstSymbolSubstitutions_upper_bound, METH_VARARGS, NULL},
	 { "delete_HfstSymbolSubstitutions", _wrap_delete_HfstSymbolSubstitutions, METH_O, NULL},
	 { "HfstSymbolSubstitutions_swigregister", HfstSymbolSubstitutions_swigregister, METH_O, NULL},
	 { "HfstSymbolSubstitutions_swiginit", HfstSymbolSubstitutions_swiginit, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_iterator", _wrap_HfstSymbolPairSubstitutions_iterator, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions___nonzero__", _wrap_HfstSymbolPairSubstitutions___nonzero__, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions___bool__", _wrap_HfstSymbolPairSubstitutions___bool__, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions___len__", _wrap_HfstSymbolPairSubstitutions___len__, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions___getitem__", _wrap_HfstSymbolPairSubstitutions___getitem__, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions___delitem__", _wrap_HfstSymbolPairSubstitutions___delitem__, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_has_key", _wrap_HfstSymbolPairSubstitutions_has_key, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_keys", _wrap_HfstSymbolPairSubstitutions_keys, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_values", _wrap_HfstSymbolPairSubstitutions_values, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_items", _wrap_HfstSymbolPairSubstitutions_items, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions___contains__", _wrap_HfstSymbolPairSubstitutions___contains__, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_key_iterator", _wrap_HfstSymbolPairSubstitutions_key_iterator, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_value_iterator", _wrap_HfstSymbolPairSubstitutions_value_iterator, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions___setitem__", _wrap_HfstSymbolPairSubstitutions___setitem__, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_asdict", _wrap_HfstSymbolPairSubstitutions_asdict, METH_O, NULL},
	 { "new_HfstSymbolPairSubstitutions", _wrap_new_HfstSymbolPairSubstitutions, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_empty", _wrap_HfstSymbolPairSubstitutions_empty, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_size", _wrap_HfstSymbolPairSubstitutions_size, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_swap", _wrap_HfstSymbolPairSubstitutions_swap, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_begin", _wrap_HfstSymbolPairSubstitutions_begin, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_end", _wrap_HfstSymbolPairSubstitutions_end, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_rbegin", _wrap_HfstSymbolPairSubstitutions_rbegin, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_rend", _wrap_HfstSymbolPairSubstitutions_rend, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_clear", _wrap_HfstSymbolPairSubstitutions_clear, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_get_allocator", _wrap_HfstSymbolPairSubstitutions_get_allocator, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_count", _wrap_HfstSymbolPairSubstitutions_count, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_erase", _wrap_HfstSymbolPairSubstitutions_erase, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_find", _wrap_HfstSymbolPairSubstitutions_find, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_lower_bound", _wrap_HfstSymbolPairSubstitutions_lower_bound, METH_VARARGS, NULL},
	 { "HfstSymbolPairSubstitutions_upper_bound", _wrap_HfstSymbolPairSubstitutions_upper_bound, METH_VARARGS, NULL},
	 { "delete_HfstSymbolPairSubstitutions", _wrap_delete_HfstSymbolPairSubstitutions, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_swigregister", HfstSymbolPairSubstitutions_swigregister, METH_O, NULL},
	 { "HfstSymbolPairSubstitutions_swiginit", HfstSymbolPairSubstitutions_swiginit, METH_VARARGS, NULL},
	 { "BarBazFoo_iterator", _wrap_BarBazFoo_iterator, METH_O, NULL},
	 { "BarBazFoo___nonzero__", _wrap_BarBazFoo___nonzero__, METH_O, NULL},
	 { "BarBazFoo___bool__", _wrap_BarBazFoo___bool__, METH_O, NULL},
	 { "BarBazFoo___len__", _wrap_BarBazFoo___len__, METH_O, NULL},
	 { "BarBazFoo___getslice__", _wrap_BarBazFoo___getslice__, METH_VARARGS, NULL},
	 { "BarBazFoo___setslice__", _wrap_BarBazFoo___setslice__, METH_VARARGS, NULL},
	 { "BarBazFoo___delslice__", _wrap_BarBazFoo___delslice__, METH_VARARGS, NULL},
	 { "BarBazFoo___delitem__", _wrap_BarBazFoo___delitem__, METH_VARARGS, NULL},
	 { "BarBazFoo___getitem__", _wrap_BarBazFoo___getitem__, METH_VARARGS, NULL},
	 { "BarBazFoo___setitem__", _wrap_BarBazFoo___setitem__, METH_VARARGS, NULL},
	 { "BarBazFoo_pop", _wrap_BarBazFoo_pop, METH_O, NULL},
	 { "BarBazFoo_append", _wrap_BarBazFoo_append, METH_VARARGS, NULL},
	 { "BarBazFoo_empty", _wrap_BarBazFoo_empty, METH_O, NULL},
	 { "BarBazFoo_size", _wrap_BarBazFoo_size, METH_O, NULL},
	 { "BarBazFoo_swap", _wrap_BarBazFoo_swap, METH_VARARGS, NULL},
	 { "BarBazFoo_begin", _wrap_BarBazFoo_begin, METH_O, NULL},
	 { "BarBazFoo_end", _wrap_BarBazFoo_end, METH_O, NULL},
	 { "BarBazFoo_rbegin", _wrap_BarBazFoo_rbegin, METH_O, NULL},
	 { "BarBazFoo_rend", _wrap_BarBazFoo_rend, METH_O, NULL},
	 { "BarBazFoo_clear", _wrap_BarBazFoo_clear, METH_O, NULL},
	 { "BarBazFoo_get_allocator", _wrap_BarBazFoo_get_allocator, METH_O, NULL},
	 { "BarBazFoo_pop_back", _wrap_BarBazFoo_pop_back, METH_O, NULL},
	 { "BarBazFoo_erase", _wrap_BarBazFoo_erase, METH_VARARGS, NULL},
	 { "new_BarBazFoo", _wrap_new_BarBazFoo, METH_VARARGS, NULL},
	 { "BarBazFoo_push_back", _wrap_BarBazFoo_push_back, METH_VARARGS, NULL},
	 { "BarBazFoo_front", _wrap_BarBazFoo_front, METH_O, NULL},
	 { "BarBazFoo_back", _wrap_BarBazFoo_back, METH_O, NULL},
	 { "BarBazFoo_assign", _wrap_BarBazFoo_assign, METH_VARARGS, NULL},
	 { "BarBazFoo_resize", _wrap_BarBazFoo_resize, METH_VARARGS, NULL},
	 { "BarBazFoo_insert", _wrap_BarBazFoo_insert, METH_VARARGS, NULL},
	 { "BarBazFoo_reserve", _wrap_BarBazFoo_reserve, METH_VARARGS, NULL},
	 { "BarBazFoo_capacity", _wrap_BarBazFoo_capacity, METH_O, NULL},
	 { "delete_BarBazFoo", _wrap_delete_BarBazFoo, METH_O, NULL},
	 { "BarBazFoo_swigregister", BarBazFoo_swigregister, METH_O, NULL},
	 { "BarBazFoo_swiginit", BarBazFoo_swiginit, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_iterator", _wrap_HfstBasicTransitions_iterator, METH_O, NULL},
	 { "HfstBasicTransitions___nonzero__", _wrap_HfstBasicTransitions___nonzero__, METH_O, NULL},
	 { "HfstBasicTransitions___bool__", _wrap_HfstBasicTransitions___bool__, METH_O, NULL},
	 { "HfstBasicTransitions___len__", _wrap_HfstBasicTransitions___len__, METH_O, NULL},
	 { "HfstBasicTransitions___getslice__", _wrap_HfstBasicTransitions___getslice__, METH_VARARGS, NULL},
	 { "HfstBasicTransitions___setslice__", _wrap_HfstBasicTransitions___setslice__, METH_VARARGS, NULL},
	 { "HfstBasicTransitions___delslice__", _wrap_HfstBasicTransitions___delslice__, METH_VARARGS, NULL},
	 { "HfstBasicTransitions___delitem__", _wrap_HfstBasicTransitions___delitem__, METH_VARARGS, NULL},
	 { "HfstBasicTransitions___getitem__", _wrap_HfstBasicTransitions___getitem__, METH_VARARGS, NULL},
	 { "HfstBasicTransitions___setitem__", _wrap_HfstBasicTransitions___setitem__, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_pop", _wrap_HfstBasicTransitions_pop, METH_O, NULL},
	 { "HfstBasicTransitions_append", _wrap_HfstBasicTransitions_append, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_empty", _wrap_HfstBasicTransitions_empty, METH_O, NULL},
	 { "HfstBasicTransitions_size", _wrap_HfstBasicTransitions_size, METH_O, NULL},
	 { "HfstBasicTransitions_swap", _wrap_HfstBasicTransitions_swap, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_begin", _wrap_HfstBasicTransitions_begin, METH_O, NULL},
	 { "HfstBasicTransitions_end", _wrap_HfstBasicTransitions_end, METH_O, NULL},
	 { "HfstBasicTransitions_rbegin", _wrap_HfstBasicTransitions_rbegin, METH_O, NULL},
	 { "HfstBasicTransitions_rend", _wrap_HfstBasicTransitions_rend, METH_O, NULL},
	 { "HfstBasicTransitions_clear", _wrap_HfstBasicTransitions_clear, METH_O, NULL},
	 { "HfstBasicTransitions_get_allocator", _wrap_HfstBasicTransitions_get_allocator, METH_O, NULL},
	 { "HfstBasicTransitions_pop_back", _wrap_HfstBasicTransitions_pop_back, METH_O, NULL},
	 { "HfstBasicTransitions_erase", _wrap_HfstBasicTransitions_erase, METH_VARARGS, NULL},
	 { "new_HfstBasicTransitions", _wrap_new_HfstBasicTransitions, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_push_back", _wrap_HfstBasicTransitions_push_back, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_front", _wrap_HfstBasicTransitions_front, METH_O, NULL},
	 { "HfstBasicTransitions_back", _wrap_HfstBasicTransitions_back, METH_O, NULL},
	 { "HfstBasicTransitions_assign", _wrap_HfstBasicTransitions_assign, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_resize", _wrap_HfstBasicTransitions_resize, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_insert", _wrap_HfstBasicTransitions_insert, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_reserve", _wrap_HfstBasicTransitions_reserve, METH_VARARGS, NULL},
	 { "HfstBasicTransitions_capacity", _wrap_HfstBasicTransitions_capacity, METH_O, NULL},
	 { "delete_HfstBasicTransitions", _wrap_delete_HfstBasicTransitions, METH_O, NULL},
	 { "HfstBasicTransitions_swigregister", HfstBasicTransitions_swigregister, METH_O, NULL},
	 { "HfstBasicTransitions_swiginit", HfstBasicTransitions_swiginit, METH_VARARGS, NULL},
	 { "new_HfstOneLevelPath", _wrap_new_HfstOneLevelPath, METH_VARARGS, NULL},
	 { "HfstOneLevelPath_first_set", _wrap_HfstOneLevelPath_first_set, METH_VARARGS, NULL},
	 { "HfstOneLevelPath_first_get", _wrap_HfstOneLevelPath_first_get, METH_O, NULL},
	 { "HfstOneLevelPath_second_set", _wrap_HfstOneLevelPath_second_set, METH_VARARGS, NULL},
	 { "HfstOneLevelPath_second_get", _wrap_HfstOneLevelPath_second_get, METH_O, NULL},
	 { "delete_HfstOneLevelPath", _wrap_delete_HfstOneLevelPath, METH_O, NULL},
	 { "HfstOneLevelPath_swigregister", HfstOneLevelPath_swigregister, METH_O, NULL},
	 { "HfstOneLevelPath_swiginit", HfstOneLevelPath_swiginit, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_iterator", _wrap_HfstOneLevelPaths_iterator, METH_O, NULL},
	 { "HfstOneLevelPaths___nonzero__", _wrap_HfstOneLevelPaths___nonzero__, METH_O, NULL},
	 { "HfstOneLevelPaths___bool__", _wrap_HfstOneLevelPaths___bool__, METH_O, NULL},
	 { "HfstOneLevelPaths___len__", _wrap_HfstOneLevelPaths___len__, METH_O, NULL},
	 { "HfstOneLevelPaths_append", _wrap_HfstOneLevelPaths_append, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths___contains__", _wrap_HfstOneLevelPaths___contains__, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths___getitem__", _wrap_HfstOneLevelPaths___getitem__, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_add", _wrap_HfstOneLevelPaths_add, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_discard", _wrap_HfstOneLevelPaths_discard, METH_VARARGS, NULL},
	 { "new_HfstOneLevelPaths", _wrap_new_HfstOneLevelPaths, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_empty", _wrap_HfstOneLevelPaths_empty, METH_O, NULL},
	 { "HfstOneLevelPaths_size", _wrap_HfstOneLevelPaths_size, METH_O, NULL},
	 { "HfstOneLevelPaths_clear", _wrap_HfstOneLevelPaths_clear, METH_O, NULL},
	 { "HfstOneLevelPaths_swap", _wrap_HfstOneLevelPaths_swap, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_count", _wrap_HfstOneLevelPaths_count, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_begin", _wrap_HfstOneLevelPaths_begin, METH_O, NULL},
	 { "HfstOneLevelPaths_end", _wrap_HfstOneLevelPaths_end, METH_O, NULL},
	 { "HfstOneLevelPaths_rbegin", _wrap_HfstOneLevelPaths_rbegin, METH_O, NULL},
	 { "HfstOneLevelPaths_rend", _wrap_HfstOneLevelPaths_rend, METH_O, NULL},
	 { "HfstOneLevelPaths_erase", _wrap_HfstOneLevelPaths_erase, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_find", _wrap_HfstOneLevelPaths_find, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_lower_bound", _wrap_HfstOneLevelPaths_lower_bound, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_upper_bound", _wrap_HfstOneLevelPaths_upper_bound, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_equal_range", _wrap_HfstOneLevelPaths_equal_range, METH_VARARGS, NULL},
	 { "HfstOneLevelPaths_insert", _wrap_HfstOneLevelPaths_insert, METH_VARARGS, NULL},
	 { "delete_HfstOneLevelPaths", _wrap_delete_HfstOneLevelPaths, METH_O, NULL},
	 { "HfstOneLevelPaths_swigregister", HfstOneLevelPaths_swigregister, METH_O, NULL},
	 { "HfstOneLevelPaths_swiginit", HfstOneLevelPaths_swiginit, METH_VARARGS, NULL},
	 { "new_HfstTwoLevelPath", _wrap_new_HfstTwoLevelPath, METH_VARARGS, NULL},
	 { "HfstTwoLevelPath_first_set", _wrap_HfstTwoLevelPath_first_set, METH_VARARGS, NULL},
	 { "HfstTwoLevelPath_first_get", _wrap_HfstTwoLevelPath_first_get, METH_O, NULL},
	 { "HfstTwoLevelPath_second_set", _wrap_HfstTwoLevelPath_second_set, METH_VARARGS, NULL},
	 { "HfstTwoLevelPath_second_get", _wrap_HfstTwoLevelPath_second_get, METH_O, NULL},
	 { "delete_HfstTwoLevelPath", _wrap_delete_HfstTwoLevelPath, METH_O, NULL},
	 { "HfstTwoLevelPath_swigregister", HfstTwoLevelPath_swigregister, METH_O, NULL},
	 { "HfstTwoLevelPath_swiginit", HfstTwoLevelPath_swiginit, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_iterator", _wrap_HfstTwoLevelPaths_iterator, METH_O, NULL},
	 { "HfstTwoLevelPaths___nonzero__", _wrap_HfstTwoLevelPaths___nonzero__, METH_O, NULL},
	 { "HfstTwoLevelPaths___bool__", _wrap_HfstTwoLevelPaths___bool__, METH_O, NULL},
	 { "HfstTwoLevelPaths___len__", _wrap_HfstTwoLevelPaths___len__, METH_O, NULL},
	 { "HfstTwoLevelPaths_append", _wrap_HfstTwoLevelPaths_append, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths___contains__", _wrap_HfstTwoLevelPaths___contains__, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths___getitem__", _wrap_HfstTwoLevelPaths___getitem__, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_add", _wrap_HfstTwoLevelPaths_add, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_discard", _wrap_HfstTwoLevelPaths_discard, METH_VARARGS, NULL},
	 { "new_HfstTwoLevelPaths", _wrap_new_HfstTwoLevelPaths, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_empty", _wrap_HfstTwoLevelPaths_empty, METH_O, NULL},
	 { "HfstTwoLevelPaths_size", _wrap_HfstTwoLevelPaths_size, METH_O, NULL},
	 { "HfstTwoLevelPaths_clear", _wrap_HfstTwoLevelPaths_clear, METH_O, NULL},
	 { "HfstTwoLevelPaths_swap", _wrap_HfstTwoLevelPaths_swap, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_count", _wrap_HfstTwoLevelPaths_count, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_begin", _wrap_HfstTwoLevelPaths_begin, METH_O, NULL},
	 { "HfstTwoLevelPaths_end", _wrap_HfstTwoLevelPaths_end, METH_O, NULL},
	 { "HfstTwoLevelPaths_rbegin", _wrap_HfstTwoLevelPaths_rbegin, METH_O, NULL},
	 { "HfstTwoLevelPaths_rend", _wrap_HfstTwoLevelPaths_rend, METH_O, NULL},
	 { "HfstTwoLevelPaths_erase", _wrap_HfstTwoLevelPaths_erase, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_find", _wrap_HfstTwoLevelPaths_find, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_lower_bound", _wrap_HfstTwoLevelPaths_lower_bound, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_upper_bound", _wrap_HfstTwoLevelPaths_upper_bound, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_equal_range", _wrap_HfstTwoLevelPaths_equal_range, METH_VARARGS, NULL},
	 { "HfstTwoLevelPaths_insert", _wrap_HfstTwoLevelPaths_insert, METH_VARARGS, NULL},
	 { "delete_HfstTwoLevelPaths", _wrap_delete_HfstTwoLevelPaths, METH_O, NULL},
	 { "HfstTwoLevelPaths_swigregister", HfstTwoLevelPaths_swigregister, METH_O, NULL},
	 { "HfstTwoLevelPaths_swiginit", HfstTwoLevelPaths_swiginit, METH_VARARGS, NULL},
	 { "new_HfstTransducerPair", _wrap_new_HfstTransducerPair, METH_VARARGS, NULL},
	 { "HfstTransducerPair_first_set", _wrap_HfstTransducerPair_first_set, METH_VARARGS, NULL},
	 { "HfstTransducerPair_first_get", _wrap_HfstTransducerPair_first_get, METH_O, NULL},
	 { "HfstTransducerPair_second_set", _wrap_HfstTransducerPair_second_set, METH_VARARGS, NULL},
	 { "HfstTransducerPair_second_get", _wrap_HfstTransducerPair_second_get, METH_O, NULL},
	 { "delete_HfstTransducerPair", _wrap_delete_HfstTransducerPair, METH_O, NULL},
	 { "HfstTransducerPair_swigregister", HfstTransducerPair_swigregister, METH_O, NULL},
	 { "HfstTransducerPair_swiginit", HfstTransducerPair_swiginit, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_iterator", _wrap_HfstTransducerPairVector_iterator, METH_O, NULL},
	 { "HfstTransducerPairVector___nonzero__", _wrap_HfstTransducerPairVector___nonzero__, METH_O, NULL},
	 { "HfstTransducerPairVector___bool__", _wrap_HfstTransducerPairVector___bool__, METH_O, NULL},
	 { "HfstTransducerPairVector___len__", _wrap_HfstTransducerPairVector___len__, METH_O, NULL},
	 { "HfstTransducerPairVector___getslice__", _wrap_HfstTransducerPairVector___getslice__, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector___setslice__", _wrap_HfstTransducerPairVector___setslice__, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector___delslice__", _wrap_HfstTransducerPairVector___delslice__, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector___delitem__", _wrap_HfstTransducerPairVector___delitem__, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector___getitem__", _wrap_HfstTransducerPairVector___getitem__, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector___setitem__", _wrap_HfstTransducerPairVector___setitem__, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_pop", _wrap_HfstTransducerPairVector_pop, METH_O, NULL},
	 { "HfstTransducerPairVector_append", _wrap_HfstTransducerPairVector_append, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_empty", _wrap_HfstTransducerPairVector_empty, METH_O, NULL},
	 { "HfstTransducerPairVector_size", _wrap_HfstTransducerPairVector_size, METH_O, NULL},
	 { "HfstTransducerPairVector_swap", _wrap_HfstTransducerPairVector_swap, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_begin", _wrap_HfstTransducerPairVector_begin, METH_O, NULL},
	 { "HfstTransducerPairVector_end", _wrap_HfstTransducerPairVector_end, METH_O, NULL},
	 { "HfstTransducerPairVector_rbegin", _wrap_HfstTransducerPairVector_rbegin, METH_O, NULL},
	 { "HfstTransducerPairVector_rend", _wrap_HfstTransducerPairVector_rend, METH_O, NULL},
	 { "HfstTransducerPairVector_clear", _wrap_HfstTransducerPairVector_clear, METH_O, NULL},
	 { "HfstTransducerPairVector_get_allocator", _wrap_HfstTransducerPairVector_get_allocator, METH_O, NULL},
	 { "HfstTransducerPairVector_pop_back", _wrap_HfstTransducerPairVector_pop_back, METH_O, NULL},
	 { "HfstTransducerPairVector_erase", _wrap_HfstTransducerPairVector_erase, METH_VARARGS, NULL},
	 { "new_HfstTransducerPairVector", _wrap_new_HfstTransducerPairVector, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_push_back", _wrap_HfstTransducerPairVector_push_back, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_front", _wrap_HfstTransducerPairVector_front, METH_O, NULL},
	 { "HfstTransducerPairVector_back", _wrap_HfstTransducerPairVector_back, METH_O, NULL},
	 { "HfstTransducerPairVector_assign", _wrap_HfstTransducerPairVector_assign, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_resize", _wrap_HfstTransducerPairVector_resize, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_insert", _wrap_HfstTransducerPairVector_insert, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_reserve", _wrap_HfstTransducerPairVector_reserve, METH_VARARGS, NULL},
	 { "HfstTransducerPairVector_capacity", _wrap_HfstTransducerPairVector_capacity, METH_O, NULL},
	 { "delete_HfstTransducerPairVector", _wrap_delete_HfstTransducerPairVector, METH_O, NULL},
	 { "HfstTransducerPairVector_swigregister", HfstTransducerPairVector_swigregister, METH_O, NULL},
	 { "HfstTransducerPairVector_swiginit", HfstTransducerPairVector_swiginit, METH_VARARGS, NULL},
	 { "HfstRuleVector_iterator", _wrap_HfstRuleVector_iterator, METH_O, NULL},
	 { "HfstRuleVector___nonzero__", _wrap_HfstRuleVector___nonzero__, METH_O, NULL},
	 { "HfstRuleVector___bool__", _wrap_HfstRuleVector___bool__, METH_O, NULL},
	 { "HfstRuleVector___len__", _wrap_HfstRuleVector___len__, METH_O, NULL},
	 { "HfstRuleVector___getslice__", _wrap_HfstRuleVector___getslice__, METH_VARARGS, NULL},
	 { "HfstRuleVector___setslice__", _wrap_HfstRuleVector___setslice__, METH_VARARGS, NULL},
	 { "HfstRuleVector___delslice__", _wrap_HfstRuleVector___delslice__, METH_VARARGS, NULL},
	 { "HfstRuleVector___delitem__", _wrap_HfstRuleVector___delitem__, METH_VARARGS, NULL},
	 { "HfstRuleVector___getitem__", _wrap_HfstRuleVector___getitem__, METH_VARARGS, NULL},
	 { "HfstRuleVector___setitem__", _wrap_HfstRuleVector___setitem__, METH_VARARGS, NULL},
	 { "HfstRuleVector_pop", _wrap_HfstRuleVector_pop, METH_O, NULL},
	 { "HfstRuleVector_append", _wrap_HfstRuleVector_append, METH_VARARGS, NULL},
	 { "HfstRuleVector_empty", _wrap_HfstRuleVector_empty, METH_O, NULL},
	 { "HfstRuleVector_size", _wrap_HfstRuleVector_size, METH_O, NULL},
	 { "HfstRuleVector_swap", _wrap_HfstRuleVector_swap, METH_VARARGS, NULL},
	 { "HfstRuleVector_begin", _wrap_HfstRuleVector_begin, METH_O, NULL},
	 { "HfstRuleVector_end", _wrap_HfstRuleVector_end, METH_O, NULL},
	 { "HfstRuleVector_rbegin", _wrap_HfstRuleVector_rbegin, METH_O, NULL},
	 { "HfstRuleVector_rend", _wrap_HfstRuleVector_rend, METH_O, NULL},
	 { "HfstRuleVector_clear", _wrap_HfstRuleVector_clear, METH_O, NULL},
	 { "HfstRuleVector_get_allocator", _wrap_HfstRuleVector_get_allocator, METH_O, NULL},
	 { "HfstRuleVector_pop_back", _wrap_HfstRuleVector_pop_back, METH_O, NULL},
	 { "HfstRuleVector_erase", _wrap_HfstRuleVector_erase, METH_VARARGS, NULL},
	 { "new_HfstRuleVector", _wrap_new_HfstRuleVector, METH_VARARGS, NULL},
	 { "HfstRuleVector_push_back", _wrap_HfstRuleVector_push_back, METH_VARARGS, NULL},
	 { "HfstRuleVector_front", _wrap_HfstRuleVector_front, METH_O, NULL},
	 { "HfstRuleVector_back", _wrap_HfstRuleVector_back, METH_O, NULL},
	 { "HfstRuleVector_assign", _wrap_HfstRuleVector_assign, METH_VARARGS, NULL},
	 { "HfstRuleVector_resize", _wrap_HfstRuleVector_resize, METH_VARARGS, NULL},
	 { "HfstRuleVector_insert", _wrap_HfstRuleVector_insert, METH_VARARGS, NULL},
	 { "HfstRuleVector_reserve", _wrap_HfstRuleVector_reserve, METH_VARARGS, NULL},
	 { "HfstRuleVector_capacity", _wrap_HfstRuleVector_capacity, METH_O, NULL},
	 { "delete_HfstRuleVector", _wrap_delete_HfstRuleVector, METH_O, NULL},
	 { "HfstRuleVector_swigregister", HfstRuleVector_swigregister, METH_O, NULL},
	 { "HfstRuleVector_swiginit", HfstRuleVector_swiginit, METH_VARARGS, NULL},
	 { "new_HfstTransducerUIntPair", _wrap_new_HfstTransducerUIntPair, METH_VARARGS, NULL},
	 { "HfstTransducerUIntPair_first_set", _wrap_HfstTransducerUIntPair_first_set, METH_VARARGS, NULL},
	 { "HfstTransducerUIntPair_first_get", _wrap_HfstTransducerUIntPair_first_get, METH_O, NULL},
	 { "HfstTransducerUIntPair_second_set", _wrap_HfstTransducerUIntPair_second_set, METH_VARARGS, NULL},
	 { "HfstTransducerUIntPair_second_get", _wrap_HfstTransducerUIntPair_second_get, METH_O, NULL},
	 { "delete_HfstTransducerUIntPair", _wrap_delete_HfstTransducerUIntPair, METH_O, NULL},
	 { "HfstTransducerUIntPair_swigregister", HfstTransducerUIntPair_swigregister, METH_O, NULL},
	 { "HfstTransducerUIntPair_swiginit", HfstTransducerUIntPair_swiginit, METH_VARARGS, NULL},
	 { "LocationVector_iterator", _wrap_LocationVector_iterator, METH_O, NULL},
	 { "LocationVector___nonzero__", _wrap_LocationVector___nonzero__, METH_O, NULL},
	 { "LocationVector___bool__", _wrap_LocationVector___bool__, METH_O, NULL},
	 { "LocationVector___len__", _wrap_LocationVector___len__, METH_O, NULL},
	 { "LocationVector___getslice__", _wrap_LocationVector___getslice__, METH_VARARGS, NULL},
	 { "LocationVector___setslice__", _wrap_LocationVector___setslice__, METH_VARARGS, NULL},
	 { "LocationVector___delslice__", _wrap_LocationVector___delslice__, METH_VARARGS, NULL},
	 { "LocationVector___delitem__", _wrap_LocationVector___delitem__, METH_VARARGS, NULL},
	 { "LocationVector___getitem__", _wrap_LocationVector___getitem__, METH_VARARGS, NULL},
	 { "LocationVector___setitem__", _wrap_LocationVector___setitem__, METH_VARARGS, NULL},
	 { "LocationVector_pop", _wrap_LocationVector_pop, METH_O, NULL},
	 { "LocationVector_append", _wrap_LocationVector_append, METH_VARARGS, NULL},
	 { "LocationVector_empty", _wrap_LocationVector_empty, METH_O, NULL},
	 { "LocationVector_size", _wrap_LocationVector_size, METH_O, NULL},
	 { "LocationVector_swap", _wrap_LocationVector_swap, METH_VARARGS, NULL},
	 { "LocationVector_begin", _wrap_LocationVector_begin, METH_O, NULL},
	 { "LocationVector_end", _wrap_LocationVector_end, METH_O, NULL},
	 { "LocationVector_rbegin", _wrap_LocationVector_rbegin, METH_O, NULL},
	 { "LocationVector_rend", _wrap_LocationVector_rend, METH_O, NULL},
	 { "LocationVector_clear", _wrap_LocationVector_clear, METH_O, NULL},
	 { "LocationVector_get_allocator", _wrap_LocationVector_get_allocator, METH_O, NULL},
	 { "LocationVector_pop_back", _wrap_LocationVector_pop_back, METH_O, NULL},
	 { "LocationVector_erase", _wrap_LocationVector_erase, METH_VARARGS, NULL},
	 { "new_LocationVector", _wrap_new_LocationVector, METH_VARARGS, NULL},
	 { "LocationVector_push_back", _wrap_LocationVector_push_back, METH_VARARGS, NULL},
	 { "LocationVector_front", _wrap_LocationVector_front, METH_O, NULL},
	 { "LocationVector_back", _wrap_LocationVector_back, METH_O, NULL},
	 { "LocationVector_assign", _wrap_LocationVector_assign, METH_VARARGS, NULL},
	 { "LocationVector_resize", _wrap_LocationVector_resize, METH_VARARGS, NULL},
	 { "LocationVector_insert", _wrap_LocationVector_insert, METH_VARARGS, NULL},
	 { "LocationVector_reserve", _wrap_LocationVector_reserve, METH_VARARGS, NULL},
	 { "LocationVector_capacity", _wrap_LocationVector_capacity, METH_O, NULL},
	 { "delete_LocationVector", _wrap_delete_LocationVector, METH_O, NULL},
	 { "LocationVector_swigregister", LocationVector_swigregister, METH_O, NULL},
	 { "LocationVector_swiginit", LocationVector_swiginit, METH_VARARGS, NULL},
	 { "LocationVectorVector_iterator", _wrap_LocationVectorVector_iterator, METH_O, NULL},
	 { "LocationVectorVector___nonzero__", _wrap_LocationVectorVector___nonzero__, METH_O, NULL},
	 { "LocationVectorVector___bool__", _wrap_LocationVectorVector___bool__, METH_O, NULL},
	 { "LocationVectorVector___len__", _wrap_LocationVectorVector___len__, METH_O, NULL},
	 { "LocationVectorVector___getslice__", _wrap_LocationVectorVector___getslice__, METH_VARARGS, NULL},
	 { "LocationVectorVector___setslice__", _wrap_LocationVectorVector___setslice__, METH_VARARGS, NULL},
	 { "LocationVectorVector___delslice__", _wrap_LocationVectorVector___delslice__, METH_VARARGS, NULL},
	 { "LocationVectorVector___delitem__", _wrap_LocationVectorVector___delitem__, METH_VARARGS, NULL},
	 { "LocationVectorVector___getitem__", _wrap_LocationVectorVector___getitem__, METH_VARARGS, NULL},
	 { "LocationVectorVector___setitem__", _wrap_LocationVectorVector___setitem__, METH_VARARGS, NULL},
	 { "LocationVectorVector_pop", _wrap_LocationVectorVector_pop, METH_O, NULL},
	 { "LocationVectorVector_append", _wrap_LocationVectorVector_append, METH_VARARGS, NULL},
	 { "LocationVectorVector_empty", _wrap_LocationVectorVector_empty, METH_O, NULL},
	 { "LocationVectorVector_size", _wrap_LocationVectorVector_size, METH_O, NULL},
	 { "LocationVectorVector_swap", _wrap_LocationVectorVector_swap, METH_VARARGS, NULL},
	 { "LocationVectorVector_begin", _wrap_LocationVectorVector_begin, METH_O, NULL},
	 { "LocationVectorVector_end", _wrap_LocationVectorVector_end, METH_O, NULL},
	 { "LocationVectorVector_rbegin", _wrap_LocationVectorVector_rbegin, METH_O, NULL},
	 { "LocationVectorVector_rend", _wrap_LocationVectorVector_rend, METH_O, NULL},
	 { "LocationVectorVector_clear", _wrap_LocationVectorVector_clear, METH_O, NULL},
	 { "LocationVectorVector_get_allocator", _wrap_LocationVectorVector_get_allocator, METH_O, NULL},
	 { "LocationVectorVector_pop_back", _wrap_LocationVectorVector_pop_back, METH_O, NULL},
	 { "LocationVectorVector_erase", _wrap_LocationVectorVector_erase, METH_VARARGS, NULL},
	 { "new_LocationVectorVector", _wrap_new_LocationVectorVector, METH_VARARGS, NULL},
	 { "LocationVectorVector_push_back", _wrap_LocationVectorVector_push_back, METH_VARARGS, NULL},
	 { "LocationVectorVector_front", _wrap_LocationVectorVector_front, METH_O, NULL},
	 { "LocationVectorVector_back", _wrap_LocationVectorVector_back, METH_O, NULL},
	 { "LocationVectorVector_assign", _wrap_LocationVectorVector_assign, METH_VARARGS, NULL},
	 { "LocationVectorVector_resize", _wrap_LocationVectorVector_resize, METH_VARARGS, NULL},
	 { "LocationVectorVector_insert", _wrap_LocationVectorVector_insert, METH_VARARGS, NULL},
	 { "LocationVectorVector_reserve", _wrap_LocationVectorVector_reserve, METH_VARARGS, NULL},
	 { "LocationVectorVector_capacity", _wrap_LocationVectorVector_capacity, METH_O, NULL},
	 { "delete_LocationVectorVector", _wrap_delete_LocationVectorVector, METH_O, NULL},
	 { "LocationVectorVector_swigregister", LocationVectorVector_swigregister, METH_O, NULL},
	 { "LocationVectorVector_swiginit", LocationVectorVector_swiginit, METH_VARARGS, NULL},
	 { "new_HfstException", _wrap_new_HfstException, METH_VARARGS, NULL},
	 { "delete_HfstException", _wrap_delete_HfstException, METH_O, NULL},
	 { "HfstException_what", _wrap_HfstException_what, METH_O, NULL},
	 { "HfstException_swigregister", HfstException_swigregister, METH_O, NULL},
	 { "HfstException_swiginit", HfstException_swiginit, METH_VARARGS, NULL},
	 { "new_HfstTransducerTypeMismatchException", _wrap_new_HfstTransducerTypeMismatchException, METH_VARARGS, NULL},
	 { "delete_HfstTransducerTypeMismatchException", _wrap_delete_HfstTransducerTypeMismatchException, METH_O, NULL},
	 { "HfstTransducerTypeMismatchException_what", _wrap_HfstTransducerTypeMismatchException_what, METH_O, NULL},
	 { "HfstTransducerTypeMismatchException_swigregister", HfstTransducerTypeMismatchException_swigregister, METH_O, NULL},
	 { "HfstTransducerTypeMismatchException_swiginit", HfstTransducerTypeMismatchException_swiginit, METH_VARARGS, NULL},
	 { "new_ImplementationTypeNotAvailableException", _wrap_new_ImplementationTypeNotAvailableException, METH_VARARGS, NULL},
	 { "delete_ImplementationTypeNotAvailableException", _wrap_delete_ImplementationTypeNotAvailableException, METH_O, NULL},
	 { "ImplementationTypeNotAvailableException_what", _wrap_ImplementationTypeNotAvailableException_what, METH_O, NULL},
	 { "ImplementationTypeNotAvailableException_get_type", _wrap_ImplementationTypeNotAvailableException_get_type, METH_O, NULL},
	 { "ImplementationTypeNotAvailableException_swigregister", ImplementationTypeNotAvailableException_swigregister, METH_O, NULL},
	 { "ImplementationTypeNotAvailableException_swiginit", ImplementationTypeNotAvailableException_swiginit, METH_VARARGS, NULL},
	 { "new_FunctionNotImplementedException", _wrap_new_FunctionNotImplementedException, METH_VARARGS, NULL},
	 { "delete_FunctionNotImplementedException", _wrap_delete_FunctionNotImplementedException, METH_O, NULL},
	 { "FunctionNotImplementedException_what", _wrap_FunctionNotImplementedException_what, METH_O, NULL},
	 { "FunctionNotImplementedException_swigregister", FunctionNotImplementedException_swigregister, METH_O, NULL},
	 { "FunctionNotImplementedException_swiginit", FunctionNotImplementedException_swiginit, METH_VARARGS, NULL},
	 { "new_StreamNotReadableException", _wrap_new_StreamNotReadableException, METH_VARARGS, NULL},
	 { "delete_StreamNotReadableException", _wrap_delete_StreamNotReadableException, METH_O, NULL},
	 { "StreamNotReadableException_what", _wrap_StreamNotReadableException_what, METH_O, NULL},
	 { "StreamNotReadableException_swigregister", StreamNotReadableException_swigregister, METH_O, NULL},
	 { "StreamNotReadableException_swiginit", StreamNotReadableException_swiginit, METH_VARARGS, NULL},
	 { "new_StreamCannotBeWrittenException", _wrap_new_StreamCannotBeWrittenException, METH_VARARGS, NULL},
	 { "delete_StreamCannotBeWrittenException", _wrap_delete_StreamCannotBeWrittenException, METH_O, NULL},
	 { "StreamCannotBeWrittenException_what", _wrap_StreamCannotBeWrittenException_what, METH_O, NULL},
	 { "StreamCannotBeWrittenException_swigregister", StreamCannotBeWrittenException_swigregister, METH_O, NULL},
	 { "StreamCannotBeWrittenException_swiginit", StreamCannotBeWrittenException_swiginit, METH_VARARGS, NULL},
	 { "new_StreamIsClosedException", _wrap_new_StreamIsClosedException, METH_VARARGS, NULL},
	 { "delete_StreamIsClosedException", _wrap_delete_StreamIsClosedException, METH_O, NULL},
	 { "StreamIsClosedException_what", _wrap_StreamIsClosedException_what, METH_O, NULL},
	 { "StreamIsClosedException_swigregister", StreamIsClosedException_swigregister, METH_O, NULL},
	 { "StreamIsClosedException_swiginit", StreamIsClosedException_swiginit, METH_VARARGS, NULL},
	 { "new_EndOfStreamException", _wrap_new_EndOfStreamException, METH_VARARGS, NULL},
	 { "delete_EndOfStreamException", _wrap_delete_EndOfStreamException, METH_O, NULL},
	 { "EndOfStreamException_what", _wrap_EndOfStreamException_what, METH_O, NULL},
	 { "EndOfStreamException_swigregister", EndOfStreamException_swigregister, METH_O, NULL},
	 { "EndOfStreamException_swiginit", EndOfStreamException_swiginit, METH_VARARGS, NULL},
	 { "new_TransducerIsCyclicException", _wrap_new_TransducerIsCyclicException, METH_VARARGS, NULL},
	 { "delete_TransducerIsCyclicException", _wrap_delete_TransducerIsCyclicException, METH_O, NULL},
	 { "TransducerIsCyclicException_what", _wrap_TransducerIsCyclicException_what, METH_O, NULL},
	 { "TransducerIsCyclicException_swigregister", TransducerIsCyclicException_swigregister, METH_O, NULL},
	 { "TransducerIsCyclicException_swiginit", TransducerIsCyclicException_swiginit, METH_VARARGS, NULL},
	 { "new_NotTransducerStreamException", _wrap_new_NotTransducerStreamException, METH_VARARGS, NULL},
	 { "delete_NotTransducerStreamException", _wrap_delete_NotTransducerStreamException, METH_O, NULL},
	 { "NotTransducerStreamException_what", _wrap_NotTransducerStreamException_what, METH_O, NULL},
	 { "NotTransducerStreamException_swigregister", NotTransducerStreamException_swigregister, METH_O, NULL},
	 { "NotTransducerStreamException_swiginit", NotTransducerStreamException_swiginit, METH_VARARGS, NULL},
	 { "new_NotValidAttFormatException", _wrap_new_NotValidAttFormatException, METH_VARARGS, NULL},
	 { "delete_NotValidAttFormatException", _wrap_delete_NotValidAttFormatException, METH_O, NULL},
	 { "NotValidAttFormatException_what", _wrap_NotValidAttFormatException_what, METH_O, NULL},
	 { "NotValidAttFormatException_swigregister", NotValidAttFormatException_swigregister, METH_O, NULL},
	 { "NotValidAttFormatException_swiginit", NotValidAttFormatException_swiginit, METH_VARARGS, NULL},
	 { "new_NotValidPrologFormatException", _wrap_new_NotValidPrologFormatException, METH_VARARGS, NULL},
	 { "delete_NotValidPrologFormatException", _wrap_delete_NotValidPrologFormatException, METH_O, NULL},
	 { "NotValidPrologFormatException_what", _wrap_NotValidPrologFormatException_what, METH_O, NULL},
	 { "NotValidPrologFormatException_swigregister", NotValidPrologFormatException_swigregister, METH_O, NULL},
	 { "NotValidPrologFormatException_swiginit", NotValidPrologFormatException_swiginit, METH_VARARGS, NULL},
	 { "new_NotValidLexcFormatException", _wrap_new_NotValidLexcFormatException, METH_VARARGS, NULL},
	 { "delete_NotValidLexcFormatException", _wrap_delete_NotValidLexcFormatException, METH_O, NULL},
	 { "NotValidLexcFormatException_what", _wrap_NotValidLexcFormatException_what, METH_O, NULL},
	 { "NotValidLexcFormatException_swigregister", NotValidLexcFormatException_swigregister, METH_O, NULL},
	 { "NotValidLexcFormatException_swiginit", NotValidLexcFormatException_swiginit, METH_VARARGS, NULL},
	 { "new_StateIsNotFinalException", _wrap_new_StateIsNotFinalException, METH_VARARGS, NULL},
	 { "delete_StateIsNotFinalException", _wrap_delete_StateIsNotFinalException, METH_O, NULL},
	 { "StateIsNotFinalException_what", _wrap_StateIsNotFinalException_what, METH_O, NULL},
	 { "StateIsNotFinalException_swigregister", StateIsNotFinalException_swigregister, METH_O, NULL},
	 { "StateIsNotFinalException_swiginit", StateIsNotFinalException_swiginit, METH_VARARGS, NULL},
	 { "new_ContextTransducersAreNotAutomataException", _wrap_new_ContextTransducersAreNotAutomataException, METH_VARARGS, NULL},
	 { "delete_ContextTransducersAreNotAutomataException", _wrap_delete_ContextTransducersAreNotAutomataException, METH_O, NULL},
	 { "ContextTransducersAreNotAutomataException_what", _wrap_ContextTransducersAreNotAutomataException_what, METH_O, NULL},
	 { "ContextTransducersAreNotAutomataException_swigregister", ContextTransducersAreNotAutomataException_swigregister, METH_O, NULL},
	 { "ContextTransducersAreNotAutomataException_swiginit", ContextTransducersAreNotAutomataException_swiginit, METH_VARARGS, NULL},
	 { "new_TransducersAreNotAutomataException", _wrap_new_TransducersAreNotAutomataException, METH_VARARGS, NULL},
	 { "delete_TransducersAreNotAutomataException", _wrap_delete_TransducersAreNotAutomataException, METH_O, NULL},
	 { "TransducersAreNotAutomataException_what", _wrap_TransducersAreNotAutomataException_what, METH_O, NULL},
	 { "TransducersAreNotAutomataException_swigregister", TransducersAreNotAutomataException_swigregister, METH_O, NULL},
	 { "TransducersAreNotAutomataException_swiginit", TransducersAreNotAutomataException_swiginit, METH_VARARGS, NULL},
	 { "new_StateIndexOutOfBoundsException", _wrap_new_StateIndexOutOfBoundsException, METH_VARARGS, NULL},
	 { "delete_StateIndexOutOfBoundsException", _wrap_delete_StateIndexOutOfBoundsException, METH_O, NULL},
	 { "StateIndexOutOfBoundsException_what", _wrap_StateIndexOutOfBoundsException_what, METH_O, NULL},
	 { "StateIndexOutOfBoundsException_swigregister", StateIndexOutOfBoundsException_swigregister, METH_O, NULL},
	 { "StateIndexOutOfBoundsException_swiginit", StateIndexOutOfBoundsException_swiginit, METH_VARARGS, NULL},
	 { "new_TransducerHeaderException", _wrap_new_TransducerHeaderException, METH_VARARGS, NULL},
	 { "delete_TransducerHeaderException", _wrap_delete_TransducerHeaderException, METH_O, NULL},
	 { "TransducerHeaderException_what", _wrap_TransducerHeaderException_what, METH_O, NULL},
	 { "TransducerHeaderException_swigregister", TransducerHeaderException_swigregister, METH_O, NULL},
	 { "TransducerHeaderException_swiginit", TransducerHeaderException_swiginit, METH_VARARGS, NULL},
	 { "new_MissingOpenFstInputSymbolTableException", _wrap_new_MissingOpenFstInputSymbolTableException, METH_VARARGS, NULL},
	 { "delete_MissingOpenFstInputSymbolTableException", _wrap_delete_MissingOpenFstInputSymbolTableException, METH_O, NULL},
	 { "MissingOpenFstInputSymbolTableException_what", _wrap_MissingOpenFstInputSymbolTableException_what, METH_O, NULL},
	 { "MissingOpenFstInputSymbolTableException_swigregister", MissingOpenFstInputSymbolTableException_swigregister, METH_O, NULL},
	 { "MissingOpenFstInputSymbolTableException_swiginit", MissingOpenFstInputSymbolTableException_swiginit, METH_VARARGS, NULL},
	 { "new_TransducerTypeMismatchException", _wrap_new_TransducerTypeMismatchException, METH_VARARGS, NULL},
	 { "delete_TransducerTypeMismatchException", _wrap_delete_TransducerTypeMismatchException, METH_O, NULL},
	 { "TransducerTypeMismatchException_what", _wrap_TransducerTypeMismatchException_what, METH_O, NULL},
	 { "TransducerTypeMismatchException_swigregister", TransducerTypeMismatchException_swigregister, METH_O, NULL},
	 { "TransducerTypeMismatchException_swiginit", TransducerTypeMismatchException_swiginit, METH_VARARGS, NULL},
	 { "new_EmptySetOfContextsException", _wrap_new_EmptySetOfContextsException, METH_VARARGS, NULL},
	 { "delete_EmptySetOfContextsException", _wrap_delete_EmptySetOfContextsException, METH_O, NULL},
	 { "EmptySetOfContextsException_what", _wrap_EmptySetOfContextsException_what, METH_O, NULL},
	 { "EmptySetOfContextsException_swigregister", EmptySetOfContextsException_swigregister, METH_O, NULL},
	 { "EmptySetOfContextsException_swiginit", EmptySetOfContextsException_swiginit, METH_VARARGS, NULL},
	 { "new_SpecifiedTypeRequiredException", _wrap_new_SpecifiedTypeRequiredException, METH_VARARGS, NULL},
	 { "delete_SpecifiedTypeRequiredException", _wrap_delete_SpecifiedTypeRequiredException, METH_O, NULL},
	 { "SpecifiedTypeRequiredException_what", _wrap_SpecifiedTypeRequiredException_what, METH_O, NULL},
	 { "SpecifiedTypeRequiredException_swigregister", SpecifiedTypeRequiredException_swigregister, METH_O, NULL},
	 { "SpecifiedTypeRequiredException_swiginit", SpecifiedTypeRequiredException_swiginit, METH_VARARGS, NULL},
	 { "new_HfstFatalException", _wrap_new_HfstFatalException, METH_VARARGS, NULL},
	 { "delete_HfstFatalException", _wrap_delete_HfstFatalException, METH_O, NULL},
	 { "HfstFatalException_what", _wrap_HfstFatalException_what, METH_O, NULL},
	 { "HfstFatalException_swigregister", HfstFatalException_swigregister, METH_O, NULL},
	 { "HfstFatalException_swiginit", HfstFatalException_swiginit, METH_VARARGS, NULL},
	 { "new_TransducerHasWrongTypeException", _wrap_new_TransducerHasWrongTypeException, METH_VARARGS, NULL},
	 { "delete_TransducerHasWrongTypeException", _wrap_delete_TransducerHasWrongTypeException, METH_O, NULL},
	 { "TransducerHasWrongTypeException_what", _wrap_TransducerHasWrongTypeException_what, METH_O, NULL},
	 { "TransducerHasWrongTypeException_swigregister", TransducerHasWrongTypeException_swigregister, METH_O, NULL},
	 { "TransducerHasWrongTypeException_swiginit", TransducerHasWrongTypeException_swiginit, METH_VARARGS, NULL},
	 { "new_IncorrectUtf8CodingException", _wrap_new_IncorrectUtf8CodingException, METH_VARARGS, NULL},
	 { "delete_IncorrectUtf8CodingException", _wrap_delete_IncorrectUtf8CodingException, METH_O, NULL},
	 { "IncorrectUtf8CodingException_what", _wrap_IncorrectUtf8CodingException_what, METH_O, NULL},
	 { "IncorrectUtf8CodingException_swigregister", IncorrectUtf8CodingException_swigregister, METH_O, NULL},
	 { "IncorrectUtf8CodingException_swiginit", IncorrectUtf8CodingException_swiginit, METH_VARARGS, NULL},
	 { "new_EmptyStringException", _wrap_new_EmptyStringException, METH_VARARGS, NULL},
	 { "delete_EmptyStringException", _wrap_delete_EmptyStringException, METH_O, NULL},
	 { "EmptyStringException_what", _wrap_EmptyStringException_what, METH_O, NULL},
	 { "EmptyStringException_swigregister", EmptyStringException_swigregister, METH_O, NULL},
	 { "EmptyStringException_swiginit", EmptyStringException_swiginit, METH_VARARGS, NULL},
	 { "new_SymbolNotFoundException", _wrap_new_SymbolNotFoundException, METH_VARARGS, NULL},
	 { "delete_SymbolNotFoundException", _wrap_delete_SymbolNotFoundException, METH_O, NULL},
	 { "SymbolNotFoundException_what", _wrap_SymbolNotFoundException_what, METH_O, NULL},
	 { "SymbolNotFoundException_swigregister", SymbolNotFoundException_swigregister, METH_O, NULL},
	 { "SymbolNotFoundException_swiginit", SymbolNotFoundException_swiginit, METH_VARARGS, NULL},
	 { "new_MetadataException", _wrap_new_MetadataException, METH_VARARGS, NULL},
	 { "delete_MetadataException", _wrap_delete_MetadataException, METH_O, NULL},
	 { "MetadataException_what", _wrap_MetadataException_what, METH_O, NULL},
	 { "MetadataException_swigregister", MetadataException_swigregister, METH_O, NULL},
	 { "MetadataException_swiginit", MetadataException_swiginit, METH_VARARGS, NULL},
	 { "new_FlagDiacriticsAreNotIdentitiesException", _wrap_new_FlagDiacriticsAreNotIdentitiesException, METH_VARARGS, NULL},
	 { "delete_FlagDiacriticsAreNotIdentitiesException", _wrap_delete_FlagDiacriticsAreNotIdentitiesException, METH_O, NULL},
	 { "FlagDiacriticsAreNotIdentitiesException_what", _wrap_FlagDiacriticsAreNotIdentitiesException_what, METH_O, NULL},
	 { "FlagDiacriticsAreNotIdentitiesException_swigregister", FlagDiacriticsAreNotIdentitiesException_swigregister, METH_O, NULL},
	 { "FlagDiacriticsAreNotIdentitiesException_swiginit", FlagDiacriticsAreNotIdentitiesException_swiginit, METH_VARARGS, NULL},
	 { "Location_start_set", _wrap_Location_start_set, METH_VARARGS, NULL},
	 { "Location_start_get", _wrap_Location_start_get, METH_O, NULL},
	 { "Location_length_set", _wrap_Location_length_set, METH_VARARGS, NULL},
	 { "Location_length_get", _wrap_Location_length_get, METH_O, NULL},
	 { "Location_input_set", _wrap_Location_input_set, METH_VARARGS, NULL},
	 { "Location_input_get", _wrap_Location_input_get, METH_O, NULL},
	 { "Location_output_set", _wrap_Location_output_set, METH_VARARGS, NULL},
	 { "Location_output_get", _wrap_Location_output_get, METH_O, NULL},
	 { "Location_tag_set", _wrap_Location_tag_set, METH_VARARGS, NULL},
	 { "Location_tag_get", _wrap_Location_tag_get, METH_O, NULL},
	 { "Location_weight_set", _wrap_Location_weight_set, METH_VARARGS, NULL},
	 { "Location_weight_get", _wrap_Location_weight_get, METH_O, NULL},
	 { "Location_input_parts_set", _wrap_Location_input_parts_set, METH_VARARGS, NULL},
	 { "Location_input_parts_get", _wrap_Location_input_parts_get, METH_O, NULL},
	 { "Location_output_parts_set", _wrap_Location_output_parts_set, METH_VARARGS, NULL},
	 { "Location_output_parts_get", _wrap_Location_output_parts_get, METH_O, NULL},
	 { "Location_input_symbol_strings_set", _wrap_Location_input_symbol_strings_set, METH_VARARGS, NULL},
	 { "Location_input_symbol_strings_get", _wrap_Location_input_symbol_strings_get, METH_O, NULL},
	 { "Location_output_symbol_strings_set", _wrap_Location_output_symbol_strings_set, METH_VARARGS, NULL},
	 { "Location_output_symbol_strings_get", _wrap_Location_output_symbol_strings_get, METH_O, NULL},
	 { "new_Location", _wrap_new_Location, METH_NOARGS, NULL},
	 { "delete_Location", _wrap_delete_Location, METH_O, NULL},
	 { "Location_swigregister", Location_swigregister, METH_O, NULL},
	 { "Location_swiginit", Location_swiginit, METH_VARARGS, NULL},
	 { "new_Rule", _wrap_new_Rule, METH_VARARGS, NULL},
	 { "Rule_get_mapping", _wrap_Rule_get_mapping, METH_O, NULL},
	 { "Rule_get_context", _wrap_Rule_get_context, METH_O, NULL},
	 { "Rule_get_replType", _wrap_Rule_get_replType, METH_O, NULL},
	 { "Rule_encodeFlags", _wrap_Rule_encodeFlags, METH_O, NULL},
	 { "delete_Rule", _wrap_delete_Rule, METH_O, NULL},
	 { "Rule_swigregister", Rule_swigregister, METH_O, NULL},
	 { "Rule_swiginit", Rule_swiginit, METH_VARARGS, NULL},
	 { "replace", _wrap_replace, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "xerox_replace_left", _wrap_xerox_replace_left, METH_VARARGS, NULL},
	 { "replace_leftmost_longest_match", _wrap_replace_leftmost_longest_match, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "replace_rightmost_longest_match", _wrap_replace_rightmost_longest_match, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "replace_leftmost_shortest_match", _wrap_replace_leftmost_shortest_match, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "replace_rightmost_shortest_match", _wrap_replace_rightmost_shortest_match, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "replace_epenthesis", _wrap_replace_epenthesis, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "xerox_restriction", _wrap_xerox_restriction, METH_VARARGS, NULL},
	 { "before", _wrap_before, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "after", _wrap_after, METH_VARARGS, "\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "is_diacritic", _wrap_is_diacritic, METH_O, "\n"
		"\n"
		"\n"
		"Whether symbol *symbol* is a flag diacritic.\n"
		"\n"
		"Flag diacritics are of the form\n"
		"\n"
		"     @[PNDRCU][.][A-Z]+([.][A-Z]+)?@\n"
		"\n"
		""},
	 { "compile_pmatch_expression", _wrap_compile_pmatch_expression, METH_O, "\n"
		"\n"
		"\n"
		"Compile a pmatch expression into a tuple of transducers.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `expr` :\n"
		"    A string defining how pmatch is done.\n"
		"\n"
		"See also: hfst.compile_pmatch_file\n"
		"\n"
		""},
	 { "HfstTransducer_set_name", _wrap_HfstTransducer_set_name, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Rename the transducer *name*.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `name` :\n"
		"    The name of the transducer.\n"
		"\n"
		"See also: get_name\n"
		"\n"
		""},
	 { "HfstTransducer_get_name", _wrap_HfstTransducer_get_name, METH_O, "\n"
		"\n"
		"\n"
		"Get the name of the transducer.\n"
		"\n"
		"See also: set_name\n"
		"\n"
		""},
	 { "HfstTransducer_get_type", _wrap_HfstTransducer_get_type, METH_O, "\n"
		"\n"
		"\n"
		"The implementation type of the transducer.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"hfst.ImplementationType\n"
		"\n"
		""},
	 { "HfstTransducer_set_property", _wrap_HfstTransducer_set_property, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Set arbitrary string property *property* to *value*.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `property` :\n"
		"    A string naming the property.\n"
		"* `value` :\n"
		"    A string expressing the value of *property*.\n"
		"\n"
		"set_property('name', 'name of the transducer') equals set_name('name of the\n"
		"transducer').\n"
		"\n"
		"note: While this function is capable of creating endless amounts of arbitrary\n"
		"    metadata, it is suggested that property names are drawn from central\n"
		"    repository, or prefixed with \"x-\". A property that does not follow this\n"
		"    convention may affect the behavior of transducer in future releases.\n"
		"\n"
		""},
	 { "HfstTransducer_get_property", _wrap_HfstTransducer_get_property, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Get arbitrary string propert *property*.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `property` :\n"
		"    The name of the property whose value is returned. get_property('name') works\n"
		"    like get_name().\n"
		"\n"
		""},
	 { "HfstTransducer_get_properties", _wrap_HfstTransducer_get_properties, METH_O, "\n"
		"\n"
		"\n"
		"Get all properties from the transducer.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"A dictionary whose keys are properties and whose values are the values of those\n"
		"properties.\n"
		"\n"
		""},
	 { "HfstTransducer_compare", _wrap_HfstTransducer_compare, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Whether this transducer and *another* are equivalent.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `another` :\n"
		"    The compared transducer.\n"
		"\n"
		"pre: *self* and *another* must have the same implementation type.\n"
		"\n"
		"Two transducers are equivalent iff they accept the same input/output string\n"
		"pairs with the same weights and the same alignments.\n"
		"\n"
		"note: For weighted transducers, the function often returns false negatives due\n"
		"    to weight precision issues.\n"
		"\n"
		""},
	 { "HfstTransducer_number_of_states", _wrap_HfstTransducer_number_of_states, METH_O, "\n"
		"\n"
		"\n"
		"The number of states in the transducer.\n"
		"\n"
		""},
	 { "HfstTransducer_number_of_arcs", _wrap_HfstTransducer_number_of_arcs, METH_O, "\n"
		"\n"
		"\n"
		"The number of transitions in the transducer.\n"
		"\n"
		""},
	 { "HfstTransducer_get_alphabet", _wrap_HfstTransducer_get_alphabet, METH_O, "\n"
		"\n"
		"\n"
		"Get the alphabet of the transducer.\n"
		"\n"
		"The alphabet is defined as the set of symbols known to the transducer.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"A tuple of strings.\n"
		"\n"
		""},
	 { "HfstTransducer_is_cyclic", _wrap_HfstTransducer_is_cyclic, METH_O, "\n"
		"\n"
		"\n"
		"Whether the transducer is cyclic.\n"
		"\n"
		""},
	 { "HfstTransducer_is_automaton", _wrap_HfstTransducer_is_automaton, METH_O, "\n"
		"\n"
		"\n"
		"Whether each transition in the transducer has equivalent input and output\n"
		"symbols.\n"
		"\n"
		"note: Transition with hfst.UNKNOWN on both sides IS NOT a transition with\n"
		"    equivalent input and output symbols.\n"
		"\n"
		"note: Transition with hfst.IDENTITY on both sides IS a transition with\n"
		"    equivalent input and output symbols.\n"
		"\n"
		""},
	 { "HfstTransducer_is_infinitely_ambiguous", _wrap_HfstTransducer_is_infinitely_ambiguous, METH_O, "\n"
		"\n"
		"\n"
		"Whether the transducer is infinitely ambiguous.\n"
		"\n"
		"A transducer is infinitely ambiguous if there exists an input that will yield\n"
		"infinitely many results, i.e. there are input epsilon loops that are traversed\n"
		"with that input.\n"
		"\n"
		""},
	 { "HfstTransducer_is_lookup_infinitely_ambiguous", _wrap_HfstTransducer_is_lookup_infinitely_ambiguous, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Whether lookup of path *input* will have infinite results.\n"
		"\n"
		"Currently, this function will return whether the transducer is infinitely\n"
		"ambiguous on any lookup path found in the transducer, i.e. the argument *input*\n"
		"is ignored.\n"
		"\n"
		"Todo\n"
		"Do not ignore the argument *input*\n"
		"\n"
		""},
	 { "HfstTransducer_has_flag_diacritics", _wrap_HfstTransducer_has_flag_diacritics, METH_O, "\n"
		"\n"
		"\n"
		"Whether the transducer has flag diacritics in its transitions.\n"
		"\n"
		""},
	 { "HfstTransducer_insert_to_alphabet", _wrap_HfstTransducer_insert_to_alphabet, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Explicitly insert *symbol* to the alphabet of the transducer.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `symbol` :\n"
		"    The symbol (string) to be inserted.\n"
		"\n"
		"note: Usually this function is not needed since new symbols are added to the\n"
		"    alphabet by default.\n"
		"\n"
		""},
	 { "HfstTransducer_remove_from_alphabet", _wrap_HfstTransducer_remove_from_alphabet, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Remove *symbol* from the alphabet of the transducer.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `symbol` :\n"
		"    The symbol (string) to be removed.\n"
		"\n"
		"pre: *symbol* does not occur in any transition of the transducer.\n"
		"\n"
		"note: Use with care, removing a symbol that occurs in a transition of the\n"
		"    transducer can have unexpected results.\n"
		"\n"
		""},
	 { "HfstTransducer_is_implementation_type_available", _wrap_HfstTransducer_is_implementation_type_available, METH_O, "\n"
		"\n"
		"\n"
		"Whether HFST is linked to the transducer library needed by implementation type\n"
		"*type*.\n"
		"\n"
		""},
	 { "HfstTransducer_longest_path_size", _wrap_HfstTransducer_longest_path_size, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Get length of longest path of the transducer.\n"
		"\n"
		""},
	 { "HfstTransducer_concatenate", _wrap_HfstTransducer_concatenate, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Concatenate this transducer with *another*.\n"
		"\n"
		""},
	 { "HfstTransducer_disjunct", _wrap_HfstTransducer_disjunct, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Disjunct this transducer with *another*.\n"
		"\n"
		""},
	 { "HfstTransducer_subtract", _wrap_HfstTransducer_subtract, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Subtract transducer *another* from this transducer.\n"
		"\n"
		""},
	 { "HfstTransducer_intersect", _wrap_HfstTransducer_intersect, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Intersect this transducer with *another*.\n"
		"\n"
		""},
	 { "HfstTransducer_compose", _wrap_HfstTransducer_compose, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Compose this transducer with *another*.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `another` :\n"
		"    The second argument in the composition. Not modified.\n"
		"\n"
		""},
	 { "HfstTransducer_compose_intersect", _wrap_HfstTransducer_compose_intersect, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Compose this transducer with the intersection of transducers in *v*.\n"
		"\n"
		"If *invert* is true, then compose the intersection of the transducers in *v*\n"
		"with this transducer.\n"
		"\n"
		"The algorithm used by this function is faster than intersecting all transducers\n"
		"one by one and then composing this transducer with the intersection.\n"
		"\n"
		"pre: The transducers in *v* are deterministic and epsilon-free.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `v` :\n"
		"    A tuple of transducers.\n"
		"* `invert` :\n"
		"    Whether the intersection of the transducers in *v* is composed with this\n"
		"    transducer.\n"
		"\n"
		""},
	 { "HfstTransducer_priority_union", _wrap_HfstTransducer_priority_union, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Make priority union of this transducer with *another*.\n"
		"\n"
		"For the operation t1.priority_union(t2), the result is a union of t1 and t2,\n"
		"except that whenever t1 and t2 have the same string on left side, the path in t2\n"
		"overrides the path in t1.\n"
		"\n"
		"Example\n"
		"\n"
		"     Transducer 1 (t1):\n"
		"     a : a\n"
		"     b : b\n"
		"\n"
		"     Transducer 2 (t2):\n"
		"     b : B\n"
		"     c : C\n"
		"\n"
		"     Result ( t1.priority_union(t2) ):\n"
		"     a : a\n"
		"     b : B\n"
		"     c : C For more information, read fsmbook.\n"
		"\n"
		""},
	 { "HfstTransducer_lenient_composition", _wrap_HfstTransducer_lenient_composition, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Perform a lenient composition on this transducer and *another*.\n"
		"\n"
		"TODO: explain more.\n"
		"\n"
		""},
	 { "HfstTransducer_cross_product", _wrap_HfstTransducer_cross_product, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Make cross product of this transducer with *another*.\n"
		"\n"
		"It pairs every string of this with every string of *another*. If strings are not\n"
		"the same length, epsilon padding will be added in the end of the shorter string.\n"
		"\n"
		"pre: Both transducers must be automata, i.e. map strings onto themselves.\n"
		"\n"
		""},
	 { "HfstTransducer_shuffle", _wrap_HfstTransducer_shuffle, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Shuffle this transducer with transducer *another*.\n"
		"\n"
		"If transducer A accepts string 'foo' and transducer B string 'bar', the\n"
		"transducer that results from shuffling A and B accepts all strings\n"
		"[(f|b)(o|a)(o|r)].\n"
		"\n"
		"pre: Both transducers must be automata, i.e. map strings onto themselves.\n"
		"\n"
		""},
	 { "HfstTransducer_remove_epsilons", _wrap_HfstTransducer_remove_epsilons, METH_O, "\n"
		"\n"
		"\n"
		"Remove all *epsilon:epsilon* transitions from the transducer so that the\n"
		"resulting transducer is equivalent to the original one.\n"
		"\n"
		""},
	 { "HfstTransducer_determinize", _wrap_HfstTransducer_determinize, METH_O, "\n"
		"\n"
		"\n"
		"Determinize the transducer.\n"
		"\n"
		"Determinizing a transducer yields an equivalent transducer that has no state\n"
		"with two or more transitions whose input:output symbol pairs are the same.\n"
		"\n"
		""},
	 { "HfstTransducer_minimize", _wrap_HfstTransducer_minimize, METH_O, "\n"
		"\n"
		"\n"
		"Minimize the transducer.\n"
		"\n"
		"Minimizing a transducer yields an equivalent transducer with the smallest number\n"
		"of states.\n"
		"\n"
		"Bug\n"
		"OpenFst's minimization algorithm seems to add epsilon transitions to weighted\n"
		"transducers?\n"
		"\n"
		""},
	 { "HfstTransducer_prune", _wrap_HfstTransducer_prune, METH_O, "\n"
		"\n"
		"\n"
		"Make transducer coaccessible.\n"
		"\n"
		"A transducer is coaccessible iff there is a path from every state to a final\n"
		"state.\n"
		"\n"
		""},
	 { "HfstTransducer_eliminate_flags", _wrap_HfstTransducer_eliminate_flags, METH_O, "\n"
		"\n"
		"\n"
		"Eliminate flag diacritics listed in *symbols* from the transducer.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `symbols` :\n"
		"    The flags to be eliminated. TODO: explain more.\n"
		"\n"
		"An equivalent transducer with no flags listed in *symbols*.\n"
		"\n"
		""},
	 { "HfstTransducer_eliminate_flag", _wrap_HfstTransducer_eliminate_flag, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Eliminate flag diacritic *symbol* from the transducer.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `symbol` :\n"
		"    The flag to be eliminated. TODO: explain more.\n"
		"\n"
		"An equivalent transducer with no flags *symbol*.\n"
		"\n"
		""},
	 { "HfstTransducer_n_best", _wrap_HfstTransducer_n_best, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Extract *n* best paths of the transducer.\n"
		"\n"
		"In the case of a weighted transducer (hfst.ImplementationType.TROPICAL_OPENFST_TYPE or\n"
		"hfst.ImplementationType.LOG_OPENFST_TYPE), best paths are defined as paths with the lowest\n"
		"weight. In the case of an unweighted transducer (hfst.ImplementationType.SFST_TYPE or\n"
		"hfst.ImplementationType.FOMA_TYPE), the function returns random paths.\n"
		"\n"
		"This function is not implemented for hfst.ImplementationType.FOMA_TYPE or\n"
		"hfst.ImplementationType.SFST_TYPE. If this function is called by an HfstTransducer of type\n"
		"hfst.ImplementationType.FOMA_TYPE or hfst.ImplementationType.SFST_TYPE, it is converted to\n"
		"hfst.ImplementationType.TROPICAL_OPENFST_TYPE, paths are extracted and it is converted back\n"
		"to hfst.ImplementationType.FOMA_TYPE or hfst.ImplementationType.SFST_TYPE. If HFST is not linked to\n"
		"OpenFst library, an hfst.exceptions.ImplementationTypeNotAvailableException is\n"
		"thrown.\n"
		"\n"
		""},
	 { "HfstTransducer_convert", _wrap_HfstTransducer_convert, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Convert the transducer into an equivalent transducer in format *type*.\n"
		"\n"
		"If a weighted transducer is converted into an unweighted one, all weights are\n"
		"lost. In the reverse case, all weights are initialized to the semiring's one.\n"
		"\n"
		"A transducer of type hfst.ImplementationType.SFST_TYPE, hfst.ImplementationType.TROPICAL_OPENFST_TYPE,\n"
		"hfst.ImplementationType.LOG_OPENFST_TYPE or hfst.ImplementationType.FOMA_TYPE can be converted into an\n"
		"hfst.ImplementationType.HFST_OL_TYPE or hfst.ImplementationType.HFST_OLW_TYPE transducer, but an\n"
		"hfst.ImplementationType.HFST_OL_TYPE or hfst.ImplementationType.HFST_OLW_TYPE transducer cannot be\n"
		"converted to any other type.\n"
		"\n"
		"note: For conversion between HfstBasicTransducer and HfstTransducer, see\n"
		"    hfst.HfstTransducer.__init__ and hfst.HfstBasicTransducer.__init__\n"
		"\n"
		""},
	 { "HfstTransducer_repeat_star", _wrap_HfstTransducer_repeat_star, METH_O, "\n"
		"\n"
		"\n"
		"A concatenation of N transducers where N is any number from zero to infinity.\n"
		"\n"
		""},
	 { "HfstTransducer_repeat_plus", _wrap_HfstTransducer_repeat_plus, METH_O, "\n"
		"\n"
		"\n"
		"A concatenation of N transducers where N is any number from one to infinity.\n"
		"\n"
		""},
	 { "HfstTransducer_repeat_n", _wrap_HfstTransducer_repeat_n, METH_VARARGS, "\n"
		"\n"
		"\n"
		"A concatenation of *n* transducers.\n"
		"\n"
		""},
	 { "HfstTransducer_repeat_n_to_k", _wrap_HfstTransducer_repeat_n_to_k, METH_VARARGS, "\n"
		"\n"
		"\n"
		"A concatenation of N transducers where N is any number from *n* to *k*,\n"
		"inclusive.\n"
		"\n"
		""},
	 { "HfstTransducer_repeat_n_minus", _wrap_HfstTransducer_repeat_n_minus, METH_VARARGS, "\n"
		"\n"
		"\n"
		"A concatenation of N transducers where N is any number from zero to *n*,\n"
		"inclusive.\n"
		"\n"
		""},
	 { "HfstTransducer_repeat_n_plus", _wrap_HfstTransducer_repeat_n_plus, METH_VARARGS, "\n"
		"\n"
		"\n"
		"A concatenation of N transducers where N is any number from *n* to infinity,\n"
		"inclusive.\n"
		"\n"
		""},
	 { "HfstTransducer_invert", _wrap_HfstTransducer_invert, METH_O, "\n"
		"\n"
		"\n"
		"Swap the input and output symbols of each transition in the transducer.\n"
		"\n"
		""},
	 { "HfstTransducer_reverse", _wrap_HfstTransducer_reverse, METH_O, "\n"
		"\n"
		"\n"
		"Reverse the transducer.\n"
		"\n"
		"A reverted transducer accepts the string 'n(0) n(1) ... n(N)' iff the original\n"
		"transducer accepts the string 'n(N) n(N-1) ... n(0)'\n"
		"\n"
		""},
	 { "HfstTransducer_input_project", _wrap_HfstTransducer_input_project, METH_O, "\n"
		"\n"
		"\n"
		"Extract the input language of the transducer.\n"
		"\n"
		"All transition symbol pairs *isymbol:osymbol* are changed to *isymbol:isymbol*.\n"
		"\n"
		""},
	 { "HfstTransducer_output_project", _wrap_HfstTransducer_output_project, METH_O, "\n"
		"\n"
		"\n"
		"Extract the output language of the transducer.\n"
		"\n"
		"All transition symbol pairs *isymbol:osymbol* are changed to *osymbol:osymbol*.\n"
		"\n"
		""},
	 { "HfstTransducer_optionalize", _wrap_HfstTransducer_optionalize, METH_O, "\n"
		"\n"
		"\n"
		"Disjunct the transducer with an epsilon transducer.\n"
		"\n"
		""},
	 { "HfstTransducer_insert_freely", _wrap_HfstTransducer_insert_freely, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Freely insert a transition or a transducer into the transducer.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `ins` :\n"
		"    The transition or transducer to be inserted.\n"
		"\n"
		"If *ins* is a transition, i.e. a 2-tuple of strings: A transition is added to\n"
		"each state in this transducer. The transition leads from that state to itself\n"
		"with input and output symbols defined by *ins*. The weight of the transition is\n"
		"zero.\n"
		"\n"
		"If *ins* is an hfst.HfstTransducer: A copy of *ins* is attached with epsilon\n"
		"transitions to each state of this transducer. After the operation, for each\n"
		"state S in this transducer, there is an epsilon transition that leads from state\n"
		"S to the initial state of *ins*, and for each final state of *ins*, there is an\n"
		"epsilon transition that leads from that final state to state S in this\n"
		"transducer. The weights of the final states in *ins* are copied to the epsilon\n"
		"transitions leading to state S.\n"
		"\n"
		""},
	 { "HfstTransducer__substitute_symbol", _wrap_HfstTransducer__substitute_symbol, METH_VARARGS, NULL},
	 { "HfstTransducer__substitute_symbol_pair", _wrap_HfstTransducer__substitute_symbol_pair, METH_VARARGS, NULL},
	 { "HfstTransducer__substitute_symbol_pair_with_set", _wrap_HfstTransducer__substitute_symbol_pair_with_set, METH_VARARGS, NULL},
	 { "HfstTransducer__substitute_symbol_pair_with_transducer", _wrap_HfstTransducer__substitute_symbol_pair_with_transducer, METH_VARARGS, NULL},
	 { "HfstTransducer__substitute_symbols", _wrap_HfstTransducer__substitute_symbols, METH_VARARGS, NULL},
	 { "HfstTransducer__substitute_symbol_pairs", _wrap_HfstTransducer__substitute_symbol_pairs, METH_VARARGS, NULL},
	 { "HfstTransducer_set_final_weights", _wrap_HfstTransducer_set_final_weights, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Set the weights of all final states to *weight*.\n"
		"\n"
		"If the HfstTransducer is of unweighted type (hfst.ImplementationType.SFST_TYPE or\n"
		"hfst.ImplementationType.FOMA_TYPE), nothing is done.\n"
		"\n"
		""},
	 { "HfstTransducer_push_weights_to_start", _wrap_HfstTransducer_push_weights_to_start, METH_O, "\n"
		"\n"
		"\n"
		"Push weights towards initial state.\n"
		"\n"
		"If the HfstTransducer is of unweighted type (hfst.ImplementationType.SFST_TYPE or\n"
		"hfst.ImplementationType.FOMA_TYPE), nothing is done.\n"
		"\n"
		"An example:\n"
		"\n"
		"     >>> import hfst\n"
		"     >>> tr = hfst.regex('[a::1 a:b::0.3 (b::0)]::0.7;')\n"
		"     >>> tr.push_weights_to_start()\n"
		"     >>> print(tr)\n"
		"     0       1       a       a       2.000000\n"
		"     1       2       a       b       0.000000\n"
		"     2       3       b       b       0.000000\n"
		"     2       0.000000\n"
		"     3       0.000000\n"
		"\n"
		"See also: hfst.HfstTransducer.push_weights_to_end\n"
		"\n"
		""},
	 { "HfstTransducer_push_weights_to_end", _wrap_HfstTransducer_push_weights_to_end, METH_O, "\n"
		"\n"
		"\n"
		"Push weights towards final state(s).\n"
		"\n"
		"If the HfstTransducer is of unweighted type (hfst.ImplementationType.SFST_TYPE or\n"
		"hfst.ImplementationType.FOMA_TYPE), nothing is done.\n"
		"\n"
		"An example:\n"
		"\n"
		"     >>> import hfst\n"
		"     >>> tr = hfst.regex('[a::1 a:b::0.3 (b::0)]::0.7;')\n"
		"     >>> tr.push_weights_to_end()\n"
		"     >>> print(tr)\n"
		"     0       1       a       a       0.000000\n"
		"     1       2       a       b       0.000000\n"
		"     2       3       b       b       0.000000\n"
		"     2       2.000000\n"
		"     3       2.000000\n"
		"\n"
		"See also: hfst.HfstTransducer.push_weights_to_start\n"
		"\n"
		""},
	 { "HfstTransducer_minus", _wrap_HfstTransducer_minus, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Alias for subtract.\n"
		"\n"
		"See also: hfst.HfstTransducer.subtract\n"
		"\n"
		""},
	 { "HfstTransducer_conjunct", _wrap_HfstTransducer_conjunct, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Alias for intersect.\n"
		"\n"
		"See also: hfst.HfstTransducer.intersect\n"
		"\n"
		""},
	 { "HfstTransducer_lookup_optimize", _wrap_HfstTransducer_lookup_optimize, METH_O, "\n"
		"\n"
		"\n"
		"Optimize the transducer for lookup.\n"
		"\n"
		"This effectively converts the transducer into hfst.ImplementationType.HFST_OL_TYPE.\n"
		"\n"
		""},
	 { "HfstTransducer_remove_optimization", _wrap_HfstTransducer_remove_optimization, METH_O, "\n"
		"\n"
		"\n"
		"Remove lookup optimization.\n"
		"\n"
		"This effectively converts transducer (back) into default fst type.\n"
		"\n"
		""},
	 { "new_HfstTransducer", _wrap_new_HfstTransducer, METH_VARARGS, NULL},
	 { "delete_HfstTransducer", _wrap_delete_HfstTransducer, METH_O, NULL},
	 { "HfstTransducer___str__", _wrap_HfstTransducer___str__, METH_O, "\n"
		"\n"
		"\n"
		"An AT&T representation of the transducer.\n"
		"\n"
		"Defined for print command. An example:\n"
		"\n"
		"     >>> print(hfst.regex('[foo:bar::2]+'))\n"
		"     0       1       foo     bar     2.000000\n"
		"     1       1       foo     bar     2.000000\n"
		"     1       0.000000 Todo\n"
		"Works only for small transducers.\n"
		"\n"
		""},
	 { "HfstTransducer_write", _wrap_HfstTransducer_write, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Write the transducer in binary format to *ostr*.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `ostr` :\n"
		"    A hfst.HfstOutputStream where the transducer is written.\n"
		"\n"
		""},
	 { "HfstTransducer__extract_shortest_paths", _wrap_HfstTransducer__extract_shortest_paths, METH_O, NULL},
	 { "HfstTransducer__extract_longest_paths", _wrap_HfstTransducer__extract_longest_paths, METH_VARARGS, NULL},
	 { "HfstTransducer__extract_paths", _wrap_HfstTransducer__extract_paths, METH_VARARGS, NULL},
	 { "HfstTransducer__extract_paths_fd", _wrap_HfstTransducer__extract_paths_fd, METH_VARARGS, NULL},
	 { "HfstTransducer__extract_random_paths", _wrap_HfstTransducer__extract_random_paths, METH_VARARGS, NULL},
	 { "HfstTransducer__extract_random_paths_fd", _wrap_HfstTransducer__extract_random_paths_fd, METH_VARARGS, NULL},
	 { "HfstTransducer__lookup_vector", _wrap_HfstTransducer__lookup_vector, METH_VARARGS, NULL},
	 { "HfstTransducer__lookup_fd_vector", _wrap_HfstTransducer__lookup_fd_vector, METH_VARARGS, NULL},
	 { "HfstTransducer__lookup_fd_string", _wrap_HfstTransducer__lookup_fd_string, METH_VARARGS, NULL},
	 { "HfstTransducer__lookup_string", _wrap_HfstTransducer__lookup_string, METH_VARARGS, NULL},
	 { "HfstTransducer_swigregister", HfstTransducer_swigregister, METH_O, NULL},
	 { "HfstTransducer_swiginit", HfstTransducer_swiginit, METH_VARARGS, NULL},
	 { "create_hfst_output_stream", _wrap_create_hfst_output_stream, METH_VARARGS, NULL},
	 { "delete_HfstOutputStream", _wrap_delete_HfstOutputStream, METH_O, NULL},
	 { "HfstOutputStream_flush", _wrap_HfstOutputStream_flush, METH_O, "\n"
		"\n"
		"\n"
		"Flush the stream.\n"
		"\n"
		""},
	 { "HfstOutputStream_close", _wrap_HfstOutputStream_close, METH_O, "\n"
		"\n"
		"\n"
		"Close the stream.\n"
		"\n"
		"If the stream points to standard output, nothing is done.\n"
		"\n"
		""},
	 { "HfstOutputStream_redirect", _wrap_HfstOutputStream_redirect, METH_VARARGS, NULL},
	 { "new_HfstOutputStream", _wrap_new_HfstOutputStream, METH_NOARGS, NULL},
	 { "HfstOutputStream_swigregister", HfstOutputStream_swigregister, METH_O, NULL},
	 { "HfstOutputStream_swiginit", HfstOutputStream_swiginit, METH_VARARGS, NULL},
	 { "new_HfstInputStream", _wrap_new_HfstInputStream, METH_VARARGS, NULL},
	 { "delete_HfstInputStream", _wrap_delete_HfstInputStream, METH_O, NULL},
	 { "HfstInputStream_close", _wrap_HfstInputStream_close, METH_O, "\n"
		"\n"
		"\n"
		"Close the stream.\n"
		"\n"
		"If the stream points to standard input, nothing is done.\n"
		"\n"
		""},
	 { "HfstInputStream_is_eof", _wrap_HfstInputStream_is_eof, METH_O, "\n"
		"\n"
		"\n"
		"Whether the stream is at end.\n"
		"\n"
		""},
	 { "HfstInputStream_is_bad", _wrap_HfstInputStream_is_bad, METH_O, "\n"
		"\n"
		"\n"
		"Whether badbit is set.\n"
		"\n"
		""},
	 { "HfstInputStream_is_good", _wrap_HfstInputStream_is_good, METH_O, "\n"
		"\n"
		"\n"
		"Whether the state of the stream is good for input operations.\n"
		"\n"
		""},
	 { "HfstInputStream_get_type", _wrap_HfstInputStream_get_type, METH_O, "\n"
		"\n"
		"\n"
		"The type of the first transducer in the stream.\n"
		"\n"
		"By default, all transducers in a stream have the same type, else a\n"
		"TransducerTypeMismatchException is thrown when reading the first transducer that\n"
		"has a different type than the previous ones.\n"
		"\n"
		""},
	 { "HfstInputStream_read", _wrap_HfstInputStream_read, METH_O, "\n"
		"\n"
		"\n"
		"Return next transducer.\n"
		"\n"
		"Exceptions\n"
		"----------\n"
		"* `EndOfStreamException` :\n"
		"\n"
		""},
	 { "HfstInputStream_swigregister", HfstInputStream_swigregister, METH_O, NULL},
	 { "HfstInputStream_swiginit", HfstInputStream_swiginit, METH_VARARGS, NULL},
	 { "new_HfstTokenizer", _wrap_new_HfstTokenizer, METH_NOARGS, NULL},
	 { "HfstTokenizer_add_skip_symbol", _wrap_HfstTokenizer_add_skip_symbol, METH_VARARGS, NULL},
	 { "HfstTokenizer_add_multichar_symbol", _wrap_HfstTokenizer_add_multichar_symbol, METH_VARARGS, NULL},
	 { "HfstTokenizer_tokenize_one_level", _wrap_HfstTokenizer_tokenize_one_level, METH_VARARGS, NULL},
	 { "HfstTokenizer_tokenize_space_separated", _wrap_HfstTokenizer_tokenize_space_separated, METH_O, NULL},
	 { "HfstTokenizer_tokenize", _wrap_HfstTokenizer_tokenize, METH_VARARGS, NULL},
	 { "HfstTokenizer_check_utf8_correctness", _wrap_HfstTokenizer_check_utf8_correctness, METH_O, NULL},
	 { "delete_HfstTokenizer", _wrap_delete_HfstTokenizer, METH_O, NULL},
	 { "HfstTokenizer_swigregister", HfstTokenizer_swigregister, METH_O, NULL},
	 { "HfstTokenizer_swiginit", HfstTokenizer_swiginit, METH_VARARGS, NULL},
	 { "new_HfstBasicTransducer", _wrap_new_HfstBasicTransducer, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_name_set", _wrap_HfstBasicTransducer_name_set, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_name_get", _wrap_HfstBasicTransducer_name_get, METH_O, NULL},
	 { "HfstBasicTransducer_add_symbol_to_alphabet", _wrap_HfstBasicTransducer_add_symbol_to_alphabet, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_remove_symbol_from_alphabet", _wrap_HfstBasicTransducer_remove_symbol_from_alphabet, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_remove_symbols_from_alphabet", _wrap_HfstBasicTransducer_remove_symbols_from_alphabet, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_add_symbols_to_alphabet", _wrap_HfstBasicTransducer_add_symbols_to_alphabet, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_symbols_used", _wrap_HfstBasicTransducer_symbols_used, METH_O, NULL},
	 { "HfstBasicTransducer_prune_alphabet", _wrap_HfstBasicTransducer_prune_alphabet, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_get_alphabet", _wrap_HfstBasicTransducer_get_alphabet, METH_O, NULL},
	 { "HfstBasicTransducer_get_input_symbols", _wrap_HfstBasicTransducer_get_input_symbols, METH_O, NULL},
	 { "HfstBasicTransducer_get_output_symbols", _wrap_HfstBasicTransducer_get_output_symbols, METH_O, NULL},
	 { "HfstBasicTransducer_get_transition_pairs", _wrap_HfstBasicTransducer_get_transition_pairs, METH_O, NULL},
	 { "HfstBasicTransducer_add_state", _wrap_HfstBasicTransducer_add_state, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_get_max_state", _wrap_HfstBasicTransducer_get_max_state, METH_O, NULL},
	 { "HfstBasicTransducer_states", _wrap_HfstBasicTransducer_states, METH_O, NULL},
	 { "HfstBasicTransducer_remove_transition", _wrap_HfstBasicTransducer_remove_transition, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_is_final_state", _wrap_HfstBasicTransducer_is_final_state, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_get_final_weight", _wrap_HfstBasicTransducer_get_final_weight, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_set_final_weight", _wrap_HfstBasicTransducer_set_final_weight, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_remove_final_weight", _wrap_HfstBasicTransducer_remove_final_weight, METH_VARARGS, NULL},
	 { "HfstBasicTransducer__transitions", _wrap_HfstBasicTransducer__transitions, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_is_infinitely_ambiguous", _wrap_HfstBasicTransducer_is_infinitely_ambiguous, METH_O, NULL},
	 { "HfstBasicTransducer_is_lookup_infinitely_ambiguous", _wrap_HfstBasicTransducer_is_lookup_infinitely_ambiguous, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_longest_path_size", _wrap_HfstBasicTransducer_longest_path_size, METH_O, NULL},
	 { "HfstBasicTransducer__substitute_symbol", _wrap_HfstBasicTransducer__substitute_symbol, METH_VARARGS, NULL},
	 { "HfstBasicTransducer__substitute_symbol_pair", _wrap_HfstBasicTransducer__substitute_symbol_pair, METH_VARARGS, NULL},
	 { "HfstBasicTransducer__substitute_symbol_pair_with_set", _wrap_HfstBasicTransducer__substitute_symbol_pair_with_set, METH_VARARGS, NULL},
	 { "HfstBasicTransducer__substitute_symbol_pair_with_transducer", _wrap_HfstBasicTransducer__substitute_symbol_pair_with_transducer, METH_VARARGS, NULL},
	 { "HfstBasicTransducer__substitute_symbols", _wrap_HfstBasicTransducer__substitute_symbols, METH_VARARGS, NULL},
	 { "HfstBasicTransducer__substitute_symbol_pairs", _wrap_HfstBasicTransducer__substitute_symbol_pairs, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_insert_freely", _wrap_HfstBasicTransducer_insert_freely, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_sort_arcs", _wrap_HfstBasicTransducer_sort_arcs, METH_O, NULL},
	 { "HfstBasicTransducer_disjunct", _wrap_HfstBasicTransducer_disjunct, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_harmonize", _wrap_HfstBasicTransducer_harmonize, METH_VARARGS, NULL},
	 { "HfstBasicTransducer__lookup", _wrap_HfstBasicTransducer__lookup, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_get_prolog_string", _wrap_HfstBasicTransducer_get_prolog_string, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_get_xfst_string", _wrap_HfstBasicTransducer_get_xfst_string, METH_VARARGS, NULL},
	 { "HfstBasicTransducer_get_att_string", _wrap_HfstBasicTransducer_get_att_string, METH_VARARGS, NULL},
	 { "HfstBasicTransducer___str__", _wrap_HfstBasicTransducer___str__, METH_O, NULL},
	 { "HfstBasicTransducer_add_transition", _wrap_HfstBasicTransducer_add_transition, METH_VARARGS, NULL},
	 { "delete_HfstBasicTransducer", _wrap_delete_HfstBasicTransducer, METH_O, NULL},
	 { "HfstBasicTransducer_swigregister", HfstBasicTransducer_swigregister, METH_O, NULL},
	 { "HfstBasicTransducer_swiginit", HfstBasicTransducer_swiginit, METH_VARARGS, NULL},
	 { "new_HfstBasicTransition", _wrap_new_HfstBasicTransition, METH_VARARGS, NULL},
	 { "delete_HfstBasicTransition", _wrap_delete_HfstBasicTransition, METH_O, NULL},
	 { "HfstBasicTransition_get_target_state", _wrap_HfstBasicTransition_get_target_state, METH_O, NULL},
	 { "HfstBasicTransition_get_input_symbol", _wrap_HfstBasicTransition_get_input_symbol, METH_O, NULL},
	 { "HfstBasicTransition_set_input_symbol", _wrap_HfstBasicTransition_set_input_symbol, METH_VARARGS, NULL},
	 { "HfstBasicTransition_get_output_symbol", _wrap_HfstBasicTransition_get_output_symbol, METH_O, NULL},
	 { "HfstBasicTransition_set_output_symbol", _wrap_HfstBasicTransition_set_output_symbol, METH_VARARGS, NULL},
	 { "HfstBasicTransition_get_weight", _wrap_HfstBasicTransition_get_weight, METH_O, NULL},
	 { "HfstBasicTransition_set_weight", _wrap_HfstBasicTransition_set_weight, METH_VARARGS, NULL},
	 { "HfstBasicTransition___str__", _wrap_HfstBasicTransition___str__, METH_O, NULL},
	 { "HfstBasicTransition_swigregister", HfstBasicTransition_swigregister, METH_O, NULL},
	 { "HfstBasicTransition_swiginit", HfstBasicTransition_swiginit, METH_VARARGS, NULL},
	 { "new_XreCompiler", _wrap_new_XreCompiler, METH_VARARGS, NULL},
	 { "XreCompiler_define_list", _wrap_XreCompiler_define_list, METH_VARARGS, NULL},
	 { "XreCompiler_define_function", _wrap_XreCompiler_define_function, METH_VARARGS, NULL},
	 { "XreCompiler_is_definition", _wrap_XreCompiler_is_definition, METH_VARARGS, NULL},
	 { "XreCompiler_is_function_definition", _wrap_XreCompiler_is_function_definition, METH_VARARGS, NULL},
	 { "XreCompiler_undefine", _wrap_XreCompiler_undefine, METH_VARARGS, NULL},
	 { "XreCompiler_compile", _wrap_XreCompiler_compile, METH_VARARGS, NULL},
	 { "XreCompiler_set_verbosity", _wrap_XreCompiler_set_verbosity, METH_VARARGS, NULL},
	 { "XreCompiler_getOutputToConsole", _wrap_XreCompiler_getOutputToConsole, METH_O, NULL},
	 { "XreCompiler_set_expand_definitions", _wrap_XreCompiler_set_expand_definitions, METH_VARARGS, NULL},
	 { "XreCompiler_set_harmonization", _wrap_XreCompiler_set_harmonization, METH_VARARGS, NULL},
	 { "XreCompiler_contained_only_comments", _wrap_XreCompiler_contained_only_comments, METH_O, NULL},
	 { "XreCompiler_define_xre", _wrap_XreCompiler_define_xre, METH_VARARGS, NULL},
	 { "XreCompiler_define_transducer", _wrap_XreCompiler_define_transducer, METH_VARARGS, NULL},
	 { "XreCompiler_setOutputToConsole", _wrap_XreCompiler_setOutputToConsole, METH_VARARGS, NULL},
	 { "XreCompiler_compile_first", _wrap_XreCompiler_compile_first, METH_VARARGS, NULL},
	 { "delete_XreCompiler", _wrap_delete_XreCompiler, METH_O, NULL},
	 { "XreCompiler_swigregister", XreCompiler_swigregister, METH_O, NULL},
	 { "XreCompiler_swiginit", XreCompiler_swiginit, METH_VARARGS, NULL},
	 { "new_LexcCompiler", _wrap_new_LexcCompiler, METH_VARARGS, NULL},
	 { "LexcCompiler_setVerbosity", _wrap_LexcCompiler_setVerbosity, METH_VARARGS, NULL},
	 { "LexcCompiler_setOutputToConsole", _wrap_LexcCompiler_setOutputToConsole, METH_VARARGS, NULL},
	 { "delete_LexcCompiler", _wrap_delete_LexcCompiler, METH_O, NULL},
	 { "LexcCompiler_swigregister", LexcCompiler_swigregister, METH_O, NULL},
	 { "LexcCompiler_swiginit", LexcCompiler_swiginit, METH_VARARGS, NULL},
	 { "new_XfstCompiler", _wrap_new_XfstCompiler, METH_VARARGS, NULL},
	 { "XfstCompiler_setOutputToConsole", _wrap_XfstCompiler_setOutputToConsole, METH_VARARGS, NULL},
	 { "XfstCompiler_setReadInteractiveTextFromStdin", _wrap_XfstCompiler_setReadInteractiveTextFromStdin, METH_VARARGS, NULL},
	 { "XfstCompiler_setReadline", _wrap_XfstCompiler_setReadline, METH_VARARGS, NULL},
	 { "XfstCompiler_setVerbosity", _wrap_XfstCompiler_setVerbosity, METH_VARARGS, NULL},
	 { "XfstCompiler_set", _wrap_XfstCompiler_set, METH_VARARGS, NULL},
	 { "XfstCompiler_get_prompt", _wrap_XfstCompiler_get_prompt, METH_O, NULL},
	 { "XfstCompiler_apply_up", _wrap_XfstCompiler_apply_up, METH_VARARGS, NULL},
	 { "XfstCompiler_apply_down", _wrap_XfstCompiler_apply_down, METH_VARARGS, NULL},
	 { "XfstCompiler_parse_line", _wrap_XfstCompiler_parse_line, METH_VARARGS, NULL},
	 { "XfstCompiler_quit_requested", _wrap_XfstCompiler_quit_requested, METH_O, NULL},
	 { "delete_XfstCompiler", _wrap_delete_XfstCompiler, METH_O, NULL},
	 { "XfstCompiler_swigregister", XfstCompiler_swigregister, METH_O, NULL},
	 { "XfstCompiler_swiginit", XfstCompiler_swiginit, METH_VARARGS, NULL},
	 { "get_hfst_regex_error_message", _wrap_get_hfst_regex_error_message, METH_NOARGS, NULL},
	 { "hfst_regex", _wrap_hfst_regex, METH_VARARGS, NULL},
	 { "get_hfst_xfst_string_one", _wrap_get_hfst_xfst_string_one, METH_NOARGS, NULL},
	 { "get_hfst_xfst_string_two", _wrap_get_hfst_xfst_string_two, METH_NOARGS, NULL},
	 { "hfst_compile_xfst_to_string_one", _wrap_hfst_compile_xfst_to_string_one, METH_VARARGS, NULL},
	 { "hfst_compile_xfst", _wrap_hfst_compile_xfst, METH_VARARGS, NULL},
	 { "get_hfst_lexc_output", _wrap_get_hfst_lexc_output, METH_NOARGS, NULL},
	 { "hfst_compile_lexc", _wrap_hfst_compile_lexc, METH_VARARGS, NULL},
	 { "get_hfst_sfst_output", _wrap_get_hfst_sfst_output, METH_NOARGS, NULL},
	 { "hfst_compile_sfst", _wrap_hfst_compile_sfst, METH_VARARGS, NULL},
	 { "one_level_paths_to_string", _wrap_one_level_paths_to_string, METH_O, NULL},
	 { "two_level_paths_to_string", _wrap_two_level_paths_to_string, METH_O, NULL},
	 { "parse_prolog_network_line", _wrap_parse_prolog_network_line, METH_VARARGS, NULL},
	 { "parse_prolog_arc_line", _wrap_parse_prolog_arc_line, METH_VARARGS, NULL},
	 { "parse_prolog_symbol_line", _wrap_parse_prolog_symbol_line, METH_VARARGS, NULL},
	 { "parse_prolog_final_line", _wrap_parse_prolog_final_line, METH_VARARGS, NULL},
	 { "set_default_fst_type", _wrap_set_default_fst_type, METH_O, "\n"
		"\n"
		"\n"
		"Set the default implementation type.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `impl` :\n"
		"    An hfst.ImplementationType.\n"
		"\n"
		"Set the implementation type (SFST_TYPE, TROPICAL_OPENFST_TYPE, FOMA_TYPE) that\n"
		"is used by default by all operations that create transducers. The default value\n"
		"is TROPICAL_OPENFST_TYPE\n"
		"\n"
		""},
	 { "get_default_fst_type", _wrap_get_default_fst_type, METH_NOARGS, "\n"
		"\n"
		"\n"
		"Get default transducer implementation type.\n"
		"\n"
		"If the default type is not set, it defaults to hfst.ImplementationType.TROPICAL_OPENFST_TYPE\n"
		"\n"
		""},
	 { "fst_type_to_string", _wrap_fst_type_to_string, METH_O, "\n"
		"\n"
		"\n"
		"Get a string representation of transducer implementation type *type*.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `type` :\n"
		"    An hfst.ImplementationType.\n"
		"\n"
		""},
	 { "two_level_if", _wrap_two_level_if, METH_VARARGS, NULL},
	 { "two_level_only_if", _wrap_two_level_only_if, METH_VARARGS, NULL},
	 { "two_level_if_and_only_if", _wrap_two_level_if_and_only_if, METH_VARARGS, NULL},
	 { "replace_down_karttunen", _wrap_replace_down_karttunen, METH_VARARGS, NULL},
	 { "replace_right", _wrap_replace_right, METH_VARARGS, NULL},
	 { "replace_left", _wrap_replace_left, METH_VARARGS, NULL},
	 { "replace_up", _wrap_replace_up, METH_VARARGS, NULL},
	 { "replace_down", _wrap_replace_down, METH_VARARGS, NULL},
	 { "left_replace_up", _wrap_left_replace_up, METH_VARARGS, NULL},
	 { "left_replace_down", _wrap_left_replace_down, METH_VARARGS, NULL},
	 { "left_replace_down_karttunen", _wrap_left_replace_down_karttunen, METH_VARARGS, NULL},
	 { "left_replace_left", _wrap_left_replace_left, METH_VARARGS, NULL},
	 { "left_replace_right", _wrap_left_replace_right, METH_VARARGS, NULL},
	 { "restriction", _wrap_restriction, METH_VARARGS, NULL},
	 { "coercion", _wrap_coercion, METH_VARARGS, NULL},
	 { "restriction_and_coercion", _wrap_restriction_and_coercion, METH_VARARGS, NULL},
	 { "surface_restriction", _wrap_surface_restriction, METH_VARARGS, NULL},
	 { "surface_coercion", _wrap_surface_coercion, METH_VARARGS, NULL},
	 { "surface_restriction_and_coercion", _wrap_surface_restriction_and_coercion, METH_VARARGS, NULL},
	 { "deep_restriction", _wrap_deep_restriction, METH_VARARGS, NULL},
	 { "deep_coercion", _wrap_deep_coercion, METH_VARARGS, NULL},
	 { "deep_restriction_and_coercion", _wrap_deep_restriction_and_coercion, METH_VARARGS, NULL},
	 { "TwolcCompiler_compile", _wrap_TwolcCompiler_compile, METH_VARARGS, NULL},
	 { "new_TwolcCompiler", _wrap_new_TwolcCompiler, METH_NOARGS, NULL},
	 { "delete_TwolcCompiler", _wrap_delete_TwolcCompiler, METH_O, NULL},
	 { "TwolcCompiler_swigregister", TwolcCompiler_swigregister, METH_O, NULL},
	 { "TwolcCompiler_swiginit", TwolcCompiler_swiginit, METH_VARARGS, NULL},
	 { "pmatch_get_tokenized_output", _wrap_pmatch_get_tokenized_output, METH_VARARGS, NULL},
	 { "pmatch_locate", _wrap_pmatch_locate, METH_VARARGS, NULL},
	 { "delete_PmatchContainer", _wrap_delete_PmatchContainer, METH_O, NULL},
	 { "PmatchContainer_match", _wrap_PmatchContainer_match, METH_VARARGS, "\n"
		"\n"
		"\n"
		"Match input *input*.\n"
		"\n"
		""},
	 { "PmatchContainer_get_profiling_info", _wrap_PmatchContainer_get_profiling_info, METH_O, "\n"
		"\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "PmatchContainer_set_verbose", _wrap_PmatchContainer_set_verbose, METH_VARARGS, "\n"
		"\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "PmatchContainer_set_profile", _wrap_PmatchContainer_set_profile, METH_VARARGS, "\n"
		"\n"
		"\n"
		"todo\n"
		"\n"
		""},
	 { "new_PmatchContainer", _wrap_new_PmatchContainer, METH_VARARGS, NULL},
	 { "PmatchContainer_locate", _wrap_PmatchContainer_locate, METH_VARARGS, "\n"
		"\n"
		"\n"
		"The locations of pmatched strings for string *input* where the results are limited\n"
		"as defined by *time_cutoff* and *weight_cutoff*.\n"
		"\n"
		"Parameters\n"
		"----------\n"
		"* `input` :\n"
		"    The input string.\n"
		"* `time_cutoff` :\n"
		"    Time cutoff, defaults to zero, i.e. no cutoff.\n"
		"* `weight_cutoff` :\n"
		"    Weight cutoff, defaults to infinity, i.e. no cutoff.\n"
		"\n"
		"Returns\n"
		"-------\n"
		"A tuple of tuples of Location.\n"
		"\n"
		""},
	 { "PmatchContainer_swigregister", PmatchContainer_swigregister, METH_O, NULL},
	 { "PmatchContainer_swiginit", PmatchContainer_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ContextTransducersAreNotAutomataExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((ContextTransducersAreNotAutomataException *) x));
}
static void *_p_StateIsNotFinalExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((StateIsNotFinalException *) x));
}
static void *_p_NotValidLexcFormatExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((NotValidLexcFormatException *) x));
}
static void *_p_NotValidPrologFormatExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((NotValidPrologFormatException *) x));
}
static void *_p_NotValidAttFormatExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((NotValidAttFormatException *) x));
}
static void *_p_NotTransducerStreamExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((NotTransducerStreamException *) x));
}
static void *_p_TransducerIsCyclicExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((TransducerIsCyclicException *) x));
}
static void *_p_EndOfStreamExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((EndOfStreamException *) x));
}
static void *_p_StreamIsClosedExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((StreamIsClosedException *) x));
}
static void *_p_StreamCannotBeWrittenExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((StreamCannotBeWrittenException *) x));
}
static void *_p_StreamNotReadableExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((StreamNotReadableException *) x));
}
static void *_p_FunctionNotImplementedExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((FunctionNotImplementedException *) x));
}
static void *_p_ImplementationTypeNotAvailableExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((ImplementationTypeNotAvailableException *) x));
}
static void *_p_HfstTransducerTypeMismatchExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((HfstTransducerTypeMismatchException *) x));
}
static void *_p_TransducersAreNotAutomataExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((TransducersAreNotAutomataException *) x));
}
static void *_p_StateIndexOutOfBoundsExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((StateIndexOutOfBoundsException *) x));
}
static void *_p_TransducerHeaderExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((TransducerHeaderException *) x));
}
static void *_p_MissingOpenFstInputSymbolTableExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((MissingOpenFstInputSymbolTableException *) x));
}
static void *_p_TransducerTypeMismatchExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((TransducerTypeMismatchException *) x));
}
static void *_p_EmptySetOfContextsExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((EmptySetOfContextsException *) x));
}
static void *_p_SpecifiedTypeRequiredExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((SpecifiedTypeRequiredException *) x));
}
static void *_p_HfstFatalExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((HfstFatalException *) x));
}
static void *_p_TransducerHasWrongTypeExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((TransducerHasWrongTypeException *) x));
}
static void *_p_IncorrectUtf8CodingExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((IncorrectUtf8CodingException *) x));
}
static void *_p_EmptyStringExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((EmptyStringException *) x));
}
static void *_p_SymbolNotFoundExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((SymbolNotFoundException *) x));
}
static void *_p_MetadataExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((MetadataException *) x));
}
static void *_p_FlagDiacriticsAreNotIdentitiesExceptionTo_p_HfstException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((HfstException *)  ((FlagDiacriticsAreNotIdentitiesException *) x));
}
static swig_type_info _swigt__p_ContextTransducersAreNotAutomataException = {"_p_ContextTransducersAreNotAutomataException", "ContextTransducersAreNotAutomataException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EmptySetOfContextsException = {"_p_EmptySetOfContextsException", "EmptySetOfContextsException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EmptyStringException = {"_p_EmptyStringException", "EmptyStringException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EndOfStreamException = {"_p_EndOfStreamException", "EndOfStreamException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FlagDiacriticsAreNotIdentitiesException = {"_p_FlagDiacriticsAreNotIdentitiesException", "FlagDiacriticsAreNotIdentitiesException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FunctionNotImplementedException = {"_p_FunctionNotImplementedException", "FunctionNotImplementedException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HfstException = {"_p_HfstException", "HfstException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HfstFatalException = {"_p_HfstFatalException", "HfstFatalException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HfstTransducerTypeMismatchException = {"_p_HfstTransducerTypeMismatchException", "HfstTransducerTypeMismatchException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ImplementationTypeNotAvailableException = {"_p_ImplementationTypeNotAvailableException", "ImplementationTypeNotAvailableException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IncorrectUtf8CodingException = {"_p_IncorrectUtf8CodingException", "IncorrectUtf8CodingException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataException = {"_p_MetadataException", "MetadataException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MissingOpenFstInputSymbolTableException = {"_p_MissingOpenFstInputSymbolTableException", "MissingOpenFstInputSymbolTableException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NotTransducerStreamException = {"_p_NotTransducerStreamException", "NotTransducerStreamException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NotValidAttFormatException = {"_p_NotValidAttFormatException", "NotValidAttFormatException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NotValidLexcFormatException = {"_p_NotValidLexcFormatException", "NotValidLexcFormatException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NotValidPrologFormatException = {"_p_NotValidPrologFormatException", "NotValidPrologFormatException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpecifiedTypeRequiredException = {"_p_SpecifiedTypeRequiredException", "SpecifiedTypeRequiredException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StateIndexOutOfBoundsException = {"_p_StateIndexOutOfBoundsException", "StateIndexOutOfBoundsException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StateIsNotFinalException = {"_p_StateIsNotFinalException", "StateIsNotFinalException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StreamCannotBeWrittenException = {"_p_StreamCannotBeWrittenException", "StreamCannotBeWrittenException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StreamIsClosedException = {"_p_StreamIsClosedException", "StreamIsClosedException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StreamNotReadableException = {"_p_StreamNotReadableException", "StreamNotReadableException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SymbolNotFoundException = {"_p_SymbolNotFoundException", "SymbolNotFoundException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransducerHasWrongTypeException = {"_p_TransducerHasWrongTypeException", "TransducerHasWrongTypeException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransducerHeaderException = {"_p_TransducerHeaderException", "TransducerHeaderException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransducerIsCyclicException = {"_p_TransducerIsCyclicException", "TransducerIsCyclicException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransducerTypeMismatchException = {"_p_TransducerTypeMismatchException", "TransducerTypeMismatchException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransducersAreNotAutomataException = {"_p_TransducersAreNotAutomataException", "TransducersAreNotAutomataException *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__HfstInputStream = {"_p_hfst__HfstInputStream", "hfst::HfstInputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__HfstOutputStream = {"_p_hfst__HfstOutputStream", "hfst::HfstOutputStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__HfstTokenizer = {"_p_hfst__HfstTokenizer", "hfst::HfstTokenizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__HfstTransducer = {"_p_hfst__HfstTransducer", "hfst::HfstTransducer *|std::vector< hfst::HfstTransducer >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__implementations__HfstBasicTransducer = {"_p_hfst__implementations__HfstBasicTransducer", "hfst::implementations::HfstBasicTransducer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__implementations__HfstBasicTransition = {"_p_hfst__implementations__HfstBasicTransition", "std::vector< hfst::implementations::HfstBasicTransition >::value_type *|hfst::implementations::HfstBasicTransition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__lexc__LexcCompiler = {"_p_hfst__lexc__LexcCompiler", "hfst::lexc::LexcCompiler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__twolc__TwolcCompiler = {"_p_hfst__twolc__TwolcCompiler", "hfst::twolc::TwolcCompiler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__xeroxRules__Rule = {"_p_hfst__xeroxRules__Rule", "hfst::xeroxRules::Rule *|std::vector< hfst::xeroxRules::Rule >::value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__xfst__XfstCompiler = {"_p_hfst__xfst__XfstCompiler", "hfst::xfst::XfstCompiler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst__xre__XreCompiler = {"_p_hfst__xre__XreCompiler", "hfst::xre::XreCompiler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst_ol__Location = {"_p_hfst_ol__Location", "std::vector< hfst_ol::Location >::value_type *|hfst_ol::Location *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hfst_ol__PmatchContainer = {"_p_hfst_ol__PmatchContainer", "hfst_ol::PmatchContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_t = {"_p_size_t", "size_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_float_t = {"_p_std__allocatorT_float_t", "std::vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_hfst__HfstTransducer_t = {"_p_std__allocatorT_hfst__HfstTransducer_t", "std::allocator< hfst::HfstTransducer > *|std::vector< hfst::HfstTransducer >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_hfst__implementations__HfstBasicTransition_t = {"_p_std__allocatorT_hfst__implementations__HfstBasicTransition_t", "std::vector< hfst::implementations::HfstBasicTransition >::allocator_type *|std::allocator< hfst::implementations::HfstBasicTransition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_hfst__xeroxRules__Rule_t = {"_p_std__allocatorT_hfst__xeroxRules__Rule_t", "std::allocator< hfst::xeroxRules::Rule > *|std::vector< hfst::xeroxRules::Rule >::allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_hfst_ol__Location_t = {"_p_std__allocatorT_hfst_ol__Location_t", "std::vector< hfst_ol::Location >::allocator_type *|std::allocator< hfst_ol::Location > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t = {"_p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t", "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > >::allocator_type *|std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t = {"_p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t", "std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > >::allocator_type *|std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__string_const_std__string_t_t = {"_p_std__allocatorT_std__pairT_std__string_const_std__string_t_t", "std::map< std::string,std::string >::allocator_type *|std::allocator< std::pair< std::string const,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__pairT_std__string_std__string_t_t = {"_p_std__allocatorT_std__pairT_std__string_std__string_t_t", "std::vector< std::pair< std::string,std::string > >::allocator_type *|std::allocator< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t = {"_p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t", "std::vector< std::vector< hfst_ol::Location > >::allocator_type *|std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_unsigned_int_t = {"_p_std__allocatorT_unsigned_int_t", "std::vector< unsigned int >::allocator_type *|std::allocator< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t = {"_p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t", "std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t = {"_p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t", "std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__pairT_std__string_std__string_t_t = {"_p_std__lessT_std__pairT_std__string_std__string_t_t", "std::less< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t = {"_p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t", "hfst::HfstSymbolPairSubstitutions *|std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string > > *|std::map< std::pair< std::string,std::string >,std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::pair< std::string,std::string > const,std::pair< std::string,std::string > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "hfst::HfstSymbolSubstitutions *|std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *|std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t = {"_p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t", "std::pair< float,std::vector< std::pair< std::string,std::string > > > *|std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > *|hfst::HfstTwoLevelPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t = {"_p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t", "std::pair< float,std::vector< std::string > > *|std::pair< float,std::vector< std::string,std::allocator< std::string > > > *|hfst::HfstOneLevelPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t = {"_p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t", "std::pair< hfst::HfstTransducer,hfst::HfstTransducer > *|hfst::HfstTransducerPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t = {"_p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t", "std::pair< hfst::HfstTransducer *,unsigned int > *|hfst::HfstTransducerUIntPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "hfst::StringPair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t = {"_p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t", "std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > *|std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > >,std::less< std::pair< float,std::vector< std::pair< std::string,std::string > > > >,std::allocator< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > > *|std::set< std::pair< float,std::vector< std::pair< std::string,std::string > > > > *|std::set< std::pair< float,std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > > > *|hfst::HfstTwoLevelPaths *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t = {"_p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t", "std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string,std::allocator< std::string > > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > *|std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > >,std::less< std::pair< float,std::vector< std::string > > >,std::allocator< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > > *|std::set< std::pair< float,std::vector< std::string > > > *|std::set< std::pair< float,std::vector< std::string,std::allocator< std::string > > > > *|hfst::HfstOneLevelPaths *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t = {"_p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t", "std::set< std::pair< std::string,std::string > > *|std::set< std::pair< std::string,std::string >,std::less< std::pair< std::string,std::string > >,std::allocator< std::pair< std::string,std::string > > > *|hfst::StringPairSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t = {"_p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t", "std::set< std::string,std::less< std::string >,std::allocator< std::string > > *|hfst::StringSet *|std::set< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = {"_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float,std::allocator< float > > *|std::vector< float > *|hfst::FloatVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t = {"_p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t", "std::vector< hfst::HfstTransducer > *|std::vector< hfst::HfstTransducer,std::allocator< hfst::HfstTransducer > > *|hfst::HfstTransducerVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t = {"_p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t", "hfst::implementations::HfstBasicTransitions *|std::vector< hfst::implementations::HfstBasicTransition > *|std::vector< hfst::implementations::HfstBasicTransition,std::allocator< hfst::implementations::HfstBasicTransition > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t = {"_p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t", "std::vector< hfst::xeroxRules::Rule,std::allocator< hfst::xeroxRules::Rule > > *|std::vector< hfst::xeroxRules::Rule > *|hfst::HfstRuleVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t = {"_p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t", "std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > *|std::vector< hfst_ol::Location > *|hfst_ol::LocationVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t = {"_p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t", "std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer >,std::allocator< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > > *|std::vector< std::pair< hfst::HfstTransducer,hfst::HfstTransducer > > *|hfst::HfstTransducerPairVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t = {"_p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t", "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > > *|std::vector< std::pair< std::string,std::string > > *|hfst::StringPairVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *|hfst::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t = {"_p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t", "std::vector< std::vector< hfst_ol::Location > > *|std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > >,std::allocator< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > > *|std::vector< std::vector< hfst_ol::Location,std::allocator< hfst_ol::Location > > > *|hfst_ol::LocationVectorVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *|std::vector< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "unsigned int *|hfst::implementations::HfstState *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ContextTransducersAreNotAutomataException,
  &_swigt__p_EmptySetOfContextsException,
  &_swigt__p_EmptyStringException,
  &_swigt__p_EndOfStreamException,
  &_swigt__p_FlagDiacriticsAreNotIdentitiesException,
  &_swigt__p_FunctionNotImplementedException,
  &_swigt__p_HfstException,
  &_swigt__p_HfstFatalException,
  &_swigt__p_HfstTransducerTypeMismatchException,
  &_swigt__p_ImplementationTypeNotAvailableException,
  &_swigt__p_IncorrectUtf8CodingException,
  &_swigt__p_MetadataException,
  &_swigt__p_MissingOpenFstInputSymbolTableException,
  &_swigt__p_NotTransducerStreamException,
  &_swigt__p_NotValidAttFormatException,
  &_swigt__p_NotValidLexcFormatException,
  &_swigt__p_NotValidPrologFormatException,
  &_swigt__p_SpecifiedTypeRequiredException,
  &_swigt__p_StateIndexOutOfBoundsException,
  &_swigt__p_StateIsNotFinalException,
  &_swigt__p_StreamCannotBeWrittenException,
  &_swigt__p_StreamIsClosedException,
  &_swigt__p_StreamNotReadableException,
  &_swigt__p_SymbolNotFoundException,
  &_swigt__p_TransducerHasWrongTypeException,
  &_swigt__p_TransducerHeaderException,
  &_swigt__p_TransducerIsCyclicException,
  &_swigt__p_TransducerTypeMismatchException,
  &_swigt__p_TransducersAreNotAutomataException,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_hfst__HfstInputStream,
  &_swigt__p_hfst__HfstOutputStream,
  &_swigt__p_hfst__HfstTokenizer,
  &_swigt__p_hfst__HfstTransducer,
  &_swigt__p_hfst__implementations__HfstBasicTransducer,
  &_swigt__p_hfst__implementations__HfstBasicTransition,
  &_swigt__p_hfst__lexc__LexcCompiler,
  &_swigt__p_hfst__twolc__TwolcCompiler,
  &_swigt__p_hfst__xeroxRules__Rule,
  &_swigt__p_hfst__xfst__XfstCompiler,
  &_swigt__p_hfst__xre__XreCompiler,
  &_swigt__p_hfst_ol__Location,
  &_swigt__p_hfst_ol__PmatchContainer,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_p_PyObject,
  &_swigt__p_second_type,
  &_swigt__p_size_t,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_float_t,
  &_swigt__p_std__allocatorT_hfst__HfstTransducer_t,
  &_swigt__p_std__allocatorT_hfst__implementations__HfstBasicTransition_t,
  &_swigt__p_std__allocatorT_hfst__xeroxRules__Rule_t,
  &_swigt__p_std__allocatorT_hfst_ol__Location_t,
  &_swigt__p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__string_const_std__string_t_t,
  &_swigt__p_std__allocatorT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t,
  &_swigt__p_std__allocatorT_unsigned_int_t,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t,
  &_swigt__p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  &_swigt__p_std__lessT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t,
  &_swigt__p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  &_swigt__p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t,
  &_swigt__p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t,
  &_swigt__p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t,
  &_swigt__p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t,
  &_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
  &_swigt__p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t,
  &_swigt__p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t,
  &_swigt__p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t,
  &_swigt__p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t,
  &_swigt__p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_unsigned_int,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_ContextTransducersAreNotAutomataException[] = {  {&_swigt__p_ContextTransducersAreNotAutomataException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EmptySetOfContextsException[] = {  {&_swigt__p_EmptySetOfContextsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EmptyStringException[] = {  {&_swigt__p_EmptyStringException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EndOfStreamException[] = {  {&_swigt__p_EndOfStreamException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FlagDiacriticsAreNotIdentitiesException[] = {  {&_swigt__p_FlagDiacriticsAreNotIdentitiesException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FunctionNotImplementedException[] = {  {&_swigt__p_FunctionNotImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HfstException[] = {  {&_swigt__p_ContextTransducersAreNotAutomataException, _p_ContextTransducersAreNotAutomataExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_StateIsNotFinalException, _p_StateIsNotFinalExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_NotValidLexcFormatException, _p_NotValidLexcFormatExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_NotValidPrologFormatException, _p_NotValidPrologFormatExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_NotValidAttFormatException, _p_NotValidAttFormatExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_NotTransducerStreamException, _p_NotTransducerStreamExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_TransducerIsCyclicException, _p_TransducerIsCyclicExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_EndOfStreamException, _p_EndOfStreamExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_StreamIsClosedException, _p_StreamIsClosedExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_StreamCannotBeWrittenException, _p_StreamCannotBeWrittenExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_StreamNotReadableException, _p_StreamNotReadableExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_FunctionNotImplementedException, _p_FunctionNotImplementedExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_ImplementationTypeNotAvailableException, _p_ImplementationTypeNotAvailableExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_HfstException, 0, 0, 0},  {&_swigt__p_HfstTransducerTypeMismatchException, _p_HfstTransducerTypeMismatchExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_TransducersAreNotAutomataException, _p_TransducersAreNotAutomataExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_StateIndexOutOfBoundsException, _p_StateIndexOutOfBoundsExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_TransducerHeaderException, _p_TransducerHeaderExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_MissingOpenFstInputSymbolTableException, _p_MissingOpenFstInputSymbolTableExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_TransducerTypeMismatchException, _p_TransducerTypeMismatchExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_EmptySetOfContextsException, _p_EmptySetOfContextsExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_SpecifiedTypeRequiredException, _p_SpecifiedTypeRequiredExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_HfstFatalException, _p_HfstFatalExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_TransducerHasWrongTypeException, _p_TransducerHasWrongTypeExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_IncorrectUtf8CodingException, _p_IncorrectUtf8CodingExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_EmptyStringException, _p_EmptyStringExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_SymbolNotFoundException, _p_SymbolNotFoundExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_MetadataException, _p_MetadataExceptionTo_p_HfstException, 0, 0},  {&_swigt__p_FlagDiacriticsAreNotIdentitiesException, _p_FlagDiacriticsAreNotIdentitiesExceptionTo_p_HfstException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HfstFatalException[] = {  {&_swigt__p_HfstFatalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HfstTransducerTypeMismatchException[] = {  {&_swigt__p_HfstTransducerTypeMismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ImplementationTypeNotAvailableException[] = {  {&_swigt__p_ImplementationTypeNotAvailableException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IncorrectUtf8CodingException[] = {  {&_swigt__p_IncorrectUtf8CodingException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataException[] = {  {&_swigt__p_MetadataException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MissingOpenFstInputSymbolTableException[] = {  {&_swigt__p_MissingOpenFstInputSymbolTableException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NotTransducerStreamException[] = {  {&_swigt__p_NotTransducerStreamException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NotValidAttFormatException[] = {  {&_swigt__p_NotValidAttFormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NotValidLexcFormatException[] = {  {&_swigt__p_NotValidLexcFormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NotValidPrologFormatException[] = {  {&_swigt__p_NotValidPrologFormatException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpecifiedTypeRequiredException[] = {  {&_swigt__p_SpecifiedTypeRequiredException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StateIndexOutOfBoundsException[] = {  {&_swigt__p_StateIndexOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StateIsNotFinalException[] = {  {&_swigt__p_StateIsNotFinalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StreamCannotBeWrittenException[] = {  {&_swigt__p_StreamCannotBeWrittenException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StreamIsClosedException[] = {  {&_swigt__p_StreamIsClosedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StreamNotReadableException[] = {  {&_swigt__p_StreamNotReadableException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SymbolNotFoundException[] = {  {&_swigt__p_SymbolNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransducerHasWrongTypeException[] = {  {&_swigt__p_TransducerHasWrongTypeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransducerHeaderException[] = {  {&_swigt__p_TransducerHeaderException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransducerIsCyclicException[] = {  {&_swigt__p_TransducerIsCyclicException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransducerTypeMismatchException[] = {  {&_swigt__p_TransducerTypeMismatchException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransducersAreNotAutomataException[] = {  {&_swigt__p_TransducersAreNotAutomataException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__HfstInputStream[] = {  {&_swigt__p_hfst__HfstInputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__HfstOutputStream[] = {  {&_swigt__p_hfst__HfstOutputStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__HfstTokenizer[] = {  {&_swigt__p_hfst__HfstTokenizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__HfstTransducer[] = {  {&_swigt__p_hfst__HfstTransducer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__implementations__HfstBasicTransducer[] = {  {&_swigt__p_hfst__implementations__HfstBasicTransducer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__implementations__HfstBasicTransition[] = {  {&_swigt__p_hfst__implementations__HfstBasicTransition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__lexc__LexcCompiler[] = {  {&_swigt__p_hfst__lexc__LexcCompiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__twolc__TwolcCompiler[] = {  {&_swigt__p_hfst__twolc__TwolcCompiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__xeroxRules__Rule[] = {  {&_swigt__p_hfst__xeroxRules__Rule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__xfst__XfstCompiler[] = {  {&_swigt__p_hfst__xfst__XfstCompiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst__xre__XreCompiler[] = {  {&_swigt__p_hfst__xre__XreCompiler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst_ol__Location[] = {  {&_swigt__p_hfst_ol__Location, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hfst_ol__PmatchContainer[] = {  {&_swigt__p_hfst_ol__PmatchContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_t[] = {  {&_swigt__p_size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_float_t[] = {  {&_swigt__p_std__allocatorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_hfst__HfstTransducer_t[] = {  {&_swigt__p_std__allocatorT_hfst__HfstTransducer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_hfst__implementations__HfstBasicTransition_t[] = {  {&_swigt__p_std__allocatorT_hfst__implementations__HfstBasicTransition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_hfst__xeroxRules__Rule_t[] = {  {&_swigt__p_std__allocatorT_hfst__xeroxRules__Rule_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_hfst_ol__Location_t[] = {  {&_swigt__p_std__allocatorT_hfst_ol__Location_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__string_const_std__string_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__string_const_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__allocatorT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t[] = {  {&_swigt__p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_unsigned_int_t[] = {  {&_swigt__p_std__allocatorT_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t[] = {  {&_swigt__p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t[] = {  {&_swigt__p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__lessT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t[] = {  {&_swigt__p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t[] = {  {&_swigt__p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t[] = {  {&_swigt__p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t[] = {  {&_swigt__p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t[] = {  {&_swigt__p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t[] = {  {&_swigt__p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t[] = {  {&_swigt__p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t[] = {  {&_swigt__p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = {  {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t[] = {  {&_swigt__p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t[] = {  {&_swigt__p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t[] = {  {&_swigt__p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t[] = {  {&_swigt__p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ContextTransducersAreNotAutomataException,
  _swigc__p_EmptySetOfContextsException,
  _swigc__p_EmptyStringException,
  _swigc__p_EndOfStreamException,
  _swigc__p_FlagDiacriticsAreNotIdentitiesException,
  _swigc__p_FunctionNotImplementedException,
  _swigc__p_HfstException,
  _swigc__p_HfstFatalException,
  _swigc__p_HfstTransducerTypeMismatchException,
  _swigc__p_ImplementationTypeNotAvailableException,
  _swigc__p_IncorrectUtf8CodingException,
  _swigc__p_MetadataException,
  _swigc__p_MissingOpenFstInputSymbolTableException,
  _swigc__p_NotTransducerStreamException,
  _swigc__p_NotValidAttFormatException,
  _swigc__p_NotValidLexcFormatException,
  _swigc__p_NotValidPrologFormatException,
  _swigc__p_SpecifiedTypeRequiredException,
  _swigc__p_StateIndexOutOfBoundsException,
  _swigc__p_StateIsNotFinalException,
  _swigc__p_StreamCannotBeWrittenException,
  _swigc__p_StreamIsClosedException,
  _swigc__p_StreamNotReadableException,
  _swigc__p_SymbolNotFoundException,
  _swigc__p_TransducerHasWrongTypeException,
  _swigc__p_TransducerHeaderException,
  _swigc__p_TransducerIsCyclicException,
  _swigc__p_TransducerTypeMismatchException,
  _swigc__p_TransducersAreNotAutomataException,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_hfst__HfstInputStream,
  _swigc__p_hfst__HfstOutputStream,
  _swigc__p_hfst__HfstTokenizer,
  _swigc__p_hfst__HfstTransducer,
  _swigc__p_hfst__implementations__HfstBasicTransducer,
  _swigc__p_hfst__implementations__HfstBasicTransition,
  _swigc__p_hfst__lexc__LexcCompiler,
  _swigc__p_hfst__twolc__TwolcCompiler,
  _swigc__p_hfst__xeroxRules__Rule,
  _swigc__p_hfst__xfst__XfstCompiler,
  _swigc__p_hfst__xre__XreCompiler,
  _swigc__p_hfst_ol__Location,
  _swigc__p_hfst_ol__PmatchContainer,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_p_PyObject,
  _swigc__p_second_type,
  _swigc__p_size_t,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_float_t,
  _swigc__p_std__allocatorT_hfst__HfstTransducer_t,
  _swigc__p_std__allocatorT_hfst__implementations__HfstBasicTransition_t,
  _swigc__p_std__allocatorT_hfst__xeroxRules__Rule_t,
  _swigc__p_std__allocatorT_hfst_ol__Location_t,
  _swigc__p_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__string_const_std__string_t_t,
  _swigc__p_std__allocatorT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t,
  _swigc__p_std__allocatorT_unsigned_int_t,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t,
  _swigc__p_std__lessT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t,
  _swigc__p_std__lessT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__mapT_std__pairT_std__string_std__string_t_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__pairT_std__string_std__string_t_const_std__pairT_std__string_std__string_t_t_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t,
  _swigc__p_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t,
  _swigc__p_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t,
  _swigc__p_std__pairT_hfst__HfstTransducer_p_unsigned_int_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t_t_t_t,
  _swigc__p_std__setT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_std__lessT_std__pairT_float_std__vectorT_std__string_t_t_t_std__allocatorT_std__pairT_float_std__vectorT_std__string_std__allocatorT_std__string_t_t_t_t_t,
  _swigc__p_std__setT_std__pairT_std__string_std__string_t_std__lessT_std__pairT_std__string_std__string_t_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t,
  _swigc__p_std__setT_std__string_std__lessT_std__string_t_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
  _swigc__p_std__vectorT_hfst__HfstTransducer_std__allocatorT_hfst__HfstTransducer_t_t,
  _swigc__p_std__vectorT_hfst__implementations__HfstBasicTransition_std__allocatorT_hfst__implementations__HfstBasicTransition_t_t,
  _swigc__p_std__vectorT_hfst__xeroxRules__Rule_std__allocatorT_hfst__xeroxRules__Rule_t_t,
  _swigc__p_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_std__allocatorT_std__pairT_hfst__HfstTransducer_hfst__HfstTransducer_t_t_t,
  _swigc__p_std__vectorT_std__pairT_std__string_std__string_t_std__allocatorT_std__pairT_std__string_std__string_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_std__allocatorT_std__vectorT_hfst_ol__Location_std__allocatorT_hfst_ol__Location_t_t_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_unsigned_int,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  hfst::set_warning_stream(&std::cerr);
  
  
  // thread safe initialization
  swig::container_owner_attribute();
  
  SWIG_Python_SetConstant(d, "SFST_TYPE",SWIG_From_int(static_cast< int >(hfst::SFST_TYPE)));
  SWIG_Python_SetConstant(d, "TROPICAL_OPENFST_TYPE",SWIG_From_int(static_cast< int >(hfst::TROPICAL_OPENFST_TYPE)));
  SWIG_Python_SetConstant(d, "LOG_OPENFST_TYPE",SWIG_From_int(static_cast< int >(hfst::LOG_OPENFST_TYPE)));
  SWIG_Python_SetConstant(d, "FOMA_TYPE",SWIG_From_int(static_cast< int >(hfst::FOMA_TYPE)));
  SWIG_Python_SetConstant(d, "XFSM_TYPE",SWIG_From_int(static_cast< int >(hfst::XFSM_TYPE)));
  SWIG_Python_SetConstant(d, "HFST_OL_TYPE",SWIG_From_int(static_cast< int >(hfst::HFST_OL_TYPE)));
  SWIG_Python_SetConstant(d, "HFST_OLW_TYPE",SWIG_From_int(static_cast< int >(hfst::HFST_OLW_TYPE)));
  SWIG_Python_SetConstant(d, "HFST2_TYPE",SWIG_From_int(static_cast< int >(hfst::HFST2_TYPE)));
  SWIG_Python_SetConstant(d, "UNSPECIFIED_TYPE",SWIG_From_int(static_cast< int >(hfst::UNSPECIFIED_TYPE)));
  SWIG_Python_SetConstant(d, "ERROR_TYPE",SWIG_From_int(static_cast< int >(hfst::ERROR_TYPE)));
  SWIG_Python_SetConstant(d, "REPL_UP",SWIG_From_int(static_cast< int >(hfst::xeroxRules::REPL_UP)));
  SWIG_Python_SetConstant(d, "REPL_DOWN",SWIG_From_int(static_cast< int >(hfst::xeroxRules::REPL_DOWN)));
  SWIG_Python_SetConstant(d, "REPL_RIGHT",SWIG_From_int(static_cast< int >(hfst::xeroxRules::REPL_RIGHT)));
  SWIG_Python_SetConstant(d, "REPL_LEFT",SWIG_From_int(static_cast< int >(hfst::xeroxRules::REPL_LEFT)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

